{
    Application = {
        Approvable = {
            AllowApprovalOfDeniedApprovable = false;
            AllowSplitAccounting = true;
            AllowedAttachmentExtensions = (
                txt,
                xls,
                xlsx,
                doc,
                htm,
                html,
                pdf,
                xml,
                ppt,
                jpeg,
                jpg,
                bmp,
                gif,
                zip,
                rtf,
                ps,
                csv,
                docx,
                png,
                pptx,
                ppsx,
                dotx,
                potx,
                sldx,
                xltx
            );
            AllowedForExternalApproval = ( );
            ApprovablesAllowedForTerminatedUser = (
                ariba.purchasing.core.ERPOrder,
                ariba.purchasing.core.Requisition,
                ariba.common.core.UserProfile,
                ariba.purchasing.core.PurchaseOrder,
                ariba.pcard.core.PCardOrder,
                ariba.purchasing.core.DirectOrder,
                ariba.receiving.core.Receipt,
                ariba.receiving.core.ReceiptTracker
            );
            AttemptRecoveryOnOODECount = 2;
            ExternalApprovableChangesAllowPurge = true;
            ExternalApprovableChangesDaysToKeep = 180;
            IncludeAccountingInHTMLEmails = false;
            MaxAccountingSplits = 99;
            MaxAttachmentSize = 102400;
            MaxUsersInApprovalNode = 500;
            NotificationPreferences = {
                ApproverMethod = 0;
                OfApproval = true;
                OfFullApproval = true;
                OfOverdueApprovable = 1;
                OfWaitingApprovable = 1;
                OfWatchingApprovable = 1;
                WatcherMethod = 0;
            };
            PrimaryStringOnlyInToDoResult = false;
            PriorityWorkflowQueueSupportedClasses = ( );
            RestrictAuditRole = ( );
            SupportFastRemovalFromUserFolders = true;
            ToDoQueryLimit = 500;
            ViewableAttachmentExtensions = ( txt, jpeg, jpg, bmp, gif, pdf, png, jpe, jfif, tiff );
        };
        Authentication = {
            AllowNullPasswordWizardCredential = true;
            ModifyUserProfileOnInitialLogon = false;
            OrganicGrowth = false;
            OrganicPasswordGrowthCredential = Supervisor.UniqueName;
            PasswordAdapter = PasswordAdapter1;
            ValidateUser = Notify;
        };
        Base = {
            AddressIdPrefix = AD;
            AllowDuplicateOrgNames = false;
            ApprovableIdMethod = "";
            CaseSensitiveEmailMatching = false;
            CompanyHolidays = "Jan-1-2006:Jul-4-2006:Dec-25-2006";
            Data = {
                AribaGuestSystemUser = aribaguestsystem;
                AribaGuestSystemUserPasswordAdapter = PasswordAdapter1;
                AribaSystemAppUserEmailAddress = "nobody@phoenix.ariba.com";
                AribaSystemUser = aribasystem;
                AribaSystemUserPasswordAdapter = PasswordAdapter1;
                DefaultBillToAddress = 15;
                DefaultCurrency = USD;
                DefaultLanguage = English;
                DefaultOrganicUserLocale = en_US;
                MLSEditLanguages = {};
            };
            DefaultLocale = en_US;
            EmailApprovalAudit = false;
            EmailApprovalAutoReject = false;
            EmailApprovalAutoRejectAudit = false;
            EmailApprovalAutoRejectNotification = false;
            EmailApprovalEnabled = false;
            EmailApprovalIncludeComment = true;
            EmailApprovalMailToLink = true;
            EmailApprovalMailToLinkEncoding = "";
            EmailApprovalReplyTo = "approval@c02c813emd6m.ariba.com";
            EnforceEmailDomainCheck = false;
            FiscalNewYear = Jul-1-1998;
            INLiteralLimitForSubquery = 30;
            IntegrationEventStatusScope = ( procurementeventstatus, strategicsourcingeventstatus );
            MDSConfiguration = {
                Chooser = { IncludeClassList = ( );};
                Publish = { DisabledClassList = ( );};
            };
            NotificationFromAddress = "notificationAdmin@your.admins.domain";
            NotificationFromNameKey = DefaultNotificationFromName;
            ParentTransactionApprovables = (
                "ariba.catalog.admin.core.CatalogApprovable",
                ariba.kitting.core.KitApprovable,
                ariba.common.core.UserProfile
            );
            PartitionLabel = "";
            ProcessUserGroupChangeAsynchronously = false;
            PunchOutEnabled = true;
            RecomputeValueOnFieldChange = false;
            RowPrefetchSize = 10;
            SendWebJumperAsAttachment = false;
            SkipWeekendsAndHolidays = true;
            ValidateAccounting = true;
            VerifyUnchangedEnumerationValues = false;
        };
        Budget = {
            ActivationDate = "";
            CheckEnabledOnReqImport = false;
            DefaultTolerance = 0;
            FailCheckOnNoBudget = true;
            ReqSubmitOnError = true;
            WarningThresholdPercentage = 80;
        };
        Catalog = {
            FullyCustomerAdministered = false;
            GenerateReportingEntriesSchedule = 7;
            Hierarchy = { Order = OrderInFile;};
            MinCategorySizeForCategoricView = 10;
            Network = { DefaultMSCif = false;};
            NoUpdateAfterApprove = false;
            SendCatalogUseStatus = true;
            Validation = { StrictCIFParsing = false;};
        };
        CategoryProcurement = {
            AddCustomInvitedSupplierGroup = "";
            AllowChangeSuppliersWhileCollaborating = true;
            ChangeSuppliersWhileCollaboratingGroup = "";
            "CollaboratingSuppliersMustIncludeAllItems" = false;
            DefaultValueQualifier = NotToExceed;
            EndCollaborationGroup = "";
        };
        Charge = {
            AdjustChargeAmountAgainstReceipt = false;
            AutoAcceptAmount = 10;
            AutoAcceptPercentage = 0.15;
            ChargeReconciliationEngine = "ariba.charge.AribaChargeReconciliationEngine";
            ChargeReconciliationMethod = "ariba.charge.AribaChargeReconciliationMethod";
            DefaultTaxTypeName = sales;
            Enabled = true;
            PaymentSendMethod = Silent;
            ResetApprovalsOnReconcile = true;
            SkipAmount = 5;
        };
        Content = {
            PunchOutHandlerPasswordAdapter = PasswordAdapter1;
            PunchOutSessionTimeout = 60;
        };
        Contract = {
            MasterAgreement = { ApplySupAndCommTermsToNonCatalogItems = true;};
        };
        CorpAuthenticationCompatibility = { BackwardCompatible = false; ForwardCompatible = false;};
        Customization = {
            Packager = {
                ParametersExcludedFromImport = (
                    "Application.Authentication.PasswordAdapter",
                    Application.Base.Data.DefaultLanguage,
                    Application.OpenApi.ClientIds,
                    "Application.PasswordAdapters.*.AddServiceProviderReturnURL",
                    "Application.PasswordAdapters.*.CertificateContent",
                    "Application.PasswordAdapters.*.CorpAuthEnabled",
                    "Application.PasswordAdapters.*.CorpAuthLogoutURL",
                    "Application.PasswordAdapters.*.CorpAuthPublicKey",
                    "Application.PasswordAdapters.*.CorpAuthType",
                    "Application.PasswordAdapters.*.CorpAuthURL",
                    Application.PasswordAdapters.*.Issuer,
                    "Application.PasswordAdapters.*.SendDefaultACS",
                    "Application.PasswordAdapters.*.SendSAMLRequest",
                    "Application.PasswordAdapters.*.SkipSendingACS",
                    "Application.PasswordAdapters.*.UseSAMLRelayState",
                    "Application.PasswordAdapters.*.ValidateAssertionId",
                    "Application.PasswordAdapters.*.ValidateAssertionsAfterLogin",
                    "Application.PasswordAdapters.*.ValidateAudience",
                    "Application.PasswordAdapters.*.ValidateRecipient",
                    "Application.PasswordAdapters.*.CorpAuthEnabled",
                    "Application.PasswordAdapters.*.CorpAuthLogoutURL",
                    "Application.PasswordAdapters.*.CorpAuthPublicKey",
                    "Application.PasswordAdapters.*.CorpAuthURL"
                );
            };
        };
        Debug = { SMTPAddressRedirect = ""; ShowPortletDebugInfo = true;};
        Eform = {
            CustomEformNameTable = "ariba.approvable.core.nametable.EformNameTable";
            EformRegistration = "";
        };
        Expense = {
            TAChargeReconciliationEngine = "ariba.expense.core.TAChargeReconciliationEngine";
            Tax = {
                ExpenseTaxCodeBasedTaxServiceProvider = {
                    JoinField = TaxCode;
                    RankField = Rank;
                    ServiceProvider = "ariba.expense.core.tax.ExpenseTaxCodeBasedTaxServiceProvider";
                    TaxCodeLookupAccrualField = IsAccrual;
                    TaxCodeLookupClass = "ariba.expense.core.tax.ExpenseTaxCodeLookup";
                    TaxCodeLookupField = TaxCode;
                    TaxCodeOutboundFieldsGroup = ExpenseTaxCodeLookupOutboundFieldsGroup;
                    TaxRateLookupClass = "ariba.expense.core.tax.ExpenseTaxRateLookup_TaxCode";
                    TaxRateLookupEffectiveDateField = EffectiveDate;
                    TaxRateLookupField = TaxRate;
                    TaxRateLookupTaxTypeField = TaxType;
                    TaxRateOutboundFieldsGroup = "ExpenseTaxRateLookupOutboundFieldsGroup_TaxCode";
                };
            };
        };
        FeatureToggle = { AsyncUserGroupChangeProcessing = false;};
        Folder = {
            FolderNameApprove = {
                AllowAutomaticCleanup = false;
                DaysToKeepFolderItems = 90;
                MaxFolderItemsSize = 100000;
            };
            FolderNameArchive = {
                AllowAutomaticCleanup = false;
                DaysToKeepFolderItems = 90;
                MaxFolderItemsSize = 100000;
            };
            FolderNameFavorite = {
                AllowAutomaticCleanup = false;
                DaysToKeepFolderItems = 90;
                MaxFolderItemsSize = 100000;
            };
            FolderNameReceive = {
                AllowAutomaticCleanup = false;
                DaysToKeepFolderItems = 90;
                MaxFolderItemsSize = 100000;
            };
            FolderNameReconcile = {
                AllowAutomaticCleanup = false;
                DaysToKeepFolderItems = 90;
                MaxFolderItemsSize = 100000;
            };
            FolderNameStatus = {
                AllowAutomaticCleanup = false;
                DaysToKeepFolderItems = 90;
                MaxFolderItemsSize = 100000;
            };
            FolderNameWatch = {
                AllowAutomaticCleanup = false;
                DaysToKeepFolderItems = 90;
                MaxFolderItemsSize = 100000;
            };
        };
        Invoicing = {
            "AllowSupplierToCreateCompliantContractInvoice" = false;
            AutoAcceptAmount = 10;
            AutoAcceptPercentage = 0.15;
            CXMLInvoiceCreator = ariba.invoicing.AribaCXMLInvoiceCreator;
            DefaultTaxTypeName = sales;
            DisableInvalidFieldCheckOnSubmit = false;
            "DisableRereconciliationOfRelatedIRsForContract" = false;
            "DisableRereconciliationOfRelatedIRsForOrder" = false;
            DisallowAcceptOnExceptionTypes = ( );
            EnableTaxesOnShippingAndHandlingItems = false;
            Enabled = true;
            IgnoreZeroHeaderTax = true;
            IgnoreZeroLineHandling = true;
            IgnoreZeroLineShipping = true;
            InvoiceAutoReceivingEnabled = true;
            InvoiceEntryAllowOverInvoicing = false;
            InvoicePaymentMethod = ariba.payment.AribaInvoicePaymentMethod;
            InvoiceReconciliationEngine = "ariba.invoicing.AribaInvoiceReconciliationEngine";
            InvoiceReconciliationMethod = "ariba.invoicing.AribaInvoiceReconciliationMethod";
            InvoiceRejectionMethod = "ariba.invoicing.AribaInvoiceRejectionMethod";
            InvoiceStatusCommentFormatter = "ariba.invoicing.AribaInvoiceStatusCommentFormatter";
            InvoicingObjectsFromCacheRemover = "ariba.invoicing.AribaInvoicingObjectsFromCacheRemover";
            "LineItemsLimitForInvoiceProcessingOffload" = 250;
            "MaxInvoiceLineItemNumberAllowedForValidation" = 5000;
            MaximumInvoiceProcessDelays = 3;
            NewInvoiceEntryWizardEnabled = true;
            "OffloadInvoiceProcessingOnReceivableChange" = true;
            PayableERPErrorPullEvent = InvoiceERPErrorPull;
            PayableERPInfoPullEvent = InvoiceERPInfoPull;
            PayableERPStatusPullEvent = InvoiceERPStatusPull;
            PayablePushEvent = PaymentPush;
            PaymentSendMethod = Silent;
            ProcessPaymentsForTaxAccrual = true;
            RejectRequiresNoMoreApprovals = true;
            ResetApprovalsOnReconcile = true;
            "SendInvoiceAndPaymentsForPrivateSupplierToAN" = false;
            ShippingCommodityCode = 7810;
            SkipAmount = 5;
            SpecialHandlingCommodityCode = 7812;
            SupplierRejectionCommentsRequired = false;
            TaxAccrualExceptions = ( UnderTaxVariance, AccrualTaxVariance );
            TaxIDDomains = ( vatID, gstID, supplierTaxID );
            UseInvoiceDateAsCalendarDate = false;
            UseInvoiceERPIntegration = true;
        };
        ItemMaster = {
            ItemMasterXRefSelectors = "ariba.itemmaster.rules.CatalogPriceRank:ariba.itemmaster.rules.ContractExistsRank:ariba.itemmaster.rules.ASNEnabledRank";
        };
        MasterData = {
            ClassesWithTranslation = (
                ariba.basic.core.ClassificationCodeMap,
                ariba.basic.core.CommodityCode,
                ariba.basic.core.Country,
                ariba.basic.core.Currency,
                ariba.user.core.Group,
                ariba.base.core.Language,
                ariba.basic.core.UnitOfMeasure
            );
            DisabledPublishClasses = ( );
            ForcePublishHANAMigrationClasses = "";
            HANAMasterDataTypeMaxFetchCount = "";
            HANAMaxFetchCount = 0;
            HANAMigrationIncludeInactiveClasses = "";
        };
        Messaging = { IsSPCIncrementalDataTransferEnabled = true;};
        MultiFactorAuthentication = {
            MFALockoutPeriodInMinutes = 120;
            MFARememberMe = false;
            MaxMFALoginAttempts = 5;
            NoOfDaysDeviceIsRemembered = 5;
            SkipAllowedForDays = 5;
        };
        OpenApi = { ClientIds = guidedbuy-2lo-client;};
        Password = {
            NewPasswordTokenLifeSpan = 48;
            ObscureSecretAnswer = false;
            PasswordExpireLimit = -1;
            PasswordExpireWarning = 14;
            PasswordResetTokenLifeSpan = 720;
            RestrictLastXPasswordsUsed = 4;
        };
        Procure = {
            AllowAdHocCarbonCopyDirectOrders = true;
            AllowAdhocShipToAddress = false;
            AllowChangeOnChargedRequisition = false;
            AllowChangeRequisition = true;
            AllowOrderChangeInInvoiced = false;
            AllowOrderChangeInReceived = false;
            AllowOrderChangeInReceiving = true;
            AllowSAPSplitByAmountInPOExport = false;
            AllowShippedOrderCancel = false;
            AllowShippedOrderChange = false;
            AllowShippingOrderCancel = false;
            AllowShippingOrderChange = false;
            AllowZeroItemPrice = false;
            AmountVariance = 100.00;
            AmountVarianceWithTaxes = 50.00;
            AutoReceiveImportedReqs = false;
            AutoReceiveLineItemAmount = "";
            AutoReceiveOrderAmount = "";
            CXMLDecodeOrganizationUnitFieldPath = LineItemCollection.CompanyCode;
            CanSendPCardOrderForNonCatalog = false;
            CompanyName = Ariba;
            CopySplitAccountingsToChildren = false;
            "CorrectAccrualTransactionsAccumulatorsFromDate" = "";
            "CorrectAccrualTransactionsAccumulatorsToDate" = "";
            DecimalMaxDigits = -1;
            DefaultLeadTime = 0;
            DefaultUnitOfMeasure = EA;
            ERPAmountPrecision = 4;
            ERPPushFailNotificationPermission = PurchasingAgent;
            EnableAccrualTransactionHistory = true;
            EnableEncumbranceTransactionHistory = false;
            OrderContractFile = "config/data/contract.txt";
            OrderMethodParameters = { ERPCC = { DisableProcessingForManualSuppliers = false;};};
            OverReceivingOperator = OR;
            OverReceivingPercentage = 10;
            OverReceivingQuantity = 0;
            OverReceivingValue = 0;
            PCardOrderMaxAmount = 1000;
            PaymentTermsDefaulter = ariba.payment.AribaPaymentTermsDefaulter;
            PercentVariance = 10;
            PercentVarianceWithTaxes = 5;
            PullAckFromERP = true;
            PunchOutSetupExtrinsicsClass = "";
            PurchaseOrderCancelErrorPullEvent = PurchaseOrderCancelErrorPull;
            PurchaseOrderCancelEvent = PurchaseOrderCancelPush;
            PurchaseOrderCancelPullEvent = PurchaseOrderCancelPull;
            PurchaseOrderCancelStatusPullEvent = PurchaseOrderCancelStatusPull;
            PurchaseOrderChangeErrorPullEvent = PurchaseOrderChangeErrorPull;
            PurchaseOrderChangeEvent = PurchaseOrderChangePush;
            PurchaseOrderChangePullEvent = PurchaseOrderChangePull;
            PurchaseOrderChangeStatusPullEvent = PurchaseOrderChangeStatusPull;
            PurchaseOrderCloseEvent = PurchaseOrderClosePush;
            PurchaseOrderERPHeaderStatusPullEvent = PurchaseOrderERPHeaderStatusImport;
            PurchaseOrderErrorPullEvent = PurchaseOrderErrorPull;
            PurchaseOrderEvent = PurchaseOrderPush;
            PurchaseOrderPullEvent = PurchaseOrderPull;
            PurchaseOrderStatusPullEvent = PurchaseOrderStatusPull;
            ReceiptByPartNumberFile = "";
            ReceiptCreationMethods = "ariba.receiving.core.CreateSingleReceiptMethod";
            ReceiptDataByPartitionedCommodityCode = false;
            ReceiptPullEvent = ReceiptPull;
            ReceiptPushErrorPullEvent = ReceiptErrorPull;
            RecurringFeeItemCalendarBasedFlag = false;
            RelaxDefaultOnRequesterChange = false;
            SendNotificationsForReceiving = true;
            SendPOInternalVersionToSupplier = false;
            SubmitSupplierLocationCondition = "ariba.procure.core.condition.ValidSupplierLocation";
            "SuppressOCASNNotificationsToRequestorPreparer" = false;
            TextOrderWidth = 100;
            UnderReceivingOperator = AND;
            UnderReceivingPercentage = 0;
            UnderReceivingQuantity = 0;
            UnderReceivingValue = 0;
            UseCancelOrderIntegration = false;
            UseChangeOrderIntegration = false;
            UseReqOrPOIntegration = true;
            WholeNumberMaxDigits = -1;
        };
        Reports = { CSVReportsCharset = UTF-8; EnableUserCurrencyDisplay = false;};
        SamlConfiguration = {
            AddServiceProviderReturnURL = false;
            BindingType = Post;
            CorpAuthPrivateKey = "";
            IdentityProviderPublicKey = "";
            IdentityProviderURL = "";
            TestResponse = false;
            ValidationClockSkew = 0;
        };
        Security = {
            FrontDoorId = Legacy;
            MultiFrontDoorHostIndex = 1;
            SAML = { UseLegacyVanityURL = false;};
        };
        Tax = {
            AribaTaxCodeBasedTaxServiceProvider = {
                ChooserFilterFieldsGroup = TaxCodeChooserFilterGroup;
                ChooserQueryGroup = TaxCodeChooserQueryGroup;
                ChooserUIGroup = TaxCodeChooserUIGroup;
                JoinField = TaxCode;
                RankField = Rank;
                ServiceProvider = "ariba.tax.AribaTaxCodeBasedTaxServiceProvider";
                TaxCodeBasedRateLookupSupported = true;
                TaxCodeLookupAccrualField = IsAccrual;
                TaxCodeLookupClass = ariba.core.TaxCodeLookup;
                TaxCodeLookupField = TaxCode;
                TaxCodeOutboundFieldsGroup = TaxCodeLookupOutboundFieldsGroup;
                TaxRateLookupClass = ariba.core.TaxRateLookup_TaxCode;
                TaxRateLookupEffectiveDateField = EffectiveDate;
                TaxRateLookupField = TaxRate;
                TaxRateLookupTaxTypeField = TaxType;
                TaxRateOutboundFieldsGroup = TaxRateLookupOutboundFieldsGroup_TaxCode;
            };
            AribaTaxServiceProvider = {
                OutboundFieldsGroup = TaxRateLookupOutboundFieldsGroup;
                RateLookupClass = ariba.core.TaxRateLookup;
                RateLookupField = TaxRate;
                RateOrderByField = Rank;
                ServiceProvider = ariba.tax.AribaTaxServiceProvider;
                TaxCodeBasedRateLookupSupported = false;
            };
            DefaultProvider = AribaTaxCodeBasedTaxServiceProvider;
            Enabled = true;
            TaxableAmountGetter = "";
        };
        UI = {
            ApprovablesNotDisplayedInMyDocuments = (
                ariba.common.core.SupplierProfileRequest,
                ariba.receiving.core.Receipt,
                ariba.receiving.core.MilestoneTracker,
                ariba.contract.core.Contract,
                "ariba.invoicing.core.InvoiceReconciliation",
                ariba.payment.core.Payment,
                ariba.payment.core.PaymentTransaction,
                ariba.purchasing.core.PurchaseOrder,
                ariba.purchasing.core.CopyOrder,
                ariba.purchasing.core.DirectOrder,
                ariba.purchasing.core.ERPOrder,
                ariba.pcard.core.PCardOrder,
                ariba.charge.core.ChargeReconciliation,
                ariba.charge.core.Charge,
                ariba.collaboration.core.Proposal,
                ariba.collaboration.core.CounterProposal,
                "ariba.collaboration.core.CollaborationRequest",
                "ariba.expense.core.TravelAuthorizationOrder",
                ariba.budget.core.Budget,
                ariba.servicesheet.core.ServiceSheetCart
            );
            AutoRefreshInterval = 0;
            CompanyNewsFile = companynews.html;
            DisplayEuroSymbol = true;
            EnableReceiving = true;
            EnableReconciliation = true;
            IsAW6Default = true;
            IsAW6Enabled = true;
            MassActionItemLimit = 15;
            MaxRecentUserChoices = 5;
            PortletIdPrefix = BuyerPortlet;
            ShowInitialSearchResults = false;
            UsabilitySurveyLink = "";
            ValidateUserProfileAccounting = true;
        };
        User = { CanSupplierSelfRegister = false;};
        Workforce = {
            AllowTimeSheetViolations = false;
            AutoGenerateContractorUser = true;
            BillRatePrecision = -1;
            ContractorCreationProcessor = "ariba.workforce.core.AribaContractorCreationProcessor";
            ContractorEngine = "ariba.workforce.core.AribaContractorEngine";
            CreateInvoiceForTimesheet = {
                CreateInvoices = true;
                EnableVendorFundedModel = false;
                ExcludedSuppliers = ( );
                ForceInvocationMode = false;
                IncludedSuppliers = ( );
                InvoiceGenerationSchedule = "";
                ItemAggregationLevel = Receipt;
                MSPAccountingDetails = ( );
                MSPExpenseSheetPercentageSplit = 0.0;
                MSPSupplierUniqueName = "";
                MSPTimeSheetPercentageSplit = 0.0;
                MaxReceiptsToProcess = -1;
                ReceiptType = "";
                SubmitInvoices = true;
                SupplierDomain = buyersystemid;
                TimeSheetInvoicingGroupingLevel = PurchaseOrder;
                UseFixedPrefixInvoiceNumber = false;
                VMSAccountingDetails = ( );
                VMSExpenseSheetPercentageSplit = 0.0;
                VMSSupplierUniqueName = "";
                VMSTimeSheetPercentageSplit = 0.0;
            };
            DefaultContractorUserPasswordAdapter = "Application.Base.Data.AribaSystemUserPasswordAdapter";
            DoNotAcceptCoemploymentRiskCandidate = false;
            EndDayForWorkWeek = 6;
            LaborComplianceEngine = "ariba.workforce.core.LaborComplianceEngineImpl";
            MaxConsecutiveOnSiteDays = 180;
            MinGoodSitDays = 30;
            StartDayForWorkWeek = 2;
            TimeSheetHourPrecision = 2;
            TimeSheetRoutingEnabled = true;
            UnapprovedTimeSheetForecastDays = 15;
            UnapprovedTimeSheetRoutingDeferDays = 0;
            UseBatchContractorCreation = false;
        };
    };
    Ops = {
        Servercfg = { RemoteIpValveInternalProxies = "";};
        ServiceName = i539920.c02c813emd6m;
        UsesPciPassword = false;
    };
    Partitions = {
        None = {
            Application = {
                Base = {
                    DefaultLocale = en_US;
                    ScheduledTasksFile = "variants/Plain/partitions/None/ScheduledTasks.table";
                };
                Messaging = {
                    MessageConfigurationFiles = {
                        CXML = {
                            None = (
                                "config/variants/Plain/partitions/None/cxml/MessageConfiguration.table"
                            );
                        };
                        File = {
                            None = (
                                "config/variants/Plain/partitions/None/file/MessageConfiguration.table"
                            );
                        };
                        HTTP = {
                            None = (
                                "config/variants/Plain/partitions/None/http/MessageConfiguration.table"
                            );
                        };
                        WS = {
                            None = (
                                "config/variants/Plain/partitions/None/ws/MessageConfiguration.table"
                            );
                        };
                    };
                    MessageDefinitionFiles = {
                        Plain = (
                            "./ariba/variants/Plain/messages/MessageDefinition.table",
                            "./config/variants/Plain/messages/MessageDefinition.table"
                        );
                    };
                };
            };
        };
        pcsv = { Application = { Procure = { DefaultPaymentTerms = PT1;};};};
        pgeneric = {
            Application = {
                Approvable = {
                    ApprovalRequestEscalateWarningPeriod = 0;
                    ApprovalRequestEscalationPeriod = 0;
                    Defaulting = {
                        ProcurementUnit = {
                            ariba.charge.core.Charge = (
                                Order.ProcurementUnit,
                                Requester.PartitionedUser.Accounting,
                                PCard.ProcurementUnit
                            );
                            ariba.charge.core.ChargeReconciliation = ( Order.ProcurementUnit, Charge.ProcurementUnit );
                            ariba.common.core.Accounting = (
                                ProcurementUnit,
                                CostCenter.ProcurementUnit,
                                BusinessUnit.ProcurementUnit,
                                Company.ProcurementUnit
                            );
                            ariba.content.core.ShoppingCart = ( Requester.PartitionedUser.Accounting );
                            ariba.contract.core.Contract = ( MasterAgreementRequest.ProcurementUnit );
                            ariba.contract.core.ContractRequest = ( Requester.PartitionedUser.Accounting );
                            "ariba.expense.core.ExpenseLineItemCollection" = ( Requester.PartitionedUser.Accounting );
                            ariba.invoicing.core.Invoice = (
                                Order.ProcurementUnit,
                                MasterAgreement.ProcurementUnit,
                                Requester.PartitionedUser.Accounting
                            );
                            "ariba.invoicing.core.InvoiceReconciliation" = ( Invoice.ProcurementUnit );
                            ariba.payment.core.Payment = ( InvoiceReconciliation.ProcurementUnit );
                            ariba.purchasing.core.CopyOrder = (
                                Requester.PartitionedUser.Accounting,
                                LineItems.Accountings.SplitAccountings,
                                "LineItems.Requester.PartitionedUser.Accounting"
                            );
                            ariba.purchasing.core.Requisition = ( Requester.PartitionedUser.Accounting );
                            ariba.receiving.core.MilestoneTracker = (
                                Order.ProcurementUnit,
                                MasterAgreement.ProcurementUnit,
                                Requester.PartitionedUser.Accounting
                            );
                            ariba.receiving.core.Receipt = (
                                Order.ProcurementUnit,
                                MasterAgreement.ProcurementUnit,
                                Requester.PartitionedUser.Accounting
                            );
                        };
                        SupplierLocation = {
                            ariba.invoicing.core.Invoice = ( );
                            "ariba.invoicing.core.InvoiceReconciliation" = ( );
                        };
                    };
                    EncryptAttachments = true;
                    NotificationConfiguration = "";
                    OrganizationPartitioner = "ariba.common.core.OrganizationalPartitioner";
                    OrganizationPartitioningEnabled = false;
                    OrganizationalVisibilityPartitioning = false;
                    ProcurementUnitPopulate = (
                        ariba.purchasing.core.Requisition,
                        ariba.purchasing.core.PurchaseOrder,
                        ariba.contract.core.ContractRequest,
                        ariba.contract.core.Contract,
                        ariba.receiving.core.MilestoneTracker,
                        ariba.receiving.core.Receipt,
                        ariba.invoicing.core.Invoice,
                        "ariba.invoicing.core.InvoiceReconciliation",
                        ariba.payment.core.Payment,
                        ariba.payment.core.PaymentTransaction,
                        "ariba.expense.core.ExpenseLineItemCollection",
                        "ariba.common.core.punchout.PunchOutLineItemCollection"
                    );
                };
                Base = {
                    Barcode = { AllowHumanReadable = false;};
                    Data = {
                        AribaSystemUser = aribasystem;
                        DefaultBillToAddress = DEFAULT_BILLING_ADDRESS;
                        DefaultCurrency = USD;
                    };
                    DefaultLocale = en_US;
                    PreferredEmailFormat = HTML;
                    ScheduledTasksFile = "variants/vgeneric/partitions/pgeneric/ScheduledTasks.table";
                    UseServiceProviderIDForCommonCredential = true;
                };
                Charge = {
                    OverdueChargesWarningPeriod = 7;
                    PaymentRequestSendMethods = MessagingQueue;
                };
                ClassificationCodes = {
                    ASMSharedDomainList = ( unspsc );
                    CommodityCodeUIDomainImpl = "ariba.basic.core.DefaultCommodityCodeUIDomainImpl";
                    DecoratedDomainLookup = "ariba.purchasing.core.DecoratedClassificationDomainLookup";
                    SystemAllNodeUniqueName = All;
                    SystemCommodityCodeDomainName = unspsc;
                    UnspscAuditFile = "config/standards/unspscaudit135.csv";
                };
                Common = { SM = { Enabled = true;}; ValidateAddress = false;};
                Contract = {
                    MasterAgreement = {
                        ASNBPOForPrivateSupplier = true;
                        AllowChange = true;
                        AllowCollaborativeInvoicing = false;
                        AlwaysRegenerateApprovalGraph = false;
                        ApplySupAndCommTermsToNonCatalogItems = true;
                        ContractSendMethodName = URL;
                        CreateSubscriptionForNonCatalogItems = true;
                        CumulativePricingState = Ordered;
                        EnableAutoSelect = true;
                        MAReceivingTypeMethod = "ariba.contract.receiving.ContractReceivingTypeRule";
                        ProcessPeriodInDays = 1;
                        ReleaseAvailableBalanceState = Ordered;
                        UseMasterAgreementIdForPurchaseOrderId = true;
                        WaitForMASubscriptionLoad = true;
                    };
                };
                ElectronicOrder = {
                    Defaults = {
                        ElectronicOrderPasswordAdapter = PasswordAdapter1;
                        "ElectronicOrderPreparerForIntegrationLoad" = dmarino;
                        "ElectronicOrderRequesterForIntegrationLoad" = dmarino;
                    };
                    ElectronicOrderExtensionHook = "";
                };
                Expense = {
                    AdjustPermissionStyle = AdjustExpenseReportNotAllowed;
                    ChargeItemsRequireReceipts = false;
                    DefaultExpenseType = Airfare;
                    EnableFixErrorsViolations = true;
                    EnableTravelAuthorization = true;
                    ExpenseExcelTemplate = "./config/variants/vgeneric/partitions/pgeneric/data/ExpenseTemplate.xls";
                    ExpenseGuidelinesTable = "./config/variants/vgeneric/partitions/pgeneric/data/ExpenseGuidelines.table";
                    ExpenseSendMethod = MessagingQueue;
                    ExpenseTypesNotBillable = ( Personal, HealthClub );
                    ExpenseTypesRequireItemization = ( Hotel );
                    ExpenseWithoutReceiptImageNotifyPeriod = 1;
                    ExpenseWithoutReceiptNotifyPeriod = 14;
                    ForceFullChargeItemization = false;
                    GiftAndEntertainmentPolicyURL = "";
                    HotelWizardExpenseTypes = (
                        Breakfast,
                        Lunch,
                        Dinner,
                        Parking,
                        Telephone,
                        Tips,
                        Laundry
                    );
                    Imaging = {
                        AllApproversViewReceipts = true;
                        AllowedReceiptsExtensions = ( tif, pdf, jpeg, jpg, bmp, gif );
                        EnableManualUpload = false;
                        Enabled = false;
                        ImagingProviderImplementorClass = "";
                        ReceiptImagingConfig = ProcurementUnit;
                    };
                    ItemizeExpenseTypes = ( Hotel );
                    NotifyExpenseReceiptManagers = true;
                    PassAuditRequiredBeforeProcessing = false;
                    "PrepopulateExpenseFromTravelAuthorization" = true;
                    ShowExpenseReportsForMaxDays = 30;
                    ShowGroupByExpenseTypeInCart = false;
                    ShowMyTripsForMaxDays = 30;
                    ShowViolationForUnreconciledCharge = true;
                    Tax = {
                        CountriesRequireState = ( CA );
                        Enabled = true;
                        ExpenseTaxCodeBasedTaxServiceProvider = {
                            LegalEntityPath = LineItemCollection.ProcurementUnit;
                        };
                        UseGrossAmounts = true;
                        UseVATDefaults = false;
                    };
                    TravelBookingProvider = {
                        AllowCancel = true;
                        AllowChange = true;
                        CustomerIdentity = "";
                        Domain = bogus-duns;
                        Identity = 165603902;
                        PunchOutURL = "http://localhost:7778/ExpensePunchoutTest/aribaLiveSetup.htm";
                        SendMethods = {
                            URL = {
                                Formatter = ariba.expense.ordering.TAOOrderFormatter;
                                Sender = ariba.expense.ordering.TAOOrderSender;
                            };
                        };
                    };
                    UseBaseHotelRateForLimit = true;
                    UseTravelAuthorization = true;
                };
                Invoicing = {
                    AllowAdhocExternalShipToAddress = true;
                    AllowInvoiceAttachmentMetadataToERP = false;
                    AllowInvoiceAttachmentsToERP = false;
                    AllowReusingInvoiceNumber = ( );
                    "AlwaysDisplayRejectButtonForIRsInApproving" = false;
                    "CorrectAmountInvoicedAccumulatorsForApprovable" = "";
                    "CorrectAmountInvoicedAccumulatorsForApprovableTypes" = ( PurchaseOrder );
                    "CorrectAmountInvoicedAccumulatorsFromDate" = "";
                    "CorrectAmountInvoicedAccumulatorsPreviewMode" = true;
                    "CorrectAmountInvoicedAccumulatorsReconcile" = false;
                    CorrectAmountInvoicedAccumulatorsToDate = "";
                    CorrectAmountInvoicedAccumulatorsToUsers = "";
                    "DefaultANInvoiceToFirstRemittanceLocationAddress" = false;
                    DefaultLineItemCommodityCode = "";
                    DefaultRequesterFromOrderAndValidate = true;
                    DisallowDispute = false;
                    EnableEnhancedManualMatch = true;
                    ExcludeExceptionTypesForGRBasedInvoices = ( POReceivedQuantityVariance, POCatalogPriceVariance );
                    "ExportPositiveAndNegativeLineAmountInvoices" = true;
                    ExternalReconciliationEnabled = true;
                    InvoiceEntryAllowEditLineDescription = false;
                    InvoiceEntryUseUpperCaseOnly = false;
                    InvoiceLineEditBatchPagination = 150;
                    MaxInvoiceAttachmentPagesToPNG = 15;
                    PayablePushEvent = PaymentRealTimeExport;
                    RestrictDeletionOfInvoiceAttachments = false;
                    SendIRToAN = false;
                    ShowAccountingForTaxLineItems = true;
                    "ShowInvoiceAndPaymentsToRequisitionCreator" = false;
                    ShowOldInvoiceUIDeprecationMessage = true;
                    ShowPaymentsToInvoiceCreator = false;
                    SkipLineCreditMemoExceptions = true;
                    UseEnhancedInvoice = false;
                    UseInvoiceERPIntegration = true;
                    ValidateRemittanceLocation = true;
                    ViewableInvoiceAttachmentExtensions = ( pdf, png, jpeg, jpg, jpe, jfif, gif, tiff );
                };
                MasterData = {
                    AddNGramFieldFor = ( );
                    AppSpecificAddOns = { SAPECC = { AMLFiles = ( );};};
                    Modifications = {
                        Common = {
                            AMLFiles = (
                                "etc/integration/Common/CommonIntegrationAddOn.aml"
                            );
                        };
                        SAPECC = { AMLFiles = ( );};
                    };
                    PreprocessRelations = {};
                    PrimaryKeys = {};
                    SoftDeleteTypeNames = ( );
                };
                MasterDataSearch = {
                    SupportedClassList = (
                        ariba.core.WBSElement,
                        ariba.common.core.Supplier,
                        ariba.common.core.PreferredSupplierMap
                    );
                };
                Messaging = {
                    MessageConfigurationFiles = {
                        CXML = {
                            pgeneric = (
                                "./config/variants/vgeneric/partitions/pgeneric/cxml/MessageConfiguration.table"
                            );
                        };
                        File = {
                            pgeneric = (
                                "./config/variants/vgeneric/partitions/pgeneric/file/MessageConfiguration.table"
                            );
                        };
                        HTTP = {
                            pgeneric = (
                                "config/variants/vgeneric/partitions/pgeneric/http/MessageConfiguration.table"
                            );
                        };
                        WS = {
                            pgeneric = (
                                "./config/variants/vgeneric/partitions/pgeneric/ws/MessageConfiguration.table"
                            );
                        };
                        WSEnum = {
                            pgeneric = (
                                "./config/variants/vgeneric/partitions/pgeneric/ws/enum_MessageConfiguration.table"
                            );
                        };
                    };
                    MessageDefinitionFiles = {
                        vgeneric = (
                            "./ariba/variants/vgeneric/messages/MessageDefinition.table",
                            "./config/variants/vgeneric/messages/MessageDefinition.table"
                        );
                    };
                };
                Procure = {
                    ASNOrderForPrivateSupplier = true;
                    AddOCReviewInToDoListOfUserGroups = ( );
                    AllowAttributeSearching = false;
                    AllowChangeRequisition = true;
                    "AllowSupplierPunchInUsersToViewContractDetails" = true;
                    AssetDataByCommodityCodeFile = "./config/variants/vgeneric/partitions/pgeneric/data/AssetDataByCommodityCode.csv";
                    AssetDataMethod = ariba.receiving.NoAssetDataRule;
                    BlanketOrderMethods = ( "ariba.purchasing.ordering.SSPAllDirectOrder" );
                    CXMLDecodeOrganizationUnitFieldPath = LineItemCollection.ProcurementUnit;
                    CustomCatalogImplementation = "ariba.procure.server.GenericCustomCatalog";
                    CustomPurchaseOrgImplementation = "";
                    DecimalMaxDigits = 5;
                    DefaultUnitOfMeasure = EA;
                    ERPAmountPrecision = 4;
                    ERSParamHandlerClass = ariba.procure.core.ERSParameterHandler;
                    ExternalReqSource = {
                        ExternalEndPointMethod = "";
                        ExternalEndPointNameSpaceURL = "";
                        ExternalEndPointPassword = "";
                        ExternalEndPointURL = "";
                        ExternalEndPointUsername = "";
                        ExternalSourceURL = "";
                        ProxyHostForExternalService = "";
                        ProxyPortForExternalService = "";
                        RouteCopyInvoicesToERP = false;
                        ServiceProviderIdKey = SPID;
                        ServiceProviderIdValue = "";
                    };
                    ItemCategoryOnRequisitionHandlerClass = "ariba.procure.core.ItemCategoryOnServiceLineParameterHandler";
                    OrderMethods = (
                        "ariba.purchasing.ordering.AribaNetworkDummyOrder",
                        ariba.pcard.ordering.AribaSSPGhostPCard,
                        ariba.pcard.ordering.AribaSSPPCard,
                        "ariba.purchasing.ordering.SSPAribaNetworkSpotBuyOrder",
                        "ariba.purchasing.ordering.SSPAllDirectOrder",
                        ariba.purchasing.ordering.GenericPOERP,
                        ariba.purchasing.ordering.GenericPOERPCC
                    );
                    "OrderReceivedForInvoicingOnReceiptApproval" = false;
                    OrganicGrowth = {
                        DescriptionFields = {
                            ariba.common.core.ProcurementUnit = Description;
                            ariba.core.Account = AccountDescription;
                            ariba.core.Company = Description;
                            ariba.core.CostCenter = Description;
                            ariba.core.Product = Description;
                            ariba.core.Project = Description;
                            ariba.core.SubAccount = Description;
                        };
                    };
                    OverReceivingOperator = OR;
                    OverReceivingPercentage = 10;
                    OverReceivingQuantity = 0;
                    OverReceivingValue = 0;
                    PCardReceivingTypeMethod = "ariba.pcard.receiving.PCardReceivingTypeRule";
                    Print = { PPTFilter = ariba.generic.common.PPTSGFilter;};
                    PurchaseOrderCancelEvent = PurchaseOrderCancelRealTimeExport;
                    PurchaseOrderChangeEvent = PurchaseOrderChangeRealTimeExport;
                    PurchaseOrderCloseEvent = PurchaseOrderCloseStatusRealTimeExport;
                    PurchaseOrderEvent = PurchaseOrderRealTimeExport;
                    ReceiptDataByPartitionedCommodityCode = false;
                    ReceiptEvent = ReceiptRealTimeExport;
                    ReceiptSendMethod = GenericReceipt;
                    ReceiptTrackerMethod = ariba.receiving.NoReceiptTrackerRule;
                    ReceivingTypeMethod = ariba.receiving.ReceivingTypeRule;
                    ShowcXMLAccountingFields = true;
                    SubmitSupplierLocationValidator = "ariba.procure.core.validator.SupplierLocationValidator";
                    TaxSourceRetrieverClass = "ariba.procure.core.TaxSourceRetrieverImpl";
                    TransactionPush = {
                        AdvancedShipNotice = {
                            Enabled = false;
                            Event = PurchaseOrderSSPush;
                            Statuses = "Added,Updated,Deleted";
                        };
                        PurchaseOrder = {
                            ChangeInFields = "";
                            CopyOrderExportEnabled = false;
                            Enabled = false;
                            Event = PurchaseOrderSSPush;
                            Statuses = "Ordering,Ordered,Canceling,Canceled";
                        };
                        Receipt = {
                            CopyReceiptExportEnabled = false;
                            Enabled = false;
                            Event = ReceiptSSPush;
                            Statuses = Approved;
                        };
                    };
                    UnderReceivingOperator = AND;
                    UnderReceivingPercentage = 0;
                    UnderReceivingQuantity = 0;
                    UnderReceivingValue = 0;
                    UseCancelOrderIntegration = false;
                    UseChangeOrderIntegration = true;
                    UseLineItemUnitPriceToSelectCEME = false;
                    UsePOLineNumberForExternalIntegration = true;
                    UseReceiptIntegration = true;
                    UseReqOrPOIntegration = true;
                    WholeNumberMaxDigits = -1;
                };
                Purchasing = {
                    "AccountingImportEventsWithUniqueNameValidation" = (
                        CostCenterPull,
                        AccountingCombinationPull,
                        BusinessUnitPull,
                        SubAccountPull,
                        RegionPull,
                        ProjectPull,
                        ProductPull
                    );
                    AutoAggregateHeldLines = { ForceInvocationMode = false; Schedule = "";};
                    POCloseErrorLineNumberField = ErrorLineNumber;
                    SendNotificationForPendingHeldLines = { PendingForDays = 30; Schedule = "";};
                };
                Receiving = {
                    ERPReceiptLineNumberFieldName = "";
                    EnableProcessPendingReceipts = false;
                    ReceiptImportLineItemKeys = ( "NumberInCollection,NumberInCollection" );
                    ReceiptImportReceivableKey = "PurchaseOrder,UniqueName,ReceivableID";
                    StagedReceiptPushEvent = StagedReceiptPush;
                };
                Reports = {
                    EnableEuroDualCurrencyDisplay = false;
                    ReportsTotalCurrency = "";
                };
                Settlement = {
                    DynamicDiscountsEnabled = false;
                    LocalPaymentModelSupported = false;
                    PaymentAmountField = AdjustedTotalCostInERPPrecision;
                    PaymentDiscountSelectionPolicy = TakeDiscountMaximum;
                    PaymentDiscountSelector = "ariba.payment.AribaPaymentDiscountSelector";
                    PaymentRequestSendMethods = "MessagingQueue:AribaNetwork";
                    PaymentScheduler = ariba.payment.AribaPaymentScheduler;
                    PaymentTermsEffectiveDateSkipDays = 0;
                    PaymentTermsLineTypeCategories = ( 1 );
                    PaymentTransactionSendMethods = AribaNetwork;
                    TransactionPush = {
                        AdvancePayment = {
                            Enabled = true;
                            Event = AdvancePaymentSSPush;
                            Statuses = "Approved,Canceling";
                        };
                    };
                    "UpdatePaymentDueDatesToSkipWeekendsAndHolidays" = false;
                };
                UI = { EnableReconciliation = false; PreferredTimezones = ( );};
                Workforce = { LaborComplianceExtensionFile = "/LaborComplianceExt.lcf";};
            };
        };
        ppsoft84ora = {
            Application = {
                Approvable = {
                    ApprovalRequestEscalateWarningPeriod = 0;
                    ApprovalRequestEscalationPeriod = 0;
                    Defaulting = {
                        ProcurementUnit = {
                            ariba.charge.core.Charge = (
                                Order.ProcurementUnit,
                                BusinessUnit.ProcurementUnit,
                                "BusinessUnit.GLBusinessUnit.ProcurementUnit",
                                Requester.PartitionedUser,
                                PCard.ProcurementUnit
                            );
                            ariba.charge.core.ChargeReconciliation = (
                                Order.ProcurementUnit,
                                BusinessUnit.ProcurementUnit,
                                "BusinessUnit.GLBusinessUnit.ProcurementUnit",
                                Requester.PartitionedUser,
                                Charge.ProcurementUnit
                            );
                            ariba.common.core.Accounting = (
                                ProcurementUnit,
                                Department.ProcurementUnit,
                                BusinessUnit.ProcurementUnit,
                                "BusinessUnit.GLBusinessUnit.ProcurementUnit",
                                GLBusinessUnit.ProcurementUnit
                            );
                            ariba.common.core.User = (
                                Accounting.ProcurementUnit,
                                BusinessUnit.ProcurementUnit,
                                "BusinessUnit.GLBusinessUnit.ProcurementUnit",
                                GLBusinessUnit.ProcurementUnit,
                                Accounting.Department.ProcurementUnit
                            );
                            ariba.contract.core.Contract = ( MasterAgreementRequest.ProcurementUnit );
                            ariba.contract.core.ContractRequest = (
                                BusinessUnit.ProcurementUnit,
                                "BusinessUnit.GLBusinessUnit.ProcurementUnit",
                                Requester.PartitionedUser
                            );
                            "ariba.expense.core.ExpenseLineItemCollection" = (
                                GLBusinessUnit.ProcurementUnit,
                                Requester.PartitionedUser
                            );
                            ariba.invoicing.core.Invoice = (
                                Order.ProcurementUnit,
                                MasterAgreement.ProcurementUnit,
                                BusinessUnit.ProcurementUnit,
                                "BusinessUnit.GLBusinessUnit.ProcurementUnit",
                                Requester.PartitionedUser
                            );
                            "ariba.invoicing.core.InvoiceReconciliation" = (
                                BusinessUnit.ProcurementUnit,
                                "BusinessUnit.GLBusinessUnit.ProcurementUnit",
                                Requester.PartitionedUser,
                                Invoice.ProcurementUnit
                            );
                            ariba.payment.core.Payment = ( InvoiceReconciliation.ProcurementUnit );
                            ariba.purchasing.core.CopyOrder = (
                                BusinessUnit.ProcurementUnit,
                                "BusinessUnit.GLBusinessUnit.ProcurementUnit",
                                Requester.PartitionedUser,
                                LineItems.Accountings.SplitAccountings,
                                LineItems.Requester.PartitionedUser
                            );
                            ariba.purchasing.core.Requisition = (
                                BusinessUnit.ProcurementUnit,
                                "BusinessUnit.GLBusinessUnit.ProcurementUnit",
                                Requester.PartitionedUser
                            );
                            ariba.receiving.core.MilestoneTracker = (
                                Order.ProcurementUnit,
                                MasterAgreement.ProcurementUnit,
                                Requester.PartitionedUser.Accounting
                            );
                            ariba.receiving.core.Receipt = (
                                Order.ProcurementUnit,
                                MasterAgreement.ProcurementUnit,
                                Requester.PartitionedUser.Accounting
                            );
                        };
                        SupplierLocation = {
                            ariba.invoicing.core.Invoice = ( );
                            "ariba.invoicing.core.InvoiceReconciliation" = ( );
                        };
                    };
                    EncryptAttachments = true;
                    NotificationConfiguration = "";
                    OrganizationPartitioner = "ariba.common.core.OrganizationalPartitioner";
                    OrganizationPartitioningEnabled = false;
                    OrganizationalVisibilityPartitioning = false;
                    ProcurementUnitPopulate = (
                        ariba.purchasing.core.Requisition,
                        ariba.purchasing.core.PurchaseOrder,
                        ariba.contract.core.ContractRequest,
                        ariba.contract.core.Contract,
                        ariba.receiving.core.MilestoneTracker,
                        ariba.receiving.core.Receipt,
                        ariba.invoicing.core.Invoice,
                        "ariba.invoicing.core.InvoiceReconciliation",
                        ariba.payment.core.Payment,
                        ariba.payment.core.PaymentTransaction,
                        "ariba.expense.core.ExpenseLineItemCollection",
                        "ariba.common.core.punchout.PunchOutLineItemCollection"
                    );
                };
                Base = {
                    Barcode = { AllowHumanReadable = false;};
                    Data = {
                        AribaSystemUser = aribasystem;
                        DefaultBillToAddress = "SHARE:US003";
                        DefaultCurrency = USD;
                    };
                    DefaultLocale = en_US;
                    PreferredEmailFormat = HTML;
                    ScheduledTasksFile = "variants/vpsoft84ora/partitions/ppsoft84ora/ScheduledTasks.table";
                    UseServiceProviderIDForCommonCredential = true;
                };
                Charge = {
                    OverdueChargesWarningPeriod = 7;
                    PaymentRequestSendMethods = PSoftMessagingQueue;
                };
                ClassificationCodes = {
                    ASMSharedDomainList = ( unspsc );
                    CommodityCodeUIDomainImpl = "ariba.basic.core.DefaultCommodityCodeUIDomainImpl";
                    DecoratedDomainLookup = "ariba.peoplesoft.common.PSDecoratedClassificationDomainLookup";
                    SystemAllNodeUniqueName = All;
                    SystemCommodityCodeDomainName = unspsc;
                    UnspscAuditFile = "config/standards/unspscaudit135.csv";
                };
                Common = { ValidateAddress = false;};
                Contract = {
                    MasterAgreement = {
                        ASNBPOForPrivateSupplier = true;
                        AllowChange = true;
                        AllowCollaborativeInvoicing = false;
                        AlwaysRegenerateApprovalGraph = false;
                        ApplySupAndCommTermsToNonCatalogItems = true;
                        ContractSendMethodName = URL;
                        CreateSubscriptionForNonCatalogItems = true;
                        CumulativePricingState = Ordered;
                        EnableAutoSelect = true;
                        MAReceivingTypeMethod = "ariba.contract.receiving.ContractReceivingTypeRule";
                        ProcessPeriodInDays = 1;
                        ReleaseAvailableBalanceState = Ordered;
                        UseMasterAgreementIdForPurchaseOrderId = true;
                        WaitForMASubscriptionLoad = true;
                    };
                };
                ElectronicOrder = {
                    Defaults = {
                        ElectronicOrderPasswordAdapter = PasswordAdapter1;
                        "ElectronicOrderPreparerForIntegrationLoad" = dmarino;
                        "ElectronicOrderRequesterForIntegrationLoad" = dmarino;
                    };
                    ElectronicOrderExtensionHook = "";
                };
                Expense = {
                    AdjustPermissionStyle = AdjustExpenseReportNotAllowed;
                    ChargeItemsRequireReceipts = false;
                    DefaultExpenseType = Airfare;
                    EnableFixErrorsViolations = true;
                    EnableTravelAuthorization = true;
                    ExpenseExcelTemplate = "./config/variants/vpsoft84ora/partitions/ppsoft84ora/data/ExpenseTemplate.xls";
                    ExpenseGuidelinesTable = "./config/variants/vpsoft84ora/partitions/ppsoft84ora/data/ExpenseGuidelines.table";
                    ExpenseSendMethod = MessagingQueue;
                    ExpenseTypesNotBillable = ( Personal, HealthClub );
                    ExpenseTypesRequireItemization = ( Hotel );
                    ExpenseWithoutReceiptImageNotifyPeriod = 1;
                    ExpenseWithoutReceiptNotifyPeriod = 14;
                    ForceFullChargeItemization = false;
                    GiftAndEntertainmentPolicyURL = "";
                    HotelWizardExpenseTypes = (
                        Breakfast,
                        Lunch,
                        Dinner,
                        Parking,
                        Telephone,
                        Tips,
                        Laundry
                    );
                    Imaging = {
                        AllApproversViewReceipts = true;
                        AllowedReceiptsExtensions = ( tif, pdf, jpeg, jpg, bmp, gif );
                        EnableManualUpload = false;
                        Enabled = false;
                        ImagingProviderImplementorClass = "";
                        ReceiptImagingConfig = GLBusinessUnit;
                    };
                    ItemizeExpenseTypes = ( Hotel );
                    NotifyExpenseReceiptManagers = true;
                    PassAuditRequiredBeforeProcessing = false;
                    "PrepopulateExpenseFromTravelAuthorization" = true;
                    ShowExpenseReportsForMaxDays = 30;
                    ShowGroupByExpenseTypeInCart = false;
                    ShowMyTripsForMaxDays = 30;
                    ShowViolationForUnreconciledCharge = true;
                    Tax = {
                        CountriesRequireState = ( CA );
                        Enabled = true;
                        ExpenseTaxCodeBasedTaxServiceProvider = {
                            LegalEntityPath = LineItemCollection.GLBusinessUnit;
                        };
                        UseGrossAmounts = true;
                        UseVATDefaults = false;
                    };
                    TravelBookingProvider = {
                        AllowCancel = true;
                        AllowChange = true;
                        CustomerIdentity = "";
                        Domain = bogus-duns;
                        Identity = 165603902;
                        PunchOutURL = "http://localhost:7778/ExpensePunchoutTest/aribaLiveSetup.htm";
                        SendMethods = {
                            URL = {
                                Formatter = ariba.expense.ordering.TAOOrderFormatter;
                                Sender = ariba.expense.ordering.TAOOrderSender;
                            };
                        };
                    };
                    UseBaseHotelRateForLimit = true;
                    UseTravelAuthorization = true;
                };
                Invoicing = {
                    AllowAdhocExternalShipToAddress = true;
                    AllowInvoiceAttachmentMetadataToERP = false;
                    AllowInvoiceAttachmentsToERP = false;
                    AllowReusingInvoiceNumber = ( );
                    "AlwaysDisplayRejectButtonForIRsInApproving" = false;
                    "CorrectAmountInvoicedAccumulatorsForApprovable" = "";
                    "CorrectAmountInvoicedAccumulatorsForApprovableTypes" = ( PurchaseOrder );
                    "CorrectAmountInvoicedAccumulatorsFromDate" = "";
                    "CorrectAmountInvoicedAccumulatorsPreviewMode" = true;
                    "CorrectAmountInvoicedAccumulatorsReconcile" = false;
                    CorrectAmountInvoicedAccumulatorsToDate = "";
                    CorrectAmountInvoicedAccumulatorsToUsers = "";
                    "DefaultANInvoiceToFirstRemittanceLocationAddress" = false;
                    DefaultLineItemCommodityCode = "";
                    DefaultRequesterFromOrderAndValidate = true;
                    DisallowDispute = false;
                    EnableEnhancedManualMatch = true;
                    ExcludeExceptionTypesForGRBasedInvoices = ( POReceivedQuantityVariance, POCatalogPriceVariance );
                    "ExportPositiveAndNegativeLineAmountInvoices" = true;
                    ExternalReconciliationEnabled = true;
                    InvoiceEntryAllowEditLineDescription = false;
                    InvoiceEntryUseUpperCaseOnly = false;
                    InvoiceLineEditBatchPagination = 150;
                    MaxInvoiceAttachmentPagesToPNG = 15;
                    PayablePushEvent = PaymentRealTimeExport;
                    RestrictDeletionOfInvoiceAttachments = false;
                    SendIRToAN = false;
                    ShowAccountingForTaxLineItems = true;
                    "ShowInvoiceAndPaymentsToRequisitionCreator" = false;
                    ShowOldInvoiceUIDeprecationMessage = true;
                    ShowPaymentsToInvoiceCreator = false;
                    SkipLineCreditMemoExceptions = true;
                    UseEnhancedInvoice = false;
                    UseInvoiceERPIntegration = true;
                    ValidateRemittanceLocation = true;
                    ViewableInvoiceAttachmentExtensions = ( pdf, png, jpeg, jpg, jpe, jfif, gif, tiff );
                };
                MasterData = {
                    AddNGramFieldFor = ( );
                    AppSpecificAddOns = { SAPECC = { AMLFiles = ( );};};
                    Modifications = {
                        Common = {
                            AMLFiles = (
                                "etc/integration/Common/CommonIntegrationAddOn.aml"
                            );
                        };
                        SAPECC = { AMLFiles = ( );};
                    };
                    PreprocessRelations = {};
                    PrimaryKeys = {};
                    SoftDeleteTypeNames = ( );
                };
                MasterDataSearch = {
                    SupportedClassList = (
                        ariba.core.WBSElement,
                        ariba.common.core.Supplier,
                        ariba.common.core.PreferredSupplierMap
                    );
                };
                Messaging = {
                    MessageConfigurationFiles = {
                        CXML = {
                            ppsoft84ora = (
                                "./config/variants/vpsoft84ora/partitions/ppsoft84ora/cxml/MessageConfiguration.table"
                            );
                        };
                        File = {
                            ppsoft84ora = (
                                "./config/variants/vpsoft84ora/partitions/ppsoft84ora/file/MessageConfiguration.table"
                            );
                        };
                        HTTP = {
                            ppsoft84ora = (
                                "config/variants/vpsoft84ora/partitions/ppsoft84ora/http/MessageConfiguration.table"
                            );
                        };
                        WS = {
                            ppsoft84ora = (
                                "./config/variants/vpsoft84ora/partitions/ppsoft84ora/ws/MessageConfiguration.table"
                            );
                        };
                    };
                    MessageDefinitionFiles = {
                        vpsoft84ora = (
                            "./ariba/variants/vpsoft84ora/messages/MessageDefinition.table",
                            "./config/variants/vpsoft84ora/messages/MessageDefinition.table"
                        );
                    };
                };
                Procure = {
                    ASNOrderForPrivateSupplier = true;
                    AddOCReviewInToDoListOfUserGroups = ( );
                    AllowAttributeSearching = false;
                    AllowChangeRequisition = true;
                    "AllowSupplierPunchInUsersToViewContractDetails" = true;
                    AssetDataByCommodityCodeFile = "./config/variants/vpsoft84ora/partitions/ppsoft84ora/data/AssetDataByCommodityCode.csv";
                    AssetDataMethod = ariba.receiving.NoAssetDataRule;
                    BlanketOrderMethods = ( "ariba.purchasing.ordering.SSPAllDirectOrder" );
                    CXMLDecodeOrganizationUnitFieldPath = LineItemCollection.BusinessUnit;
                    CustomCatalogCSVFile = "./config/variants/vpsoft84ora/partitions/ppsoft84ora/data/CustomCatalog.csv";
                    CustomCatalogImplementation = ariba.procure.server.PSoftCustomCatalog;
                    CustomPurchaseOrgImplementation = "";
                    DecimalMaxDigits = 4;
                    DefaultPaymentTerms = 00;
                    DefaultUnitOfMeasure = EA;
                    ERPAmountPrecision = 3;
                    ERSParamHandlerClass = ariba.procure.core.ERSParameterHandler;
                    ExternalReqSource = {
                        ExternalEndPointMethod = "";
                        ExternalEndPointNameSpaceURL = "";
                        ExternalEndPointPassword = "";
                        ExternalEndPointURL = "";
                        ExternalEndPointUsername = "";
                        ExternalSourceURL = "";
                        ProxyHostForExternalService = "";
                        ProxyPortForExternalService = "";
                        RouteCopyInvoicesToERP = false;
                        ServiceProviderIdKey = SPID;
                        ServiceProviderIdValue = "";
                    };
                    ItemCategoryOnRequisitionHandlerClass = "ariba.procure.core.ItemCategoryOnServiceLineParameterHandler";
                    OrderMethods = (
                        "ariba.purchasing.ordering.AribaNetworkDummyOrder",
                        ariba.pcard.ordering.AribaSSPGhostPCard,
                        ariba.pcard.ordering.AribaSSPPCard,
                        "ariba.purchasing.ordering.SSPAribaNetworkSpotBuyOrder",
                        "ariba.purchasing.ordering.SSPAllDirectOrder",
                        ariba.peoplesoft.server.PSPOERPCC,
                        ariba.peoplesoft.server.PSPOERP
                    );
                    "OrderReceivedForInvoicingOnReceiptApproval" = false;
                    OrganicGrowth = {
                        DescriptionFields = {
                            ariba.common.core.ProcurementUnit = Description;
                            ariba.core.Account = AccountDescription;
                            ariba.core.Department = Description;
                            ariba.core.GLBusinessUnit = Description;
                            ariba.core.Product = Description;
                            ariba.core.Project = Description;
                            ariba.core.StatisticsCode = Description;
                        };
                    };
                    OverReceivingOperator = OR;
                    OverReceivingPercentage = 10;
                    OverReceivingQuantity = 0;
                    OverReceivingValue = 0;
                    PCardReceivingTypeMethod = "ariba.pcard.receiving.PCardReceivingTypeRule";
                    PurchaseOrderCancelEvent = PurchaseOrderCancelRealTimeExport;
                    PurchaseOrderChangeEvent = PurchaseOrderChangeRealTimeExport;
                    PurchaseOrderCloseEvent = PurchaseOrderCloseStatusRealTimeExport;
                    PurchaseOrderErrorPullEvent = "";
                    PurchaseOrderEvent = PurchaseOrderRealTimeExport;
                    PurchaseOrderPullEvent = "";
                    ReceiptDataByPartitionedCommodityCode = false;
                    ReceiptEvent = ReceiptRealTimeExport;
                    ReceiptSendMethod = PSReceipt;
                    ReceiptTrackerMethod = ariba.receiving.NoReceiptTrackerRule;
                    ReceivingTypeMethod = ariba.receiving.ReceivingTypeRule;
                    ShowcXMLAccountingFields = true;
                    SubmitSupplierLocationValidator = "ariba.procure.core.validator.SupplierLocationValidator";
                    TaxSourceRetrieverClass = "ariba.peoplesoft.common.TaxSourceRetrieverImpl";
                    TransactionPush = {
                        AdvancedShipNotice = {
                            Enabled = false;
                            Event = PurchaseOrderSSPush;
                            Statuses = "Added,Updated,Deleted";
                        };
                        PurchaseOrder = {
                            ChangeInFields = "";
                            CopyOrderExportEnabled = false;
                            Enabled = false;
                            Event = PurchaseOrderSSPush;
                            Statuses = "Ordering,Ordered,Canceling,Canceled";
                        };
                        Receipt = {
                            CopyReceiptExportEnabled = false;
                            Enabled = false;
                            Event = ReceiptSSPush;
                            Statuses = Approved;
                        };
                    };
                    UnderReceivingOperator = AND;
                    UnderReceivingPercentage = 0;
                    UnderReceivingQuantity = 0;
                    UnderReceivingValue = 0;
                    UseCancelOrderIntegration = true;
                    UseChangeOrderIntegration = true;
                    UseLineItemUnitPriceToSelectCEME = false;
                    UsePOLineNumberForExternalIntegration = true;
                    UseReceiptIntegration = true;
                    UseReqOrPOIntegration = true;
                    WholeNumberMaxDigits = 11;
                };
                Purchasing = {
                    "AccountingImportEventsWithUniqueNameValidation" = (
                        BusinessUnitPull,
                        GLBusinessUnitPull,
                        StatisticsPull,
                        ProjectPull,
                        ProductPull,
                        DepartmentPull
                    );
                    AutoAggregateHeldLines = { ForceInvocationMode = false; Schedule = "";};
                    POCloseErrorLineNumberField = PSLineNbr;
                    SendNotificationForPendingHeldLines = { PendingForDays = 30; Schedule = "";};
                };
                Receiving = {
                    ERPReceiptLineNumberFieldName = "";
                    EnableProcessPendingReceipts = false;
                    ReceiptImportLineItemKeys = ( "NumberInCollection,NumberInCollection" );
                    ReceiptImportReceivableKey = "PurchaseOrder,UniqueName,ReceivableID";
                    StagedReceiptPushEvent = StagedReceiptPush;
                };
                Reports = {
                    EnableEuroDualCurrencyDisplay = false;
                    ReportsTotalCurrency = "";
                };
                Settlement = {
                    DynamicDiscountsEnabled = false;
                    LocalPaymentModelSupported = false;
                    PaymentAmountField = AdjustedTotalCostInERPPrecision;
                    PaymentDiscountSelectionPolicy = TakeDiscountMaximum;
                    PaymentDiscountSelector = "ariba.payment.AribaPaymentDiscountSelector";
                    PaymentRequestSendMethods = "PSoftMessagingQueue:AribaNetwork";
                    PaymentScheduler = ariba.payment.AribaPaymentScheduler;
                    PaymentTermsEffectiveDateSkipDays = 0;
                    PaymentTermsLineTypeCategories = ( 1 );
                    PaymentTransactionSendMethods = AribaNetwork;
                    TransactionPush = {
                        AdvancePayment = {
                            Enabled = true;
                            Event = AdvancePaymentSSPush;
                            Statuses = "Approved,Canceling";
                        };
                    };
                    "UpdatePaymentDueDatesToSkipWeekendsAndHolidays" = false;
                };
                UI = { EnableReconciliation = false; PreferredTimezones = ( );};
                Workforce = { LaborComplianceExtensionFile = "/LaborComplianceExt.lcf";};
            };
        };
        psap = {
            Application = {
                Approvable = {
                    ApprovalRequestEscalateWarningPeriod = 0;
                    ApprovalRequestEscalationPeriod = 0;
                    Defaulting = {
                        ProcurementUnit = {
                            ariba.charge.core.Charge = (
                                Order.ProcurementUnit,
                                PurchaseOrg.ProcurementUnit,
                                PurchaseOrg.CompanyCode.ProcurementUnit,
                                CompanyCode.ProcurementUnit,
                                Requester.PartitionedUser,
                                PCard.ProcurementUnit
                            );
                            ariba.charge.core.ChargeReconciliation = (
                                Order.ProcurementUnit,
                                PurchaseOrg.ProcurementUnit,
                                PurchaseOrg.CompanyCode.ProcurementUnit,
                                CompanyCode.ProcurementUnit,
                                Requester.PartitionedUser,
                                Charge.ProcurementUnit
                            );
                            ariba.common.core.Accounting = (
                                ProcurementUnit,
                                CostCenter.ProcurementUnit,
                                CostCenter.CompanyCode.ProcurementUnit
                            );
                            ariba.common.core.User = (
                                Accounting.ProcurementUnit,
                                PurchaseGroup.ProcurementUnit,
                                PurchaseOrg.ProcurementUnit,
                                PurchaseOrg.CompanyCode.ProcurementUnit,
                                CompanyCode.ProcurementUnit,
                                Accounting.CostCenter.ProcurementUnit
                            );
                            ariba.common.core.UserProfile = (
                                User.Accounting.ProcurementUnit,
                                Details.CompanyCode.ProcurementUnit
                            );
                            ariba.contract.core.Contract = ( MasterAgreementRequest.ProcurementUnit );
                            ariba.contract.core.ContractRequest = (
                                PurchaseOrg.ProcurementUnit,
                                PurchaseOrg.CompanyCode.ProcurementUnit,
                                CompanyCode.ProcurementUnit,
                                Requester.PartitionedUser
                            );
                            "ariba.expense.core.ExpenseLineItemCollection" = (
                                CompanyCode.ProcurementUnit,
                                Requester.PartitionedUser
                            );
                            ariba.invoicing.core.Invoice = (
                                Order.ProcurementUnit,
                                MasterAgreement.ProcurementUnit,
                                PurchaseOrg.ProcurementUnit,
                                PurchaseOrg.CompanyCode.ProcurementUnit,
                                CompanyCode.ProcurementUnit,
                                Requester.PartitionedUser
                            );
                            "ariba.invoicing.core.InvoiceReconciliation" = (
                                PurchaseOrg.ProcurementUnit,
                                PurchaseOrg.CompanyCode.ProcurementUnit,
                                CompanyCode.ProcurementUnit,
                                Requester.PartitionedUser,
                                Invoice.ProcurementUnit
                            );
                            ariba.payment.core.Payment = ( InvoiceReconciliation.ProcurementUnit );
                            ariba.purchasing.core.CopyOrder = (
                                CompanyCode.ProcurementUnit,
                                Requester.PartitionedUser,
                                LineItems.Accountings.SplitAccountings,
                                LineItems.Requester.PartitionedUser
                            );
                            ariba.purchasing.core.Requisition = (
                                CompanyCode.ProcurementUnit,
                                Requester.PartitionedUser
                            );
                            ariba.receiving.core.MilestoneTracker = (
                                Order.ProcurementUnit,
                                MasterAgreement.ProcurementUnit,
                                Requester.PartitionedUser.Accounting
                            );
                            ariba.receiving.core.Receipt = (
                                Order.ProcurementUnit,
                                MasterAgreement.ProcurementUnit,
                                Requester.PartitionedUser.Accounting
                            );
                        };
                        SupplierLocation = {
                            ariba.invoicing.core.Invoice = ( );
                            "ariba.invoicing.core.InvoiceReconciliation" = ( );
                        };
                    };
                    EncryptAttachments = true;
                    NotificationConfiguration = "";
                    OrganizationPartitioner = "ariba.common.core.OrganizationalPartitioner";
                    OrganizationPartitioningEnabled = false;
                    OrganizationalVisibilityPartitioning = false;
                    ProcurementUnitPopulate = (
                        ariba.purchasing.core.Requisition,
                        ariba.purchasing.core.PurchaseOrder,
                        ariba.contract.core.ContractRequest,
                        ariba.contract.core.Contract,
                        ariba.receiving.core.MilestoneTracker,
                        ariba.receiving.core.Receipt,
                        ariba.invoicing.core.Invoice,
                        "ariba.invoicing.core.InvoiceReconciliation",
                        ariba.payment.core.Payment,
                        ariba.payment.core.PaymentTransaction,
                        "ariba.expense.core.ExpenseLineItemCollection",
                        "ariba.common.core.punchout.PunchOutLineItemCollection"
                    );
                };
                Base = {
                    Barcode = { AllowHumanReadable = false;};
                    Data = {
                        AribaSystemUser = aribasystem;
                        DefaultBillToAddress = 3000;
                        DefaultCurrency = USD;
                    };
                    DefaultLocale = en_US;
                    PreferredEmailFormat = HTML;
                    ScheduledTasksFile = "variants/vsap/partitions/psap/ScheduledTasks.table";
                    UseServiceProviderIDForCommonCredential = true;
                };
                Charge = {
                    OverdueChargesWarningPeriod = 7;
                    PaymentRequestSendMethods = SAPMessagingQueue;
                };
                ClassificationCodes = {
                    ASMSharedDomainList = ( unspsc );
                    CommodityCodeUIDomainImpl = "ariba.basic.core.DefaultCommodityCodeUIDomainImpl";
                    DecoratedDomainLookup = "ariba.purchasing.core.DecoratedClassificationDomainLookup";
                    SystemAllNodeUniqueName = All;
                    SystemCommodityCodeDomainName = unspsc;
                    UnspscAuditFile = "config/standards/unspscaudit135.csv";
                };
                Common = { SM = { Enabled = true;}; ValidateAddress = false;};
                Contract = {
                    MasterAgreement = {
                        ASNBPOForPrivateSupplier = true;
                        AllowChange = true;
                        AllowCollaborativeInvoicing = false;
                        AlwaysRegenerateApprovalGraph = false;
                        ApplySupAndCommTermsToNonCatalogItems = true;
                        ContractSendMethodName = URL;
                        CreateSubscriptionForNonCatalogItems = true;
                        CumulativePricingState = Ordered;
                        CustomMasterAgreementImplementation = ariba.contract.SAPCustomContract;
                        EnableAutoSelect = true;
                        MAReceivingTypeMethod = "ariba.contract.receiving.ContractReceivingTypeRule";
                        ProcessPeriodInDays = 1;
                        ReleaseAvailableBalanceState = Ordered;
                        UseMasterAgreementIdForPurchaseOrderId = true;
                        WaitForMASubscriptionLoad = true;
                    };
                };
                ElectronicOrder = {
                    Defaults = {
                        ElectronicOrderPasswordAdapter = PasswordAdapter1;
                        "ElectronicOrderPreparerForIntegrationLoad" = dmarino;
                        "ElectronicOrderRequesterForIntegrationLoad" = dmarino;
                    };
                    ElectronicOrderExtensionHook = "";
                };
                Expense = {
                    AdjustPermissionStyle = AdjustExpenseReportNotAllowed;
                    ChargeItemsRequireReceipts = false;
                    DefaultExpenseType = Airfare;
                    EnableFixErrorsViolations = true;
                    EnableTravelAuthorization = true;
                    ExpenseExcelTemplate = "./config/variants/vsap/partitions/psap/data/ExpenseTemplate.xls";
                    ExpenseGuidelinesTable = "./config/variants/vsap/partitions/psap/data/ExpenseGuidelines.table";
                    ExpenseSendMethod = MessagingQueue;
                    ExpenseTypesNotBillable = ( Personal, HealthClub );
                    ExpenseTypesRequireItemization = ( Hotel );
                    ExpenseWithoutReceiptImageNotifyPeriod = 1;
                    ExpenseWithoutReceiptNotifyPeriod = 14;
                    ForceFullChargeItemization = false;
                    GiftAndEntertainmentPolicyURL = "";
                    HotelWizardExpenseTypes = (
                        Breakfast,
                        Lunch,
                        Dinner,
                        Parking,
                        Telephone,
                        Tips,
                        Laundry
                    );
                    Imaging = {
                        AllApproversViewReceipts = true;
                        AllowedReceiptsExtensions = ( tif, pdf, jpeg, jpg, bmp, gif );
                        EnableManualUpload = false;
                        Enabled = false;
                        ImagingProviderImplementorClass = "";
                        ReceiptImagingConfig = CompanyCode;
                    };
                    ItemizeExpenseTypes = ( Hotel );
                    NotifyExpenseReceiptManagers = true;
                    PassAuditRequiredBeforeProcessing = false;
                    "PrepopulateExpenseFromTravelAuthorization" = true;
                    ShowExpenseReportsForMaxDays = 30;
                    ShowGroupByExpenseTypeInCart = false;
                    ShowMyTripsForMaxDays = 30;
                    ShowViolationForUnreconciledCharge = true;
                    Tax = {
                        CountriesRequireState = ( CA );
                        Enabled = true;
                        UseGrossAmounts = true;
                        UseVATDefaults = false;
                    };
                    TravelBookingProvider = {
                        AllowCancel = true;
                        AllowChange = true;
                        CustomerIdentity = "";
                        Domain = bogus-duns;
                        Identity = 165603902;
                        PunchOutURL = "http://localhost:7778/ExpensePunchoutTest/aribaLiveSetup.htm";
                        SendMethods = {
                            URL = {
                                Formatter = ariba.expense.ordering.TAOOrderFormatter;
                                Sender = ariba.expense.ordering.TAOOrderSender;
                            };
                        };
                    };
                    UseBaseHotelRateForLimit = true;
                    UseTravelAuthorization = true;
                };
                Invoicing = {
                    AdvancePaymentAsyncEvent = AdvancePaymentAsyncExport;
                    AllowAdhocExternalShipToAddress = false;
                    AllowInvoiceAttachmentMetadataToERP = false;
                    AllowInvoiceAttachmentsToERP = false;
                    AllowLegalEntityCodeAtSplitLevel = false;
                    AllowReusingInvoiceNumber = ( );
                    "AlwaysDisplayRejectButtonForIRsInApproving" = false;
                    CancelAdvancePaymentAsyncExportEvent = CancelAdvancePaymentAsyncExport;
                    "CorrectAmountInvoicedAccumulatorsForApprovable" = "";
                    "CorrectAmountInvoicedAccumulatorsForApprovableTypes" = ( PurchaseOrder );
                    "CorrectAmountInvoicedAccumulatorsFromDate" = "";
                    "CorrectAmountInvoicedAccumulatorsPreviewMode" = true;
                    "CorrectAmountInvoicedAccumulatorsReconcile" = false;
                    CorrectAmountInvoicedAccumulatorsToDate = "";
                    CorrectAmountInvoicedAccumulatorsToUsers = "";
                    "DefaultANInvoiceToFirstRemittanceLocationAddress" = false;
                    DefaultLineItemCommodityCode = "";
                    DefaultRequesterFromOrderAndValidate = true;
                    DefaultSAPAccountCategory = K;
                    DisallowDispute = false;
                    EnableEnhancedManualMatch = true;
                    ExcludeExceptionTypesForGRBasedInvoices = ( POReceivedQuantityVariance, POCatalogPriceVariance );
                    "ExportPositiveAndNegativeLineAmountInvoices" = false;
                    ExternalReconciliationEnabled = true;
                    FixSplitLevelLegalEntity = false;
                    InvoiceEntryAllowEditLineDescription = false;
                    InvoiceEntryUseUpperCaseOnly = false;
                    InvoiceLineEditBatchPagination = 150;
                    MaxInvoiceAttachmentPagesToPNG = 15;
                    PayablePushEvent = PaymentRealTimeExport;
                    PaymentAsyncEvent = PaymentAsyncExport;
                    RestrictDeletionOfInvoiceAttachments = false;
                    SendIRToAN = false;
                    ShowAccountingForTaxLineItems = true;
                    "ShowInvoiceAndPaymentsToRequisitionCreator" = false;
                    ShowOldInvoiceUIDeprecationMessage = true;
                    ShowPaymentsToInvoiceCreator = false;
                    SkipLineCreditMemoExceptions = true;
                    UseEnhancedInvoice = false;
                    UseInvoiceERPIntegration = true;
                    ValidateRemittanceLocation = true;
                    ViewableInvoiceAttachmentExtensions = ( pdf, png, jpeg, jpg, jpe, jfif, gif, tiff );
                    WithholdingTaxesFromRemittanceLocation = {
                        Enabled = true;
                        WithholdingTaxesFromRLGetter = "ariba.sap.common.SAPWithholdingTaxesFromRLGetter";
                    };
                };
                MasterData = {
                    AddNGramFieldFor = ( );
                    AppSpecificAddOns = { SAPECC = { AMLFiles = ( );};};
                    Modifications = {
                        Common = {
                            AMLFiles = (
                                "etc/integration/Common/CommonIntegrationAddOn.aml"
                            );
                        };
                        SAPECC = { AMLFiles = ( );};
                    };
                    PreprocessRelations = {};
                    PrimaryKeys = {};
                    SoftDeleteTypeNames = ( );
                };
                MasterDataSearch = {
                    SupportedClassList = (
                        ariba.core.WBSElement,
                        ariba.common.core.Supplier,
                        ariba.common.core.PreferredSupplierMap
                    );
                };
                Messaging = {
                    MessageConfigurationFiles = {
                        CXML = {
                            psap = (
                                "./config/variants/vsap/partitions/psap/cxml/MessageConfiguration.table"
                            );
                        };
                        File = {
                            psap = (
                                "./config/variants/vsap/partitions/psap/file/MessageConfiguration.table"
                            );
                        };
                        HTTP = {
                            psap = (
                                "config/variants/vsap/partitions/psap/http/MessageConfiguration.table"
                            );
                        };
                        WS = {
                            psap = (
                                "./config/variants/vsap/partitions/psap/ws/MessageConfiguration.table"
                            );
                        };
                    };
                    MessageDefinitionFiles = {
                        vsap = (
                            "./ariba/variants/vsap/messages/MessageDefinition.table",
                            "./config/variants/vsap/messages/MessageDefinition.table"
                        );
                    };
                };
                Procure = {
                    ASNOrderForPrivateSupplier = true;
                    AddOCReviewInToDoListOfUserGroups = ( );
                    AllowAttributeSearching = false;
                    AllowChangeRequisition = true;
                    "AllowSupplierPunchInUsersToViewContractDetails" = true;
                    AssetDataByCommodityCodeFile = "./config/variants/vsap/partitions/psap/data/AssetDataByCommodityCode.csv";
                    AssetDataMethod = ariba.receiving.NoAssetDataRule;
                    BlanketOrderMethods = ( "ariba.purchasing.ordering.SSPAllDirectOrder" );
                    CustomCatalogImplementation = ariba.procure.server.SAPCustomCatalog;
                    CustomPurchaseOrgImplementation = "ariba.procure.server.SAPCustomPurchasingOrg";
                    DecimalMaxDigits = 3;
                    DefaultPaymentTerms = 0001;
                    DefaultUnitOfMeasure = EA;
                    ERPAmountPrecision = 4;
                    ERSParamHandlerClass = ariba.sap.common.ERSParamEnabledForSAP;
                    ExternalReqSource = {
                        ExternalEndPointMethod = "";
                        ExternalEndPointNameSpaceURL = "";
                        ExternalEndPointPassword = "";
                        ExternalEndPointURL = "";
                        ExternalEndPointUsername = "";
                        ExternalSourceURL = "";
                        ProxyHostForExternalService = "";
                        ProxyPortForExternalService = "";
                        RouteCopyInvoicesToERP = false;
                        ServiceProviderIdKey = SPID;
                        ServiceProviderIdValue = "";
                    };
                    ItemCategoryOnRequisitionHandlerClass = "ariba.sap.common.ItemCategoryOnServiceLineParameterHandlerForSAP";
                    OrderMethods = (
                        "ariba.purchasing.ordering.AribaNetworkDummyOrder",
                        ariba.pcard.ordering.AribaSSPGhostPCard,
                        ariba.pcard.ordering.AribaSSPPCard,
                        "ariba.purchasing.ordering.SSPAribaNetworkSpotBuyOrder",
                        "ariba.purchasing.ordering.SSPAllDirectOrder",
                        ariba.sap.server.SAPPOERPCC,
                        ariba.sap.server.SAPPOERP,
                        ariba.sap.server.SpotBuySAPPOERPCC
                    );
                    "OrderReceivedForInvoicingOnReceiptApproval" = false;
                    OrganicGrowth = {
                        DescriptionFields = {
                            ariba.common.core.ProcurementUnit = Description;
                            ariba.core.Account = AccountDescription;
                            ariba.core.AccountCategory = Description;
                            ariba.core.ActivityNumber = Description;
                            ariba.core.Company = Description;
                            ariba.core.CostCenter = CostCenterDescription;
                            ariba.core.GeneralLedger = GeneralLedgerDescription;
                            ariba.core.Network = NetworkDescription;
                            ariba.core.SubAccount = Description;
                            ariba.core.WBSElement = Description;
                        };
                    };
                    OverReceivingOperator = OR;
                    OverReceivingPercentage = 10;
                    OverReceivingQuantity = 0;
                    OverReceivingValue = 0;
                    PCardReceivingTypeMethod = "ariba.pcard.receiving.PCardReceivingTypeRule";
                    PaymentTermsDefaulter = "ariba.sap.common.SAPPaymentTermsDefaulter";
                    Print = { PPTFilter = ariba.sap.core.PPTSAPFilter;};
                    PurchaseOrderAsyncEvent = PurchaseOrderAsyncExport;
                    PurchaseOrderCancelAsyncEvent = PurchaseOrderCancelAsyncExport;
                    PurchaseOrderCancelEvent = PurchaseOrderCancelRealTimeExport;
                    PurchaseOrderChangeAsyncEvent = PurchaseOrderChangeAsyncExport;
                    PurchaseOrderChangeEvent = PurchaseOrderChangeRealTimeExport;
                    PurchaseOrderCloseEvent = PurchaseOrderCloseStatusRealTimeExport;
                    "PurchaseOrderERPHeaderStatusAsyncPullEvent" = PurchaseOrderERPHeaderStatusAsyncImport;
                    PurchaseOrderEvent = PurchaseOrderRealTimeExport;
                    ReceiptAsyncEvent = ReceiptAsyncExport;
                    ReceiptDataByPartitionedCommodityCode = false;
                    ReceiptEvent = ReceiptRealTimeExport;
                    ReceiptSendMethod = SAPReceipt;
                    ReceiptTrackerMethod = ariba.receiving.NoReceiptTrackerRule;
                    ReceivingTypeMethod = ariba.receiving.ReceivingTypeRule;
                    ServiceSheetAsyncEvent = ServiceSheetAsyncExport;
                    ServiceSheetStatusAsyncEvent = ServiceSheetStatusAsyncExport;
                    ShowcXMLAccountingFields = true;
                    SubmitSupplierLocationValidator = "ariba.procure.core.validator.SupplierLocationValidator";
                    TaxSourceRetrieverClass = ariba.sap.common.TaxSourceRetrieverImpl;
                    TransactionPush = {
                        AdvancedShipNotice = {
                            Enabled = false;
                            Event = PurchaseOrderSSPush;
                            Statuses = "Added,Updated,Deleted";
                        };
                        PurchaseOrder = {
                            ChangeInFields = "";
                            CopyOrderExportEnabled = false;
                            Enabled = false;
                            Event = PurchaseOrderSSPush;
                            Statuses = "Ordering,Ordered,Canceling,Canceled";
                        };
                        Receipt = {
                            CopyReceiptExportEnabled = false;
                            Enabled = false;
                            Event = ReceiptSSPush;
                            Statuses = Approved;
                        };
                    };
                    UnderReceivingOperator = AND;
                    UnderReceivingPercentage = 0;
                    UnderReceivingQuantity = 0;
                    UnderReceivingValue = 0;
                    UseCancelOrderIntegration = true;
                    UseChangeOrderIntegration = true;
                    UseLineItemUnitPriceToSelectCEME = false;
                    UsePOLineNumberForExternalIntegration = true;
                    UseReceiptIntegration = true;
                    UseReqOrPOIntegration = true;
                    WholeNumberMaxDigits = 10;
                };
                Purchasing = {
                    "AccountingImportEventsWithUniqueNameValidation" = (
                        CostCenterPull,
                        NetworkPull,
                        GeneralLedgerPull,
                        AccountCategoryPull,
                        PurchaseGroupPull,
                        InternalOrderPull,
                        AssetPull,
                        ActivityNumberPull
                    );
                    AutoAggregateHeldLines = { ForceInvocationMode = false; Schedule = "";};
                    POCloseErrorLineNumberField = NumInSet;
                    SendNotificationForPendingHeldLines = { PendingForDays = 30; Schedule = "";};
                };
                Receiving = {
                    ERPReceiptLineNumberFieldName = "";
                    EnableProcessPendingReceipts = false;
                    ReceiptImportLineItemKeys = ( "NumberInCollection,NumberInCollection" );
                    ReceiptImportReceivableKey = "PurchaseOrder,UniqueName,ReceivableID";
                    StagedReceiptPushEvent = StagedReceiptPush;
                };
                Reports = {
                    EnableEuroDualCurrencyDisplay = false;
                    ReportsTotalCurrency = "";
                };
                ServiceSheet = { ServiceSheetSendMethod = SAPServiceSheet;};
                Settlement = {
                    DynamicDiscountsEnabled = false;
                    LocalPaymentModelSupported = false;
                    PaymentDiscountSelectionPolicy = TakeDiscountMaximum;
                    PaymentDiscountSelector = "ariba.payment.AribaPaymentDiscountSelector";
                    PaymentModel = ExternalPay;
                    PaymentRequestSendMethodOption = Default;
                    PaymentRequestSendMethods = "SAPMessagingQueue:AribaNetwork";
                    PaymentScheduler = ariba.payment.AribaPaymentScheduler;
                    PaymentTermsEffectiveDateSkipDays = 0;
                    PaymentTermsLineTypeCategories = ( 1 );
                    PaymentTransactionSendMethods = AribaNetwork;
                    RemittanceStartDate = 20110101000000;
                    TransactionPush = {
                        AdvancePayment = {
                            Enabled = true;
                            Event = AdvancePaymentSSPush;
                            Statuses = "Approved,Canceling";
                        };
                    };
                    "UpdatePaymentDueDatesToSkipWeekendsAndHolidays" = false;
                };
                UI = { EnableReconciliation = false; PreferredTimezones = ( );};
                Workforce = { LaborComplianceExtensionFile = "/LaborComplianceExt.lcf";};
            };
        };
        supplierdirect = {
            Application = {
                Approvable = { OrganizationalVisibilityPartitioning = false;};
                Base = {
                    Data = {
                        AribaSystemUser = aribasystem;
                        DefaultBillToAddress = 15;
                        DefaultCurrency = USD;
                    };
                    DefaultLocale = en_US;
                    ScheduledTasksFile = "variants/Plain/partitions/supplierdirect/ScheduledTasks.table";
                };
                Charge = {
                    OverdueChargesWarningPeriod = 7;
                    PaymentRequestSendMethods = MessagingQueue;
                };
                Common = { ValidateAddress = false;};
                Contract = {
                    MasterAgreement = {
                        ASNBPOForPrivateSupplier = true;
                        AllowChange = true;
                        AllowCollaborativeInvoicing = false;
                        AlwaysRegenerateApprovalGraph = false;
                        ApplySupAndCommTermsToNonCatalogItems = true;
                        ContractSendMethodName = URL;
                        CreateSubscriptionForNonCatalogItems = true;
                        CumulativePricingState = Ordered;
                        EnableAutoSelect = true;
                        MAReceivingTypeMethod = "ariba.contract.receiving.ContractReceivingTypeRule";
                        ProcessPeriodInDays = 1;
                        ReleaseAvailableBalanceState = Ordered;
                        UseMasterAgreementIdForPurchaseOrderId = true;
                        WaitForMASubscriptionLoad = true;
                    };
                };
                Expense = {
                    AdjustPermissionStyle = AdjustExpenseReportNotAllowed;
                    ChargeItemsRequireReceipts = false;
                    DefaultExpenseType = Airfare;
                    EnableFixErrorsViolations = true;
                    EnableTravelAuthorization = true;
                    ExpenseExcelTemplate = "./config/variants/Plain/partitions/supplierdirect/data/ExpenseTemplate.xls";
                    ExpenseGuidelinesTable = "./config/variants/Plain/partitions/supplierdirect/data/ExpenseGuidelines.table";
                    ExpenseSendMethod = MessagingQueue;
                    ExpenseTypesNotBillable = ( Personal, HealthClub );
                    ExpenseTypesRequireItemization = ( Hotel );
                    ExpenseWithoutReceiptImageNotifyPeriod = 1;
                    ExpenseWithoutReceiptNotifyPeriod = 14;
                    ForceFullChargeItemization = false;
                    GiftAndEntertainmentPolicyURL = "";
                    HotelWizardExpenseTypes = (
                        Breakfast,
                        Lunch,
                        Dinner,
                        Parking,
                        Telephone,
                        Tips,
                        Laundry
                    );
                    Imaging = {
                        AllApproversViewReceipts = true;
                        AllowedReceiptsExtensions = ( tif, pdf, jpeg, jpg, bmp, gif );
                        EnableManualUpload = false;
                        Enabled = false;
                        ImagingProviderImplementorClass = "";
                    };
                    ItemizeExpenseTypes = ( Hotel );
                    NotifyExpenseReceiptManagers = true;
                    PassAuditRequiredBeforeProcessing = false;
                    "PrepopulateExpenseFromTravelAuthorization" = true;
                    ShowExpenseReportsForMaxDays = 30;
                    ShowGroupByExpenseTypeInCart = false;
                    ShowMyTripsForMaxDays = 30;
                    ShowViolationForUnreconciledCharge = true;
                    Tax = {
                        CountriesRequireState = ( CA );
                        Enabled = true;
                        UseGrossAmounts = true;
                        UseVATDefaults = false;
                    };
                    TravelBookingProvider = {
                        AllowCancel = true;
                        AllowChange = true;
                        CustomerIdentity = "";
                        Domain = bogus-duns;
                        Identity = 165603902;
                        PunchOutURL = "http://localhost:7778/ExpensePunchoutTest/aribaLiveSetup.htm";
                        SendMethods = {
                            URL = {
                                Formatter = ariba.expense.ordering.TAOOrderFormatter;
                                Sender = ariba.expense.ordering.TAOOrderSender;
                            };
                        };
                    };
                    UseBaseHotelRateForLimit = true;
                    UseTravelAuthorization = true;
                };
                Invoicing = {
                    AllowAdhocExternalShipToAddress = true;
                    AllowInvoiceAttachmentMetadataToERP = false;
                    AllowInvoiceAttachmentsToERP = false;
                    AllowReusingInvoiceNumber = ( );
                    "AlwaysDisplayRejectButtonForIRsInApproving" = false;
                    "CorrectAmountInvoicedAccumulatorsForApprovable" = "";
                    "CorrectAmountInvoicedAccumulatorsForApprovableTypes" = ( PurchaseOrder );
                    "CorrectAmountInvoicedAccumulatorsFromDate" = "";
                    "CorrectAmountInvoicedAccumulatorsPreviewMode" = true;
                    "CorrectAmountInvoicedAccumulatorsReconcile" = false;
                    CorrectAmountInvoicedAccumulatorsToDate = "";
                    CorrectAmountInvoicedAccumulatorsToUsers = "";
                    "DefaultANInvoiceToFirstRemittanceLocationAddress" = false;
                    DefaultLineItemCommodityCode = "";
                    DefaultRequesterFromOrderAndValidate = true;
                    DisallowDispute = false;
                    EnableEnhancedManualMatch = true;
                    ExcludeExceptionTypesForGRBasedInvoices = ( POReceivedQuantityVariance, POCatalogPriceVariance );
                    "ExportPositiveAndNegativeLineAmountInvoices" = true;
                    ExternalReconciliationEnabled = true;
                    InvoiceEntryAllowEditLineDescription = false;
                    InvoiceEntryUseUpperCaseOnly = false;
                    InvoiceLineEditBatchPagination = 150;
                    MaxInvoiceAttachmentPagesToPNG = 15;
                    RestrictDeletionOfInvoiceAttachments = false;
                    SendIRToAN = false;
                    ShowAccountingForTaxLineItems = true;
                    "ShowInvoiceAndPaymentsToRequisitionCreator" = false;
                    ShowOldInvoiceUIDeprecationMessage = true;
                    ShowPaymentsToInvoiceCreator = false;
                    SkipLineCreditMemoExceptions = true;
                    UseEnhancedInvoice = false;
                    UseInvoiceERPIntegration = true;
                    ValidateRemittanceLocation = true;
                    ViewableInvoiceAttachmentExtensions = ( pdf, png, jpeg, jpg, jpe, jfif, gif, tiff );
                };
                Messaging = {
                    MessageConfigurationFiles = {
                        File = {
                            supplierdirect = (
                                "config/variants/Plain/partitions/supplierdirect/file/MessageConfiguration.table"
                            );
                        };
                    };
                };
                Procure = {
                    ASNOrderForPrivateSupplier = true;
                    AddOCReviewInToDoListOfUserGroups = ( );
                    AllowAttributeSearching = false;
                    AllowChangeRequisition = true;
                    "AllowSupplierPunchInUsersToViewContractDetails" = true;
                    AssetDataByCommodityCodeFile = "./config/variants/Plain/partitions/supplierdirect/data/AssetDataByCommodityCode.csv";
                    AssetDataMethod = ariba.receiving.NoAssetDataRule;
                    BlanketOrderMethods = ( "ariba.purchasing.ordering.SSPAllDirectOrder" );
                    CustomCatalogCSVFile = "./config/variants/Plain/partitions/supplierdirect/data/CustomCatalog.csv";
                    CustomCatalogImplementation = "";
                    DecimalMaxDigits = 5;
                    DefaultUnitOfMeasure = EA;
                    ExternalReqSource = {
                        ExternalEndPointMethod = "";
                        ExternalEndPointNameSpaceURL = "";
                        ExternalEndPointPassword = "";
                        ExternalEndPointURL = "";
                        ExternalEndPointUsername = "";
                        ExternalSourceURL = "";
                        ProxyHostForExternalService = "";
                        ProxyPortForExternalService = "";
                        RouteCopyInvoicesToERP = false;
                        ServiceProviderIdKey = SPID;
                        ServiceProviderIdValue = "";
                    };
                    OrderMethods = (
                        ariba.pcard.ordering.AribaSSPGhostPCard,
                        ariba.pcard.ordering.AribaSSPPCard,
                        "ariba.purchasing.ordering.SSPAribaNetworkSpotBuyOrder",
                        "ariba.purchasing.ordering.SSPAllDirectOrder"
                    );
                    "OrderReceivedForInvoicingOnReceiptApproval" = false;
                    OverReceivingOperator = OR;
                    OverReceivingPercentage = 10;
                    OverReceivingQuantity = 0;
                    OverReceivingValue = 0;
                    PCardReceivingTypeMethod = "ariba.pcard.receiving.PCardReceivingTypeRule";
                    PurchaseOrderCancelEvent = PurchaseOrderCancelPush;
                    PurchaseOrderChangeEvent = PurchaseOrderChangePush;
                    PurchaseOrderCloseEvent = PurchaseOrderClosePush;
                    PurchaseOrderEvent = PurchaseOrderPush;
                    ReceiptByCommodityCodeFile = "";
                    ReceiptByPartNumberFile = "";
                    ReceiptDataByPartitionedCommodityCode = false;
                    ReceiptEvent = ReceiptPush;
                    ReceiptSendMethod = Silent;
                    ReceiptTrackerMethod = ariba.receiving.NoReceiptTrackerRule;
                    ReceivingTypeMethod = ariba.receiving.ReceivingTypeRule;
                    ShowcXMLAccountingFields = true;
                    SubmitSupplierLocationValidator = "ariba.procure.core.validator.SupplierLocationValidator";
                    TransactionPush = {
                        AdvancedShipNotice = {
                            Enabled = false;
                            Event = PurchaseOrderSSPush;
                            Statuses = "Added,Updated,Deleted";
                        };
                        PurchaseOrder = {
                            ChangeInFields = "";
                            CopyOrderExportEnabled = false;
                            Enabled = false;
                            Event = PurchaseOrderSSPush;
                            Statuses = "Ordering,Ordered,Canceling,Canceled";
                        };
                        Receipt = {
                            CopyReceiptExportEnabled = false;
                            Enabled = false;
                            Event = ReceiptSSPush;
                            Statuses = Approved;
                        };
                    };
                    UnderReceivingOperator = AND;
                    UnderReceivingPercentage = 0;
                    UnderReceivingQuantity = 0;
                    UnderReceivingValue = 0;
                    UseCancelOrderIntegration = false;
                    UseChangeOrderIntegration = false;
                    UseLineItemUnitPriceToSelectCEME = false;
                    UsePOLineNumberForExternalIntegration = true;
                    UseReqOrPOIntegration = false;
                    WholeNumberMaxDigits = -1;
                };
                Receiving = {
                    ERPReceiptLineNumberFieldName = "";
                    EnableProcessPendingReceipts = false;
                    ReceiptImportLineItemKeys = ( "NumberInCollection,NumberInCollection" );
                    ReceiptImportReceivableKey = "PurchaseOrder,UniqueName,ReceivableID";
                    StagedReceiptPushEvent = StagedReceiptPush;
                };
                Settlement = {
                    DynamicDiscountsEnabled = false;
                    LocalPaymentModelSupported = false;
                    PaymentDiscountSelectionPolicy = TakeDiscountMaximum;
                    PaymentDiscountSelector = "ariba.payment.AribaPaymentDiscountSelector";
                    PaymentRequestSendMethods = "MessagingQueue:AribaNetwork";
                    PaymentScheduler = ariba.payment.AribaPaymentScheduler;
                    PaymentTermsEffectiveDateSkipDays = 0;
                    PaymentTermsLineTypeCategories = ( 1 );
                    PaymentTransactionSendMethods = AribaNetwork;
                    TransactionPush = {
                        AdvancePayment = {
                            Enabled = true;
                            Event = AdvancePaymentSSPush;
                            Statuses = "Approved,Canceling";
                        };
                    };
                    "UpdatePaymentDueDatesToSkipWeekendsAndHolidays" = false;
                };
                UI = {};
            };
        };
    };
    System = {
        Admin = {
            AdministrationApplicationFiles = (
                SiteAdminConfig,
                RealmAdminConfig,
                SiteAdminConfigExt,
                SSCustomizationExt,
                SSUserAdminConfigExt,
                BuyerExt,
                PurchasingAdminConfigExt,
                ReceivingAdminConfigExt,
                BuyerRealmAdminConfig,
                SSBuyerExt,
                ItemMasterAdminConfig,
                InvoicingAdminConfigExt,
                SettlementAdminConfigExt,
                ExpenseAdminConfigExt,
                ContractAdminConfigExt,
                CategoryTypeAdminConfigExt,
                WorkforceAdminConfigExt
            );
            AdministrationConfigurationFiles = (
                ContentAdminConfig,
                AdminConfig,
                IntegrationManager,
                CustomizationConfig,
                UserAdminConfig,
                DashboardAdminConfig,
                IntegrationManagernew,
                FeatureAdminConfig,
                SwitchSchemaConfig,
                ConfigurationAdminConfig,
                MasterdataAdminConfig,
                EncryptionManager,
                PCardAdminConfig,
                MobileAdminConfig,
                PurchasingAdminConfig,
                ReceivingAdminConfig,
                TaxAdminConfig,
                BudgetAdminConfig,
                BuyerAdminConfig,
                P2PAdminConfig,
                ItemMasterAdminConfig,
                InvoicingAdminConfig,
                ExpenseAdminConfig,
                ContractAdminConfig,
                CategoryTypeAdminConfig,
                WorkforceAdminConfig
            );
            AdministrationExtensionFile = AdminConfigExt;
            AllowTemplateRules = true;
            "AutoSetAdapterSourceAfterManualModification" = false;
            ClassEditor = {
                ExcludedClass = (
                    ariba.procure.core.GlobalItemProperties,
                    "ariba.procure.core.PropertiesWithMappableStorageFields",
                    "ariba.procure.core.CategoryItemProperties",
                    ariba.procure.core.CategoryItem,
                    "ariba.procure.core.SharedGlobalItemProperties",
                    "ariba.procure.core.CategoryTemplateDetails",
                    "ariba.collaboration.core.CollaborationLineItemDetails",
                    ariba.approvable.core.FormApprovable,
                    "ariba.approvable.core.FormApprovableDetails",
                    ariba.approvable.core.FormExtension,
                    "ariba.approvable.core.FormExtensionDetails",
                    ariba.collaborate.core.FormDocument,
                    "ariba.collaborate.core.FormDocumentDetails",
                    ariba.basic.core.FlexMasterData,
                    ariba.analytics.fact.EForm,
                    ariba.analytics.fact.EFormDetail,
                    ariba.analytics.fact.ContractsDForm,
                    "ariba.analytics.fact.ContractsDFormDetail"
                );
            };
            ScriptApprovalRules = false;
            SensitivePermissions = (
                project.sourcing.manage,
                bid.delete,
                bid.surrogate,
                AuditViewer,
                ScheduledTasks,
                IntegrationEvents,
                ParametersEditor,
                UserSessions,
                ActOnBehalf,
                CommodityCodeManager,
                CustomizationFiles,
                ASNSettings,
                BrandingSettings
            );
            SupportedLanguages = {
                Arabic = ar;
                BrazilianPortuguese = pt_BR;
                Bulgarian = bg_BG;
                Croatian = hr_HR;
                Czech = cs_CZ;
                Danish = da_DK;
                Dutch = nl_NL;
                English = en_US;
                Finnish = fi_FI;
                French = fr_FR;
                German = de_DE;
                Greek = el_GR;
                Hebrew = iw_IL;
                Hungarian = hu_HU;
                Italian = it_IT;
                Japanese = ja_JP;
                Korean = ko_KR;
                Norwegian = no_NO;
                Polish = pl_PL;
                Romanian = ro_RO;
                Russian = ru_RU;
                SimplifiedChinese = zh_CN;
                Spanish = es_ES;
                Swedish = sv_SE;
                Thai = th;
                TraditionalChinese = zh_TW;
                Turkish = tr_TR;
            };
        };
        AlertNotifications = {
            Debug = false;
            Enabled = false;
            FeedURL = "https://support.ariba.com/XML_Export/Notification_XML?AN=0";
        };
        Analysis = { UseNewMDAMLProcessor = true;};
        Approvable = {
            AllowDeletionOfNonComposingApprovables = false;
            AllowDeletionOfWithdrawnApprovables = true;
            PermissionsRemovedForTerminatedUser = ( CreateInvoice );
            SupportFastRemovalFromUserFolders = true;
        };
        Authentication = {
            Credentials = { MyCredentials = { Password = ""; Username = "";};};
            Keystores = {
                AppleMockKeystore = {
                    File = "lib/certs/mock.apns.ariba.com.p12";
                    Keys = {
                        AribaPrivateKey = { Alias = 1; KeyPassword = messaging;};
                    };
                    StorePassword = messaging;
                    Type = pkcs12;
                };
                AppleProductionKeystore = {
                    File = "lib/certs/dev.apns.ariba.com.p12";
                    Keys = {
                        AribaPrivateKey = { Alias = 1; KeyPassword = changeme;};
                    };
                    StorePassword = changeme;
                    Type = pkcs12;
                };
                AribaPrivateKeystore = {
                    File = "lib/certs/dev.ariba.com.p12";
                    Keys = {
                        AribaPrivateKey = { Alias = dev.ariba.com; KeyPassword = messaging;};
                    };
                    StorePassword = messaging;
                    Type = pkcs12;
                };
                AribaPrivateKeystoreAdvanced = {
                    File = "lib/certs/dev-sha2.ariba.com.p12";
                    Keys = {
                        AribaPrivateKey = { Alias = dev.ariba.com; KeyPassword = messaging;};
                    };
                    StorePassword = messaging;
                    Type = pkcs12;
                };
                AribaPrivateKeystoreIntegration = {
                    File = "lib/certs/dev.ariba.com.p12";
                    Keys = {
                        AribaPrivateKey = { Alias = dev.ariba.com; KeyPassword = messaging;};
                    };
                    StorePassword = messaging;
                    Type = pkcs12;
                };
            };
        };
        Base = {
            AMLDTDLocation = "ariba/base/meta/core";
            AMLModules = (
                ariba.base.core.Base,
                ariba.base.model.BaseModel,
                ariba.base.server.core.BaseServer,
                "ariba.server.workflowserver.meta.Workflow",
                ariba.common.meta.Integration,
                ariba.common.meta.Core,
                ariba.common.meta.ExpenseReport,
                ariba.portlet.core.Portlet,
                ariba.common.meta.Requisition,
                ariba.admin.meta.CommonAdmin,
                ariba.admin.meta.Admin,
                ariba.dashboard.core.Core,
                ariba.catalog.meta.Platform,
                ariba.catalog.meta.Type,
                ariba.catalog.meta.Admin,
                ariba.catalog.meta.Search,
                ariba.catalog.base.meta.CatalogBase,
                ariba.catalog.base.meta.CatalogItem,
                ariba.catalog.util.CatalogUtil,
                ariba.arches.publisher.Publish,
                ariba.common.meta.ExpenseAdmin,
                ariba.cXML.meta.cxml,
                ariba.auth.meta.Auth,
                ariba.app.util.AppUtil,
                ariba.app.util.replication.Replication,
                ariba.approvable.rules.Rules,
                ariba.approvable.core.Approvable,
                ariba.approvable.server.ApprovableServer,
                ariba.buyeradmin.meta.BuyerAdmin,
                ariba.admin.meta.RuleAdmin,
                ariba.invoicing.core.Invoicing,
                ariba.invoicing.core.InvoicingAdmin,
                ariba.payment.core.Payment,
                ariba.procure.core.Procure,
                ariba.procure.core.ProcureAdmin,
                ariba.receiving.core.Receiving,
                ariba.contract.core.Contract,
                ariba.purchasing.core.Ordering,
                ariba.pcard.core.PCard,
                ariba.procure.core.Service,
                ariba.workforce.core.Workforce,
                ariba.kitting.core.Kitting,
                ariba.collaboration.core.Collaboration,
                ariba.payment.core.PaymentCore,
                ariba.pricing.core.Pricing,
                ariba.search.core.Search,
                ariba.reconciliation.core.Reconciliation,
                "ariba.restapi.invoicing.core.InvoicingRestApi",
                "ariba.restapi.procure.core.ProcureRestApi",
                ariba.restapi.common.core.CommonRestApi,
                "ariba.restapi.payment.core.PaymentRestApi",
                ariba.reporting.core.Reporting,
                ariba.tax.core.Tax,
                ariba.statement.core.Statement,
                ariba.charge.core.Charge,
                ariba.charge.core.ChargeAdmin,
                ariba.l2charge.core.L2Charge,
                ariba.itemmaster.core.ItemMaster,
                "ariba.electronicorder.core.ElectronicOrder",
                "ariba.accounting.core.AdvancedAccountingCore",
                ariba.receiving.core.ReceivingAdmin,
                ariba.payment.core.PaymentAdmin,
                ariba.tax.core.TaxAdmin,
                ariba.mobile.meta.Template,
                ariba.content.core.Content,
                ariba.reportingapi.engine.Reporting,
                ariba.app.integrate.user.LoginNonce,
                ariba.admin.meta.AccessControlAdmin,
                "ariba.configurationapi.core.Configuration",
                "ariba.security.encryption.AppEncryptionManager",
                test.ariba.testautomation.TestAutomation,
                ariba.common.meta.ConvAPI,
                ariba.user.phaserollout.PhaseRollOut,
                ariba.app.integrate.mobile.Mobile,
                "ariba.app.masterdataservice.masterdata.Masterdata",
                ariba.masterdata.core.Core,
                ariba.budget.core.Budget,
                ariba.servicesheet.core.ServiceSheet
            );
            ASMSharedRoot = .;
            AdministratorEmailAddress = "admin@your.admins.domain";
            "AllowAddApprovalRequestAnywhereInComposingState" = false;
            AllowSystemMetadataRuntimeModifications = true;
            AmlScannerPreprocessors = ( ariba.analytics.metadata.MDAMLProcessor2 );
            Backplane = {
                AppConfigGenerators = (
                    "ariba.app.util.scheduler.SchedulerConfigGenerator",
                    "ariba.portlet.core.BackplaneConfigGenerator",
                    ariba.app.server.IPQConfigGenerator,
                    "test.ariba.app.backplane.EPQTestConfigGenerator",
                    "test.benchmark.ariba.app.backplane.BenchMarkConfigGenerator"
                );
                EnableEPQFilter = false;
                QMPort = 10076;
            };
            CSVHelperFileMaxLines = 500000;
            CSVHelperFileMaxSize = 10485760;
            CSVHelperFileMaxSizeWithFeatureToggle = 31457280;
            ChangeLog = {
                GroupUserChangeLog = { BatchSize = 5; ThresholdUsers = 100;};
                Processing = { MaxRetryCount = 5; MaxRowFetch = 100;};
                Purge = {
                    MaxErrorCount = 5;
                    MaxRecordFetchLimit = 900;
                    MaxTimeToLiveInHoursForStatusComplete = 168;
                    MaxTimeToLiveInHoursForStatusError = 1440;
                };
                Register = {
                    CustomizationPublishChangeLog = "ariba.app.core.publish.CustomizationPublishChangeProcessor";
                    GroupChangeLog = "ariba.user.core.FlattenHelper$GroupChangeProcessor";
                    MDSUserGroupMappingChangeLog = "ariba.user.core.MDSUserGroupAsyncPushHelper$MDSUserGroupMappingChangeProcessor";
                    SupplierGroupUserChangeLog = "ariba.user.core.SupplierGroupAsyncUserChangeHelper$SupplierGroupUserChangeProcessor";
                };
            };
            CheckFieldNamePrefixDuringAmlUpload = true;
            ClassesForActiveOrderByDescChanges = (
                ariba.core.CostCenter,
                ariba.core.Company,
                ariba.core.BusinessUnit,
                ariba.core.SubAccount,
                ariba.core.Product,
                ariba.core.Project,
                ariba.core.Region,
                ariba.core.SetId,
                ariba.core.GLBusinessUnit,
                ariba.core.Department,
                ariba.core.StatisticsCode,
                ariba.core.AccCategoryFieldStatusCombo,
                ariba.core.PlantPurchaseOrgCombo,
                ariba.core.SAPPlant,
                ariba.core.StorageLocation,
                ariba.core.AssetClass,
                ariba.core.Network,
                ariba.core.ActivityNumber,
                ariba.core.PurchaseOrg,
                ariba.core.CompanyCode,
                ariba.core.AssetLineType,
                ariba.core.CompanyCodeTaxRegistration,
                ariba.core.GeneralLedger,
                ariba.core.PurchaseGroup,
                ariba.core.Asset,
                ariba.core.CompanyCodeIOCombo,
                ariba.core.CompanyCodeWBSCombo,
                ariba.core.InternalOrder,
                ariba.core.WBSElement,
                ariba.core.AccountCategory,
                ariba.core.ItemCategory,
                ariba.core.ReleaseAuthority,
                "ariba.core.FieldStatusToAccountingFieldNameMap"
            );
            ClassesToRecomputeForFieldChanges = (
                "ariba.approvable.core.DynamicFormApprovable",
                "ariba.collaborate.contracts.AbstractContractWorkspace",
                "ariba.collaborate.core.DynamicFormDocument",
                ariba.contract.core.Contract,
                ariba.contract.core.ContractRequest,
                ariba.invoicing.core.Invoice,
                "ariba.invoicing.core.InvoiceReconciliation",
                ariba.purchasing.core.PurchaseOrder,
                ariba.purchasing.core.Requisition,
                ariba.receiving.core.Receipt,
                "ariba.sourcing.rfx.SavingsAllocationDetails",
                ariba.sourcing.rfx.SavingsForm,
                ariba.sourcing.rfx.SourcingProject
            );
            ConserveBaseId = true;
            CustomInitializationClassNames = ( );
            CustomXercesConfigurationClass = ariba.util.xml.AribaXMLConfiguration;
            CustomXercesConfigurationKey = "org.apache.xerces.xni.parser.XMLParserConfiguration";
            Data = {
                AutoCreateSimpleMapEntries = true;
                BaseCurrency = USD;
                DefaultOrganization = "[Buyer]";
                ReportingCurrency = "";
                ResolveRealms = true;
                SystemAdministratorGroup = "Customer Administrator";
            };
            Datacenter = {
                AllDatacenters = {
                    AU = { MaxRealmID = 450000; MinRealmID = 400001;};
                    AU2 = { MaxRealmID = 500000; MinRealmID = 450001;};
                    CN = { MaxRealmID = 200000; MinRealmID = 150001;};
                    EU = { MaxRealmID = 100000; MinRealmID = 50001;};
                    JP = { MaxRealmID = 550000; MinRealmID = 500001;};
                    KSA = { MaxRealmID = 300000; MinRealmID = 250001;};
                    PROD2 = { MaxRealmID = 350000; MinRealmID = 300001;};
                    PROD3 = { MaxRealmID = 400000; MinRealmID = 350001;};
                    RDC = { MaxRealmID = 150000; MinRealmID = 100001;};
                    UAE = { MaxRealmID = 250000; MinRealmID = 200001;};
                    US = { MaxRealmID = 50000; MinRealmID = 1;};
                };
                CurrentDatacenter = US;
            };
            DefaultLocale = en_US;
            Directories = {
                AttachmentDir = "transactionData/attachments";
                SupplierDir = "transactionData/supplier";
            };
            DisableLoginSecurity = false;
            DisableRPCSecurity = false;
            DisableRPCSecurityCheck = true;
            DocRoot = "./docroot";
            DomainVariantFlexibleLayout = true;
            DurableEmail = {
                InitialWaitDurationinMilliSeconds = 0;
                MaxLoopNum = 1000;
                MaxRecordFetchLimit = 25000;
                MaxTimeToLiveInDaysForErroredEmails = 14;
                MaxTimeToLiveInHoursForSentEmails = 0;
                MaxWaitTime = 1000;
                MaximumRetryCount = 96;
                MinWaitTime = 500;
                NumTrialsAllowed = 0;
                NumberOfPurgeThreads = 4;
                RetryDelayInMinutes = 15;
                ThresholdPerMinute = 600;
            };
            EmailApprovalAudit = false;
            EmailApprovalAutoReject = false;
            EmailApprovalAutoRejectAudit = false;
            EmailApprovalAutoRejectNotification = false;
            EmailApprovalEnabled = true;
            EmailApprovalIncludeComment = true;
            EmailApprovalMailToLink = true;
            EmailApprovalReplyTo = "approval@c02c813emd6m.ariba.com";
            EmailSimpleTemplateEngine = "ariba.htmlui.htmlemail.AribaEmailSimpleTemplateEngine";
            EmailSimpleTemplateFormatter = "ariba.htmlui.htmlemail.AribaSimpleTemplateFormatter";
            EnableChecksum = false;
            ExtrinsicAMLPath = ( "./" );
            ExtrinsicsReadFromDatabase = true;
            FeatureToggle = { ComponentsToSkip = ( test ); IsProduction = false;};
            FeatureValidatorClass = "ariba.server.ormsserver.BuyerFeatureValidator";
            HTTPNonProxyHosts = "hostname|localhost";
            HTTPProxyHost = "";
            HTTPProxyPort = 80;
            HTTPSNonProxyHosts = "hostname|localhost";
            HTTPSProxyHost = "";
            HTTPSProxyPassword = "";
            HTTPSProxyPort = 443;
            HTTPSProxyUsername = "";
            HideMetaReferenceFinder = false;
            InstanceName = Buyer;
            IntrinsicAMLPath = ( "./" );
            IsAribaOpsDeployed = true;
            IsEarlyAccess = false;
            LoadPersistedSystemParams = true;
            LocalTempDirectory = temp;
            MDSConfiguration = {
                Chooser = {
                    ClassList = (
                        ariba.core.CompanyCode,
                        ariba.common.core.Address,
                        ariba.core.InternalOrder,
                        ariba.core.PurchaseGroup,
                        ariba.core.WBSElement,
                        ariba.core.PurchaseOrg,
                        ariba.core.Asset,
                        ariba.core.AccountCategory,
                        ariba.basic.core.CommodityCode,
                        ariba.core.GeneralLedger,
                        ariba.core.CostCenter,
                        ariba.core.GLBusinessUnit,
                        ariba.common.core.ProcurementUnit,
                        ariba.core.BusinessUnit,
                        ariba.core.ItemCategory,
                        ariba.core.StatisticsCode,
                        ariba.core.Project,
                        ariba.common.core.PreferredSupplierMap,
                        ariba.common.core.SupplierLocation,
                        ariba.common.core.Supplier,
                        "ariba.common.core.PartitionedCommodityCode",
                        ariba.payment.core.BankAccountType,
                        ariba.payment.core.BankAccountIDType,
                        ariba.payment.core.BankIDType,
                        ariba.user.core.Group,
                        ariba.payment.core.PaymentTerms,
                        ariba.core.Account,
                        ariba.core.SubAccount,
                        ariba.core.Region,
                        ariba.basic.core.UnitOfMeasure,
                        ariba.core.Department,
                        ariba.core.Product,
                        ariba.core.SetId,
                        ariba.core.Company,
                        ariba.user.core.Organization,
                        ariba.common.core.IncoTerms,
                        ariba.payment.core.PaymentMethodType,
                        ariba.payment.core.PaymentBankLocation,
                        ariba.basic.core.Address,
                        ariba.user.core.User,
                        ariba.common.core.User,
                        ariba.user.core.Role
                    );
                };
                MDSPassword = "Welcome2Ar!ba";
                MDSReconstitutionAdapters = {
                    ariba.base.core.GenericRelationEntry = "ariba.base.server.mdsadapter.GenericRelationEntryClusterRootAdapter";
                    ariba.core.AccCategoryFieldStatusCombo = "ariba.base.server.mdsadapter.AccCategoryFieldStatusComboClusterRootAdapter";
                    ariba.core.Asset = "ariba.base.server.mdsadapter.AssetClusterRootAdapter";
                    ariba.core.CompanyCodeIOCombo = "ariba.base.server.mdsadapter.CompanyCodeIOComboClusterRootAdapter";
                    ariba.core.CompanyCodeWBSCombo = "ariba.base.server.mdsadapter.CompanyCodeWBSComboClusterRootAdapter";
                    ariba.core.CostCenter = "ariba.base.server.mdsadapter.CostCenterClusterRootAdapter";
                    ariba.core.GeneralLedger = "ariba.base.server.mdsadapter.GeneralLedgerClusterRootAdapter";
                    ariba.core.PlantPurchaseOrgCombo = "ariba.base.server.mdsadapter.PlantPurchaseOrgClusterRootAdapter";
                    ariba.core.PorgSupplierCombo = "ariba.base.server.mdsadapter.PorgSupplierComboClusterRootAdapter";
                };
                MDSUserName = mdsuser;
                MaxHTTPConnections = 20;
                MaxHTTPConnectionsPerRoute = 20;
                PublishURL = "http://ariba-mds(pod)-mdspublish(pod).mds.lab1.ariba.com:30033";
                SearchURL = "http://ariba-mds(pod)-mdsodata(pod).mds.lab1.ariba.com:30033";
            };
            MainServletName = Main;
            MasterData = {
                AuxDataTypes = ( );
                BucketMaxFileSizeInMB = 12;
                BucketMaxRecordCount = 40000;
                LanguagesSupported = (
                    ja,
                    sv,
                    en,
                    ro,
                    pl,
                    no,
                    pt_BR,
                    pt,
                    fr,
                    zh_CN,
                    zh,
                    ru,
                    tr,
                    fi,
                    nl,
                    es,
                    de,
                    el,
                    ko,
                    da,
                    hu,
                    zh_TW,
                    it
                );
                MasterDataHandlers = {
                    Register = {
                        MasterDataAuxSyncService = {
                            Handler = ariba.masterdata.core.MasterDataAuxSync;
                            TopicType = AuxData;
                        };
                        MasterDataRepublishSyncService = { Handler = ""; TopicType = Republish;};
                        MasterDataSchemaSyncService = {
                            Handler = "ariba.masterdata.core.MasterDataSchemaSync";
                            TopicType = Schema;
                        };
                        MasterDataSyncService = {
                            Handler = ariba.masterdata.core.MasterDataSync;
                            TopicType = Data;
                        };
                    };
                };
                MaxArchesPublishPerCommunity = 60;
                MaxArchesRequests = 75;
                MaxRealmCountPerCommunity = 6;
                MaxRetryForMDS = 15;
                MaxTempFileSizeInGB = 2;
                Modifications = {
                    Common = {
                        AMLFiles = (
                            "etc/integration/Common/CommonIntegrationAddOn.aml"
                        );
                    };
                };
                Monitor = {
                    ExtractDataRealmLooperRunThreshold = 1;
                    ExtractDataRunThreshold = 2;
                    ExtractTaskNotRunningThreshold = 4;
                    PubilshTaskNotRunningThreshold = 1;
                    WorkItemsLongPendingThreshold = 6;
                };
                MonitorWorkItemsThreshold = 60;
                PublishMDSTaskRerunCount = 1;
                RepublishDataTypes = {};
            };
            MasterDataService = {
                HANAFmdMaxFetchResultSize = 2500;
                HANAIncludeInActiveClassList = "ariba.common.core.User,ariba.user.core.User";
                HANAMaxFetchResultSize = 500;
                "HANAMigrationMaxFullLoadRealmCountPerCommunity" = 2;
                "HANAMigrationMaxIncrementalRealmCountPerCommunity" = 2;
                "HANAMigrationMaxIncrementalRealmCountPerSid" = 3;
                HANAMigrationMaxRealmCountPerSid = 1;
                HANAPublishRetryCount = 3;
                HANASystemMasterDataMigrationClassList = "ariba.user.core.Role,ariba.user.core.Group,ariba.common.core.User,ariba.user.core.User,ariba.user.core.Permission,ariba.common.core.CommonSupplier,ariba.user.core.Organization,ariba.basic.core.CommodityCode,ariba.basic.core.Address,ariba.base.core.SimpleMapType,ariba.base.core.SimpleMapEntry,ariba.basic.core.Country,ariba.basic.core.State,ariba.basic.core.Currency,ariba.base.core.Language,ariba.basic.core.LocaleID";
                MaxIncrementalRealmCountPerCommunity = 4;
                MaxIncrementalRealmCountPerSid = 32;
                MaxRealmCountPerSid = 4;
            };
            MasterdataClassList = {
                Register = {
                    MasterdataServiceAccounting = {
                        ClassName = ariba.common.core.Accounting;
                        Handler = "ariba.app.masterdataservice.masterdata.AccountingMasterdataGenerator";
                        IncludeAllFields = true;
                        Path = accounts;
                        UpdateClass = ( );
                        vgeneric = (
                            ariba.core.Account,
                            ariba.core.Company,
                            ariba.core.BusinessUnit,
                            ariba.core.CostCenter,
                            ariba.core.SubAccount,
                            ariba.core.Product,
                            ariba.core.Project,
                            ariba.core.Region,
                            ariba.core.AccountingCombination,
                            "ariba.common.core.AccountingCombinationGroup",
                            ariba.common.core.AccountType,
                            "ariba.common.core.CommodityExportMapEntry",
                            ariba.common.core.PreferredSupplierMap
                        );
                        vpsoft84ora = (
                            ariba.core.SetId,
                            ariba.core.Account,
                            ariba.core.BusinessUnit,
                            ariba.core.GLBusinessUnit,
                            ariba.core.Department,
                            ariba.core.Product,
                            ariba.core.Project,
                            ariba.core.StatisticsCode,
                            ariba.core.AccountingCombination,
                            "ariba.common.core.AccountingCombinationGroup",
                            ariba.common.core.AccountType,
                            "ariba.common.core.CommodityExportMapEntry",
                            ariba.common.core.PreferredSupplierMap
                        );
                        vsap = (
                            ariba.core.Account,
                            ariba.core.CostCenter,
                            ariba.core.GeneralLedger,
                            ariba.core.Asset,
                            ariba.core.ItemCategory,
                            ariba.core.CompanyCode,
                            ariba.core.GLIndicator,
                            ariba.core.PurchaseGroup,
                            ariba.core.PurchaseOrg,
                            ariba.core.AccountCategory,
                            ariba.core.PlantPurchaseOrgCombo,
                            ariba.common.core.AccountType,
                            "ariba.common.core.CommodityExportMapEntry",
                            ariba.core.AccCategoryFieldStatusCombo,
                            ariba.common.core.PreferredSupplierMap
                        );
                    };
                    MasterdataServiceAddress = {
                        ClassName = ariba.common.core.Address;
                        Handler = "ariba.app.masterdataservice.masterdata.CommonMasterdataGenerator";
                        Path = addresses;
                        UpdateClass = ( );
                    };
                    MasterdataServiceBankAccountIDType = {
                        ClassName = ariba.payment.core.BankAccountIDType;
                        Handler = "ariba.app.masterdataservice.masterdata.CommonMasterdataGenerator";
                        Path = bankaccountidtype;
                        UpdateClass = ( );
                    };
                    MasterdataServiceBankAccountType = {
                        ClassName = ariba.payment.core.BankAccountType;
                        Handler = "ariba.app.masterdataservice.masterdata.CommonMasterdataGenerator";
                        Path = bankaccounttype;
                        UpdateClass = ( );
                    };
                    MasterdataServiceBankIDType = {
                        ClassName = ariba.payment.core.BankIDType;
                        Handler = "ariba.app.masterdataservice.masterdata.CommonMasterdataGenerator";
                        Path = bankidtype;
                        UpdateClass = ( );
                    };
                    MasterdataServiceChargeType = {
                        ClassName = ariba.procure.core.ChargeType;
                        Handler = "ariba.app.masterdataservice.masterdata.CommonMasterdataGenerator";
                        Path = chargetype;
                        UpdateClass = ( );
                    };
                    MasterdataServiceClassificationCodeMap = {
                        ClassName = ariba.basic.core.ClassificationCodeMap;
                        Handler = "ariba.app.masterdataservice.masterdata.CommonMasterdataGenerator";
                        Path = classificationcodemaps;
                        UpdateClass = ( );
                    };
                    MasterdataServiceCommodityCode = {
                        ClassName = ariba.basic.core.CommodityCode;
                        Handler = "ariba.app.masterdataservice.masterdata.HierarchyPathMasterdataGenerator";
                        HierachyPathField = UniqueName;
                        Path = commoditycodes;
                        UpdateClass = ( );
                    };
                    MasterdataServiceCommonSupplier = {
                        ClassName = ariba.common.core.CommonSupplier;
                        ExcludeSubclassesForAutoJoins = ( ariba.basic.core.Address );
                        Handler = "ariba.app.masterdataservice.masterdata.CommonSupplierMasterdataGenerator";
                        Path = commonsupplier;
                        UpdateClass = ( );
                    };
                    MasterdataServiceCommonUser = {
                        ClassName = ariba.common.core.User;
                        Handler = "ariba.app.masterdataservice.masterdata.CommonMasterdataGenerator";
                        MasterDataName = ariba.masterdata.CommonUser;
                        Path = commonusers;
                        UpdateClass = ( );
                    };
                    MasterdataServiceConversionRate = {
                        ClassName = ariba.basic.core.CurrencyConversionRate;
                        Handler = "ariba.app.masterdataservice.masterdata.CommonMasterdataGenerator";
                        Path = conversionrates;
                        UpdateClass = ( );
                    };
                    MasterdataServiceCountry = {
                        ClassName = ariba.basic.core.Country;
                        Handler = "ariba.app.masterdataservice.masterdata.CommonMasterdataGenerator";
                        Path = countries;
                        UpdateClass = ( );
                    };
                    MasterdataServiceCurrency = {
                        ClassName = ariba.basic.core.Currency;
                        Handler = "ariba.app.masterdataservice.masterdata.CommonMasterdataGenerator";
                        Path = currencies;
                        UpdateClass = ( );
                    };
                    MasterdataServiceExpenseType = {
                        ClassName = ariba.l2charge.core.ExpenseType;
                        Handler = "ariba.app.masterdataservice.masterdata.CommonMasterdataGenerator";
                        Path = expensetype;
                        UpdateClass = ( );
                    };
                    MasterdataServiceFMD = {
                        ClassName = ariba.basic.core.FlexMasterData;
                        Handler = "ariba.app.masterdataservice.masterdata.FMDMasterdataGenerator";
                        IncludeCustomFields = true;
                        Path = fmds;
                        UpdateClass = ( );
                    };
                    MasterdataServiceGenericRelationEntry = {
                        ClassName = ariba.base.core.GenericRelationEntry;
                        Handler = "ariba.app.masterdataservice.masterdata.CommonMasterdataGenerator";
                        Path = genericrelationentry;
                        UpdateClass = ( );
                    };
                    MasterdataServiceGenericRelationType = {
                        ClassName = ariba.base.core.GenericRelationType;
                        Handler = "ariba.app.masterdataservice.masterdata.CommonMasterdataGenerator";
                        Path = genericrelationtype;
                        UpdateClass = ( );
                    };
                    MasterdataServiceGroup = {
                        ClassName = ariba.user.core.Group;
                        Handler = "ariba.app.masterdataservice.masterdata.CommonMasterdataGenerator";
                        Path = groups;
                        UpdateClass = ( ariba.user.core.User );
                    };
                    MasterdataServiceInternalOrder = {
                        AdditionalClass = ariba.core.CompanyCodeIOCombo;
                        AdditionalCondition = "InternalOrder = CompanyCodeIOCombo.InternalOrder";
                        AdditionalFields = CompanyCode;
                        ClassName = ariba.core.InternalOrder;
                        Handler = "ariba.app.masterdataservice.masterdata.CombinedMasterdataGenerator";
                        IncludeAllFields = true;
                        Path = internalorder;
                        UpdateClass = ( );
                        VariantName = vsap;
                    };
                    MasterdataServiceLanguage = {
                        ClassName = ariba.base.core.Language;
                        Handler = "ariba.app.masterdataservice.masterdata.CommonMasterdataGenerator";
                        Path = languages;
                        UpdateClass = ( );
                    };
                    MasterdataServiceLocaleID = {
                        ClassName = ariba.basic.core.LocaleID;
                        Handler = "ariba.app.masterdataservice.masterdata.CommonMasterdataGenerator";
                        Path = localeids;
                        UpdateClass = ( );
                    };
                    MasterdataServiceLocalizedResourceID = {
                        ClassName = "ariba.app.masterdataservice.masterdata.LocalizedResourceID";
                        Handler = "ariba.app.masterdataservice.masterdata.LocalizedResourceIDMasterdataGenerator";
                        Path = lrid;
                        UpdateClass = ( );
                    };
                    MasterdataServiceOrganization = {
                        ClassName = ariba.user.core.Organization;
                        Handler = "ariba.app.masterdataservice.masterdata.CommonMasterdataGenerator";
                        Path = organizations;
                        UpdateClass = ( );
                    };
                    "MasterdataServicePartitionedCommodityCode" = {
                        ClassName = "ariba.common.core.PartitionedCommodityCode";
                        Handler = "ariba.app.masterdataservice.masterdata.CommonMasterdataGenerator";
                        Path = partitionedcommoditycodes;
                        UpdateClass = ( );
                    };
                    MasterdataServicePaymentBankLocation = {
                        ClassName = ariba.payment.core.PaymentBankLocation;
                        Handler = "ariba.app.masterdataservice.masterdata.CommonMasterdataGenerator";
                        MasterDataName = ariba.masterdata.PaymentBankLocation;
                        Path = paymentbanklocation;
                        UpdateClass = ( );
                    };
                    MasterdataServicePaymentMethodType = {
                        ClassName = ariba.payment.core.PaymentMethodType;
                        Handler = "ariba.app.masterdataservice.masterdata.CommonMasterdataGenerator";
                        Path = paymentmethodtype;
                        UpdateClass = ( );
                    };
                    MasterdataServicePaymentTerms = {
                        ClassName = ariba.payment.core.PaymentTerms;
                        Handler = "ariba.app.masterdataservice.masterdata.CommonMasterdataGenerator";
                        Path = paymentterms;
                        UpdateClass = ( );
                    };
                    MasterdataServiceProcurementUnit = {
                        ClassName = ariba.common.core.ProcurementUnit;
                        Handler = "ariba.app.masterdataservice.masterdata.HierarchyPathMasterdataGenerator";
                        HierachyPathField = UniqueName;
                        Path = procurementunits;
                        UpdateClass = ( );
                    };
                    MasterdataServicePurchaseOrderConditions = {
                        ClassName = "ariba.purchasing.core.PurchaseOrderConditions";
                        Handler = "ariba.app.masterdataservice.masterdata.InMemoryMasterdataGenerator";
                        Path = poconditions;
                        UpdateClass = ( );
                    };
                    MasterdataServiceReceiptByCommodityCode = {
                        ClassName = "ariba.receiving.core.ReceiptByCommodityCode";
                        Handler = "ariba.app.masterdataservice.masterdata.CommonMasterdataGenerator";
                        Path = receiptbycommoditycode;
                        UpdateClass = ( );
                    };
                    MasterdataServiceReceiptByPartNumber = {
                        ClassName = ariba.receiving.core.ReceiptByPartNumber;
                        Handler = "ariba.app.masterdataservice.masterdata.CommonMasterdataGenerator";
                        Path = receiptbypartnumber;
                        UpdateClass = ( );
                    };
                    MasterdataServiceRemittanceLocation = {
                        ClassName = ariba.payment.core.RemittanceLocation;
                        Handler = "ariba.app.masterdataservice.masterdata.CommonMasterdataGenerator";
                        Path = remittancelocation;
                        UpdateClass = ( );
                    };
                    MasterdataServiceSupplier = {
                        ClassName = ariba.common.core.Supplier;
                        ExcludeSubclassesForAutoJoins = ( ariba.basic.core.Address );
                        Handler = "ariba.app.masterdataservice.masterdata.CommonMasterdataGenerator";
                        IncludeCustomFields = true;
                        Path = suppliers;
                        UpdateClass = ( );
                        VariantName = "vgeneric,vpsoft84ora";
                    };
                    MasterdataServiceSupplierLocation = {
                        ClassName = ariba.common.core.SupplierLocation;
                        Handler = "ariba.app.masterdataservice.masterdata.CommonMasterdataGenerator";
                        Path = supplierlocation;
                        UpdateClass = ( );
                    };
                    MasterdataServiceTaxCode = {
                        ClassName = ariba.tax.core.TaxCode;
                        Handler = "ariba.app.masterdataservice.masterdata.CommonMasterdataGenerator";
                        Path = taxcode;
                        UpdateClass = ( );
                    };
                    MasterdataServiceTaxRateLookupTaxCode = {
                        ClassName = ariba.core.TaxRateLookup_TaxCode;
                        Handler = "ariba.app.masterdataservice.masterdata.CommonMasterdataGenerator";
                        Path = taxratelookuptaxcode;
                        UpdateClass = ( );
                    };
                    MasterdataServiceTaxTypeMapEntry = {
                        ClassName = ariba.procure.core.TaxTypeMapEntry;
                        Handler = "ariba.app.masterdataservice.masterdata.CommonMasterdataGenerator";
                        Path = taxtypemapentry;
                        UpdateClass = ( );
                    };
                    MasterdataServiceUOM = {
                        ClassName = ariba.basic.core.UnitOfMeasure;
                        Handler = "ariba.app.masterdataservice.masterdata.CommonMasterdataGenerator";
                        Path = uoms;
                        UpdateClass = ( );
                    };
                    MasterdataServiceUser = {
                        ClassName = ariba.user.core.User;
                        ExcludeSubclassesForAutoJoins = ( ariba.user.core.Organization );
                        Handler = "ariba.app.masterdataservice.masterdata.UserMasterdataGenerator";
                        Path = users;
                        UpdateClass = ( );
                    };
                    MasterdataServiceVSapSupplier = {
                        ClassName = ariba.common.core.Supplier;
                        ExcludeSubclassesForAutoJoins = ( ariba.basic.core.Address );
                        Handler = "ariba.app.masterdataservice.masterdata.SupplierMasterdataGenerator";
                        IncludeCustomFields = true;
                        Path = suppliers;
                        UpdateClass = ( );
                        VariantName = vsap;
                    };
                    MasterdataServiceWBSElement = {
                        AdditionalClass = ariba.core.CompanyCodeWBSCombo;
                        AdditionalCondition = "WBSElement = CompanyCodeWBSCombo.WBSElement";
                        AdditionalFields = CompanyCode;
                        ClassName = ariba.core.WBSElement;
                        Handler = "ariba.app.masterdataservice.masterdata.CombinedMasterdataGenerator";
                        IncludeAllFields = true;
                        Path = wbselement;
                        UpdateClass = ( );
                        VariantName = vsap;
                    };
                };
            };
            MaxSizeToRecomputeForFieldChanges = 256;
            MetadataValidators = "";
            Modules = (
                CatRegistry,
                CatAdmin,
                CatSearch,
                Basic,
                Admin,
                Reporting,
                Procure,
                Receiving,
                Purchasing,
                Content,
                PCard,
                Charge,
                Template,
                Budget,
                ServiceSheet,
                Invoicing,
                Settlement,
                Expense,
                Eform,
                Contract,
                Collaboration,
                Workforce
            );
            NotificationQueueManager = {
                Priority = {
                    High = {
                        PriorityLevel = 5;
                        RetryAttemtps = 10;
                        RetryDelayInMinutes = 5;
                        SMTPMailQueueSize = 50;
                        SleepInterval = 5;
                    };
                    Low = {
                        PriorityLevel = 10;
                        RetryAttemtps = 1;
                        RetryDelayInMinutes = 60;
                        SMTPMailQueueSize = 50;
                        SleepInterval = 60;
                    };
                    Normal = {
                        EnableQueueMonitor = true;
                        NumSMTPMailQueueThread = 10;
                        PriorityLevel = 0;
                        RetryAttemtps = 3;
                        RetryDelayInMinutes = 58;
                        SMTPMailQueueSize = 200;
                        SleepInterval = 15;
                    };
                };
            };
            NotifyOnObjectCreationClasses = (
                ariba.approvable.core.ApprovableType,
                ariba.approvable.core.Folder,
                ariba.base.core.Language,
                ariba.base.core.SimpleMapEntry,
                ariba.basic.core.Address,
                ariba.basic.core.Currency,
                ariba.basic.core.CurrencyGroup,
                ariba.basic.core.Country,
                ariba.basic.core.LocaleID,
                ariba.basic.core.CommodityCode,
                "ariba.basic.core.ClassificationCodeDomainMeta",
                ariba.basic.core.CurrencyConversionRate,
                ariba.basic.core.ClassificationCode,
                ariba.basic.core.ClassificationCodeMap,
                ariba.basic.core.UnitOfMeasure,
                ariba.common.core.PrivateOrgGroup,
                ariba.common.core.CommonSupplier,
                "ariba.common.core.CommodityExportMapEntry",
                "ariba.expense.core.tega.AllowableHierarchyChoice",
                "ariba.expense.core.tega.GuidelineException",
                "ariba.expense.core.tega.AllowableHierarchyChoice",
                "ariba.expense.core.ExpenseHeaderCategoryMap",
                ariba.l2charge.core.ExpenseType,
                ariba.user.core.User,
                ariba.user.core.Group,
                ariba.user.core.Organization,
                ariba.user.core.Permission,
                ariba.user.core.Role,
                ariba.user.core.ObjectPermission
            );
            OSGi = {
                Enabled = true;
                Services = {
                    Arches = {
                        FunctionalSimulator = {
                            DataFile = "internal/classes/test.ariba.asm.main.zip";
                            Enabled = false;
                            LoadClass = test.ariba.asm.util.ArchesClientImpl;
                        };
                        Recorder = { Enabled = false; ZipBase64Recording = false;};
                        Simulator = { DataFile = ""; Enabled = false;};
                    };
                };
                SystemPackages = (
                    ariba.util.core,
                    ariba.util.fieldvalue,
                    ariba.util.formatter,
                    ariba.util.http,
                    ariba.util.i18n,
                    ariba.util.io,
                    ariba.util.log,
                    ariba.util.osgi.container,
                    ariba.util.osgi.util,
                    ariba.util.parameters,
                    ariba.util.shutdown,
                    ariba.util.test,
                    com.sun.istack,
                    com.sun.istack.localization,
                    com.sun.xml,
                    com.sun.xml.bind,
                    com.sun.xml.bind.annotation,
                    com.sun.xml.bind.api,
                    com.sun.xml.bind.api.impl,
                    com.sun.xml.bind.marshaller,
                    com.sun.xml.bind.unmarshaller,
                    com.sun.xml.bind.util,
                    com.sun.xml.bind.v2,
                    com.sun.xml.bind.v2.bytecode,
                    com.sun.xml.bind.v2.model,
                    com.sun.xml.bind.v2.model.annotation,
                    com.sun.xml.bind.v2.model.core,
                    com.sun.xml.bind.v2.model.impl,
                    com.sun.xml.bind.v2.model.nav,
                    com.sun.xml.bind.v2.model.runtime,
                    com.sun.xml.bind.v2.runtime,
                    com.sun.xml.bind.v2.runtime.output,
                    com.sun.xml.bind.v2.runtime.property,
                    com.sun.xml.bind.v2.runtime.reflect,
                    com.sun.xml.bind.v2.runtime.reflect.opt,
                    com.sun.xml.bind.v2.runtime.unmarshaller,
                    com.sun.xml.bind.v2.schemagen,
                    com.sun.xml.bind.v2.schemagen.episode,
                    com.sun.xml.bind.v2.schemagen.xmlschema,
                    com.sun.xml.bind.v2.util,
                    com.sun.xml.fastinfoset,
                    com.sun.xml.fastinfoset.algorithm,
                    com.sun.xml.fastinfoset.alphabet,
                    com.sun.xml.fastinfoset.dom,
                    com.sun.xml.fastinfoset.org,
                    com.sun.xml.fastinfoset.org.apache,
                    "com.sun.xml.fastinfoset.org.apache.xerces",
                    "com.sun.xml.fastinfoset.org.apache.xerces.util",
                    com.sun.xml.fastinfoset.resources,
                    com.sun.xml.fastinfoset.sax,
                    com.sun.xml.fastinfoset.stax,
                    com.sun.xml.fastinfoset.stax.events,
                    com.sun.xml.fastinfoset.stax.factory,
                    com.sun.xml.fastinfoset.stax.util,
                    com.sun.xml.fastinfoset.tools,
                    com.sun.xml.fastinfoset.util,
                    com.sun.xml.fastinfoset.vocab,
                    com.sun.xml.txw2,
                    com.sun.xml.txw2.annotation,
                    com.sun.xml.txw2.output,
                    com.yourkit.runtime,
                    "javax.activation;version=1.1.0",
                    javax.crypto,
                    javax.crypto.spec,
                    javax.imageio,
                    javax.imageio.metadata,
                    javax.imageio.stream,
                    javax.management,
                    javax.management.openmbean,
                    javax.management.remote,
                    javax.naming,
                    javax.net,
                    javax.net.ssl,
                    javax.script,
                    javax.security.auth.callback,
                    javax.security.auth.x500,
                    javax.security.sasl,
                    javax.sql,
                    javax.xml.bind,
                    javax.xml.bind.annotation,
                    javax.xml.bind.annotation.adapters,
                    javax.xml.bind.attachment,
                    javax.xml.bind.helpers,
                    javax.xml.bind.util,
                    javax.xml.datatype,
                    javax.xml.messaging,
                    javax.xml.namespace,
                    javax.xml.parsers,
                    javax.xml.rpc,
                    javax.xml.rpc.encoding,
                    javax.xml.rpc.handler,
                    javax.xml.rpc.handler.soap,
                    javax.xml.rpc.holders,
                    javax.xml.rpc.server,
                    javax.xml.rpc.soap,
                    javax.xml.soap,
                    "javax.xml.stream;version=1.0.1",
                    javax.xml.stream.events,
                    javax.xml.stream.util,
                    javax.xml.transform,
                    javax.xml.transform.dom,
                    javax.xml.transform.sax,
                    javax.xml.transform.stream,
                    javax.xml.validation,
                    javax.xml.xpath,
                    junit.framework,
                    "org.apache.http;version=4.2.2",
                    "org.apache.http.client;version=4.2.2",
                    "org.apache.http.client.methods;version=4.2.2",
                    "org.apache.http.client.params;version=4.2.2",
                    "org.apache.http.conn;version=4.2.2",
                    "org.apache.http.conn.routing;version=4.2.2",
                    "org.apache.http.conn.scheme;version=4.2.2",
                    "org.apache.http.conn.ssl;version=4.2.2",
                    "org.apache.http.entity;version=4.2.2",
                    "org.apache.http.impl.client;version=4.2.2",
                    "org.apache.http.impl.conn;version=4.2.2",
                    "org.apache.http.params;version=4.2.2",
                    "org.apache.http.pool;version=4.2.2",
                    "org.apache.http.util;version=4.2.2",
                    "org.apache.log4j;version=1.2.8",
                    org.codehaus.jackson,
                    org.codehaus.jackson.io,
                    org.codehaus.jackson.map,
                    org.codehaus.jackson.node,
                    org.codehaus.jackson.util,
                    org.ietf.jgss,
                    "org.osgi.framework;version=1.7",
                    "org.osgi.framework.hooks.bundle;version=1.1",
                    "org.osgi.framework.hooks.resolver;version=1.0",
                    "org.osgi.framework.hooks.service;version=1.1",
                    "org.osgi.framework.hooks.weaving;version=1.0",
                    "org.osgi.framework.launch;version=1.1",
                    "org.osgi.framework.namespace;version=1.0",
                    "org.osgi.framework.startlevel;version=1.0",
                    "org.osgi.framework.wiring;version=1.1",
                    "org.osgi.resource;version=1.0",
                    "org.osgi.service.packageadmin;version=1.2",
                    "org.osgi.service.startlevel;version=1.1",
                    "org.osgi.service.url;version=1.0",
                    "org.osgi.util.tracker;version=1.5.1",
                    org.springframework.osgi.compendium.cm,
                    "org.springframework.web.portlet.mvc.annotation",
                    org.springframework.web.util,
                    org.w3c.css,
                    org.w3c.dom,
                    org.w3c.dom.bootstrap,
                    org.w3c.dom.css,
                    org.w3c.dom.events,
                    org.w3c.dom.html,
                    org.w3c.dom.ls,
                    org.w3c.dom.ranges,
                    org.w3c.dom.stylesheets,
                    org.w3c.dom.traversal,
                    org.w3c.dom.views,
                    org.w3c.dom.xpath,
                    org.xml.sax,
                    org.xml.sax.ext,
                    org.xml.sax.helpers
                );
            };
            PrivateKey = "";
            Production = false;
            Purge = {
                EventStoreService = {
                    BaseURL = "https://qa.aws.ariba.com/event-store-service";
                    OAuthClientID = 613e86a0-8701-41c0-befa-d11291e11de7;
                    OAuthPrivateSecret = sZkzLtWTyzuAd66Lt8he4TmYq282ccow;
                    OAuthPublicSecret = Oh0hCwhiYTAbWpV0ZxENuJf6ngwhjMcz;
                    OAuthScope = eventstoreservice;
                    OAuthURL = "https://svcscdev1mobile.sc1-lab1.ariba.com";
                    Offset = latest;
                    PurgeServicePublishChannel = "";
                    PurgeServiceReceiveChannel = "";
                };
            };
            PurgeFlushBatchSize = 5000;
            PurgeMasterdataMessages = { Purge = { MaxErrorCount = 5; MaxRecordFetchLimit = 900;};};
            RealTimeAnalytics = {
                AgeInMinutes = 3;
                ClusterRootExtractionTaskMaxRunTime = 600000;
                ConnectionTimeOutInSecond = 2;
                MaxPayloadSize = 10000000;
                MaxRecordToPushCount = 100;
                MaxRecordToQueryCount = 1000;
                MaxRetryAttempts = 3;
                MaxThreadCount = 3;
                MinAgeInRTAQueue = 10000;
                "PurgeClusterRootPushDataEntryTaskMaxRunTime" = 600000;
                ReadTimeOutInSecond = 20;
                TriggerObjectQueueSize = 1000;
                isExtractPayloadCompressionEnabled = false;
            };
            RealmReplicator = { TransactionSizeOverride = ( "ariba.core.WBSElement:1000" );};
            RealmRootDir = realms;
            RealmWeight = {
                ACM = {
                    Exclusive = 1000;
                    Huge = 100;
                    Large = 30;
                    Medium = 10;
                    Overhead = 5;
                    Small = 1;
                    Tiny = 0;
                };
                Buyer = {
                    Exclusive = 1000;
                    Huge = 200;
                    Large = 80;
                    Medium = 30;
                    Overhead = 5;
                    Small = 5;
                    Tiny = 0;
                };
            };
            ReplaceEmptyApproverWithSystemAdmin = true;
            ReplicationStatus = { ReplicationScope = "replication:read";};
            ResourceURL = "/AribaBuyer";
            SMTPDomainName = sap.com;
            SMTPServerNameList = ( );
            SearchTerm = {
                DefaultNameTableClasses = (
                    "ariba.common.core.nametable.GenericRelationNameTable",
                    "ariba.common.core.nametable.GenericRelationNameTable_Ext",
                    "ariba.sap.core.SAPGenericRelationNameTable"
                );
            };
            SecureKeys = { SecKey1 = ( System.Security.EncryptionKeys );};
            SecureParameters = (
                System.J2EEServer.WebLogic.Password,
                "System.DatabaseSchemas.Transaction.Schema1.AribaDBPassword",
                System.Inspector.DebugPassword,
                System.Inspector.AdminPassword,
                System.Inspector.ReadOnlyPassword,
                System.Redis.Connection.Password,
                "System.Base.PortableRealms.Service.Password",
                "System.Security.EncryptionManagerOauthClient.PrivateSecret",
                "System.Security.EncryptionManagerOauthClient.PublicSecret",
                System.Security.GBaasClientID,
                System.Security.GBaasClientSecret,
                System.Security.GBaasClientEncryptionKey,
                System.Security.GBaasAribaClientID,
                System.Security.GBaasAribaClientSecret,
                "System.Mobile.CommunityBootstrapData.ClientSecret",
                "System.Messaging.Channels.WS.CIGHttpAuthPassword",
                System.Security.EncryptionKeys.1,
                System.Security.EncryptionKeys.2,
                "System.DatabaseSchemas.DynamicCreation.RealmStore.AribaDBPassword",
                System.Security.EncryptionKeys.1,
                System.Security.EncryptionKeys.2
            );
            StratSourcingUrl = "";
            StrictExtensionParsing = true;
            SupressObjectCreationNotifications = false;
            SystemData = true;
            ThreadPoolSizeForCheckDB = 7;
            ToolsDefault = {
                JavaMemoryMax = 1024m;
                JavaMemoryMin = 512m;
                JavaMemoryStart = 64m;
                JavaStackJava = 1M;
                JavaStackNative = 1M;
                JavaVMArguments = ( "-XX:MaxPermSize=256m", "-DMADROX_ENV=test" );
            };
            TrackFeature = ( );
            UIModules = (
                ariba.htmlui.channelui.ChannelUIModule,
                ariba.htmlui.catadmin.CatAdminModule,
                ariba.htmlui.catsearch.CatSearchModule,
                ariba.htmlui.kitadmin.KitAdminModule,
                "ariba.htmlui.demandagg.DemandAggregationModule",
                ariba.user.htmlui.UserUIModule,
                ariba.htmlui.admin.AdminModule,
                ariba.htmlui.buyeradmin.BuyerAdminModule,
                ariba.htmlui.procure.ProcureModule,
                ariba.htmlui.procure.InvoicingModule,
                ariba.htmlui.procure.SettlementModule,
                ariba.htmlui.content.ContentModule,
                "ariba.htmlui.masterdataui.MasterDataUIModule",
                ariba.htmlui.template.TemplateModule,
                ariba.htmlui.budget.BudgetModule,
                ariba.htmlui.expense.ExpenseModule,
                ariba.htmlui.eform.EformModule,
                "ariba.htmlui.contractadmin.ContractAdminModule",
                "ariba.htmlui.collaboration.CollaborationModule",
                ariba.htmlui.workforce.WorkforceModule
            );
            UsageReporting = {
                Password = "";
                PostURL = "";
                RecipientEmailAlias = "";
                Username = "";
            };
            UseOptimizedBaseId = true;
            VariantMetaLazyLoad = false;
            VerifyUnchangedEnumerationValues = false;
            WebjumperNotificationBaseURL = "";
            WebjumperUserNameField = UniqueName;
            oAuth = { URL = "http://localhost:8092";};
        };
        Catalog = {
            BroadcastTimeout = 300;
            BuyerContent = { AuxDataPath = "config/catalog/buyercontent/aux";};
            Content = {
                CategoryImageEnabled = true;
                CategoryImageLevel = 0;
                ContentCacheSize = 4000;
                ContentPath = "config/catalog/catalogcontent";
                Enabled = true;
                ExtendedInfoFields = ( specsheet, demo, hazmatsheet );
                ImageCopyMaxKiloBytes = 1024;
                ImageCopyTimeout = 3;
                ImageUtilImpl = ariba.catalog.util.ImageUtilImpl;
                InvalidContentRetryInterval = 86400;
                SmallImageHeight = 384;
                SmallImageWidth = 384;
                TempContentPath = "config/catalog/tempcatalogcontent";
                ThumbnailGenerationTimeout = 8;
                ThumbnailHeight = 128;
                ThumbnailWidth = 128;
                ValidContentRefreshInterval = 2592000;
            };
            Hierarchy = {
                CategoryDraftTable = "config/cataloghierarchydraft.xml";
                CategoryTable = "config/cataloghierarchy.xml";
            };
            ISSharedSecret = Welcome2i;
            MaxPollRequests = 50;
            Network = {
                RequestHandlers = (
                    "ariba.catalog.admin.server.dispatch.PunchOutSetupRequestHandler",
                    "ariba.catalog.admin.server.dispatch.CatalogChangeRequestHandler",
                    "ariba.catalog.admin.server.dispatch.ProfileRequestHandler",
                    "test.ariba.catalog.admin.server.SubscriptionListReflector",
                    "test.ariba.catalog.admin.server.SubscriptionContentReflector"
                );
                ValidateRequests = false;
            };
            NetworkDeployed = false;
            Oauth = { BuyerScope = buyerssp;};
            OrgIDDomain = buyersystemid;
            Publishing = {
                AutoPublish = true;
                CompactPeriod = 0;
                CompactStartTime = "18:00";
                CountErrorTolerance = 20;
                Executable = {
                    BroadcastExec = remote-broadcast-production;
                    DeleteExec = remotedelete;
                    PublishExec = remotepublish;
                    RealmIndexSortExec = realmindexsort;
                    RemotePublishExec = remotehostpublish;
                    TimeOut = 10800;
                };
                IndexManagerClassName = ariba.altavista.base.AVIndexManager;
                NumberOfGoodVersionsToKeep = 1;
                PublishAlwaysReturnOK = false;
                PublishInterval = 120;
                PublisherErrorsBeforeRebuild = 10;
                VerifyIndexCountErrorTolerance = 100;
            };
            PunchoutItemIndexing = true;
            Search = {
                CustomPriceImplementation = "";
                CustomSortByAsc1 = false;
                CustomSortByAsc2 = true;
                CustomSortByAttr1 = DefaultRelevance;
                CustomSortByAttr2 = ShortName;
                MaxConstraints = 1000;
                NumSearchNodes = 1;
                QueryCacheRowLimit = 0;
                QueryCacheSize = 512;
                SearchCategoryNames = true;
                SearchTimeout = 20000;
                ToleratedNodeFailures = 0;
            };
            SearchIndex = {
                CharsToWild = 3;
                Debug = false;
                EnableFuzzySpelling = true;
                EnableSoundex = true;
                EnableStemming = true;
                FilterCacheSize = 32;
                FixedDocSize = 48;
                MaxBuffered = 350;
                MaxIndexSize = 100000000;
                MergeFactor = 30;
                NumSearchers = 2;
                RealmSuffix = false;
                RootDirectory = searchIndex;
            };
            SharedServiceBuild = true;
            ShowFirstTimeExperience = true;
            StandaloneDeployed = false;
            TestNewFeatures = ( );
            UI = {
                AlternateSecurePort = "";
                DeveloperLoginAllowed = true;
                FileServletBufferSize = 8192;
                ItemContentPageSize = 50;
                MaxFavoritesPerGroup = 100;
                MaxItemWithLink = 8000;
                RefinementControllerLimit = 5;
                RefinementControllerValueLength = 20;
                UserFavoriteHighlightCacheSize = 1000;
            };
            Validation = {
                DuplicateItemValidation = true;
                MaxImportValidationErrors = 100;
                ValidationPrimitives = "config/validation/system/validationprimitives.table";
                ValidationServices = {
                    default = "ariba.catalog.basevalidation.validation.ValidationServiceImpl";
                };
                ValidationTree = "config/validation/system/validationtree.table";
                ValueMapAdapters = (
                    "ariba.catalog.base.validation.unspsc.EGCIValueMapAdapter/egci",
                    "ariba.catalog.base.validation.unspsc.UNSPSCValueMapAdapter/unspsc",
                    "ariba.catalog.base.validation.unspsc.SPSCValueMapAdapter/spsc"
                );
            };
            Workflow = {
                ContainerTransformers = (
                    "ariba.catalog.admin.server.DownloadContainerTransformer",
                    "ariba.catalog.admin.server.TypeBagValidatorTransformer",
                    "ariba.catalog.admin.server.SupplierValidatorTransformer",
                    "ariba.catalog.admin.server.IndexTransformer",
                    "ariba.catalog.admin.server.LoadStagedContainerTransformer",
                    "ariba.catalog.admin.server.transform.MemoryLoadStagedContainerTransformer",
                    "ariba.catalog.admin.server.PublishTransformer",
                    "ariba.catalog.admin.server.BuyerValidationTransformer",
                    "ariba.catalog.admin.server.PreApprovedTransformer",
                    "ariba.catalog.admin.server.ApprovalTransformer",
                    "ariba.catalog.admin.server.ApprovedTransformer",
                    "ariba.itemmaster.server.CatalogBuyerItemMasterTransformer",
                    "ariba.catalog.admin.server.ActivateTransformer",
                    "ariba.catalog.admin.server.ActivateTypeTransformer",
                    "ariba.catalog.admin.server.RetireTransformer",
                    "ariba.catalog.admin.server.RetireTypeTransformer",
                    "ariba.catalog.admin.server.ContainerContainerTransformer",
                    "ariba.catalog.admin.server.DefaultContainerTransformer"
                );
                DownloadDirectory = downloads;
                IndexPromoteThreadCount = 4;
                Loaders = "ariba.catalog.admin.server.transform.FileStagedBagLoader";
                PromoteCommitBatchSize = 25;
                PromoteQueueLength = 10;
                SendEmailOnFailedImport = true;
                SendEmailOnStopReceive = true;
                TransformerAPIImplementation = (
                    "ariba.altavista.base.SupplierNameTransformer",
                    ariba.altavista.base.MoneyTransformer,
                    "ariba.catalog.admin.server.DUNSTransformer",
                    "ariba.catalog.admin.server.NodeIdTransformer",
                    "ariba.catalog.admin.server.MAIdTransformer",
                    "ariba.altavista.base.PartitionTransformer",
                    "ariba.catalog.admin.server.DefaultRelevanceTransformer",
                    "ariba.altavista.base.LinguisticTransformer",
                    "ariba.catalog.admin.server.TypeNameTransformer",
                    "ariba.catalog.admin.server.CCCTransformer",
                    ariba.altavista.base.LanguageTransformer,
                    "ariba.catalog.admin.server.PunchoutTransformer",
                    ariba.kitting.core.KitIndexTransformer,
                    "ariba.contract.core.category.CategoryIndexTransformer",
                    "ariba.catalog.admin.server.SupplierIDTransformer",
                    ariba.altavista.base.KeywordsTransformer,
                    ariba.altavista.base.PunchoutTransformer,
                    "ariba.altavista.base.CatalogNameTransformer",
                    "ariba.catalog.admin.server.CatalogFilterPreviewTransformer",
                    "ariba.contract.core.ApplicableContractsTransformer"
                );
            };
        };
        CentralConnectionManager = {
            CCMStatusMessagePeriod = 10;
            ClientNodeNoResponseTime = 600;
            ClientStatusMessagePeriod = 60;
            DBQuery = { FullQueryFrequency = 6; QueryPeriod = 10;};
            DefaultSchemaHana = {
                Client = {
                    MaximumConnections = {
                        AODDatasyncRunner = 10;
                        AribaAdmin = 10;
                        AribaGlobalTaskRunner = 20;
                        AribaTaskRunner = 12;
                        AribaUI = 10;
                        CatalogFacadeSearch = 10;
                        CatalogSearch = 10;
                        CentralConnectionManager = 1;
                        QueueManager = 20;
                        TestServer = 20;
                    };
                    MinimumConnections = {
                        AODDatasyncRunner = 3;
                        AribaAdmin = 5;
                        AribaGlobalTaskRunner = 3;
                        AribaTaskRunner = 3;
                        AribaUI = 5;
                        CatalogFacadeSearch = 5;
                        CatalogSearch = 5;
                        CentralConnectionManager = 1;
                        QueueManager = 5;
                        TestServer = 5;
                    };
                    TargetConnections = {
                        AODDatasyncRunner = 5;
                        AribaAdmin = 5;
                        AribaGlobalTaskRunner = 5;
                        AribaTaskRunner = 6;
                        AribaUI = 5;
                        CatalogFacadeSearch = 5;
                        CatalogSearch = 5;
                        CentralConnectionManager = 1;
                        QueueManager = 10;
                        TestServer = 10;
                    };
                };
                ClientStartupDefaultZoneName = green;
                Zones = {
                    Zone1 = {
                        ColdConnectionPeriod = 60;
                        MinimumNumberOfConnectionsPercentage = 0;
                        Name = green;
                        PermitLimitOtherNode = Maximum;
                        PermitLimitUINode = Maximum;
                        PermitWaitTimeoutOtherNode = 300;
                        PermitWaitTimeoutUINode = 30;
                        PoolSizeRanges = {
                            AboveMaximum = { PruneImmediateDownTo = Maximum;};
                            Maximum = { PruneAmount = 1;};
                            Minimum = { PruneAmount = 0;};
                            Target = { PruneAmount = 1;};
                        };
                        Type = Regular;
                    };
                    Zone2 = {
                        MinimumNumberOfConnectionsPercentage = 55;
                        Name = "";
                        Type = Transition;
                    };
                    Zone3 = {
                        ColdConnectionPeriod = 60;
                        MinimumNumberOfConnectionsPercentage = 60;
                        Name = yellow;
                        PermitLimitOtherNode = Target;
                        PermitLimitUINode = Target;
                        PermitWaitTimeoutOtherNode = 300;
                        PermitWaitTimeoutUINode = 30;
                        PoolSizeRanges = {
                            AboveMaximum = { PruneImmediateDownTo = Maximum;};
                            Maximum = { PruneAmount = 1;};
                            Minimum = { PruneAmount = 0;};
                            Target = { PruneAmount = 1;};
                        };
                        Type = Regular;
                    };
                    Zone4 = {
                        MinimumNumberOfConnectionsPercentage = 66;
                        Name = "";
                        Type = Transition;
                    };
                    Zone5 = {
                        ColdConnectionPeriod = 60;
                        MinimumNumberOfConnectionsPercentage = 70;
                        Name = red;
                        PermitLimitOtherNode = Minimum;
                        PermitLimitUINode = Target;
                        PermitWaitTimeoutOtherNode = 300;
                        PermitWaitTimeoutUINode = 30;
                        PoolSizeRanges = {
                            AboveMaximum = { PruneImmediateDownTo = Target;};
                            Maximum = { PruneImmediateDownTo = Target;};
                            Minimum = { PruneAmount = 1; PruneDownToLimit = 1;};
                            Target = { PruneAmount = 1;};
                        };
                        Type = Regular;
                    };
                };
            };
            DefaultSchemaSID = {
                Client = {
                    MaximumConnections = {
                        AODDatasyncRunner = 10;
                        AribaAdmin = 12;
                        AribaGlobalTaskRunner = 20;
                        AribaTaskRunner = 12;
                        AribaUI = 4;
                        CatalogFacadeSearch = 10;
                        CatalogSearch = 10;
                        CentralConnectionManager = 1;
                        QueueManager = 20;
                        TestServer = 20;
                    };
                    MinimumConnections = {
                        AODDatasyncRunner = 3;
                        AribaAdmin = 3;
                        AribaGlobalTaskRunner = 5;
                        AribaTaskRunner = 3;
                        AribaUI = 1;
                        CatalogFacadeSearch = 5;
                        CatalogSearch = 5;
                        CentralConnectionManager = 1;
                        QueueManager = 5;
                        TestServer = 5;
                    };
                    TargetConnections = {
                        AODDatasyncRunner = 5;
                        AribaAdmin = 6;
                        AribaGlobalTaskRunner = 10;
                        AribaTaskRunner = 6;
                        AribaUI = 2;
                        CatalogFacadeSearch = 5;
                        CatalogSearch = 5;
                        CentralConnectionManager = 1;
                        QueueManager = 10;
                        TestServer = 10;
                    };
                };
                ClientStartupDefaultZoneName = green;
                Zones = {
                    Zone1 = {
                        ColdConnectionPeriod = 60;
                        MinimumNumberOfConnectionsPercentage = 0;
                        Name = green;
                        PermitLimitOtherNode = Maximum;
                        PermitLimitUINode = Maximum;
                        PermitWaitTimeoutOtherNode = 300;
                        PermitWaitTimeoutUINode = 30;
                        PoolSizeRanges = {
                            AboveMaximum = { PruneImmediateDownTo = Maximum;};
                            Maximum = { PruneAmount = 1;};
                            Minimum = { PruneAmount = 0;};
                            Target = { PruneAmount = 1;};
                        };
                        Type = Regular;
                    };
                    Zone2 = {
                        MinimumNumberOfConnectionsPercentage = 55;
                        Name = "";
                        Type = Transition;
                    };
                    Zone3 = {
                        ColdConnectionPeriod = 60;
                        MinimumNumberOfConnectionsPercentage = 60;
                        Name = yellow;
                        PermitLimitOtherNode = Target;
                        PermitLimitUINode = Target;
                        PermitWaitTimeoutOtherNode = 300;
                        PermitWaitTimeoutUINode = 30;
                        PoolSizeRanges = {
                            AboveMaximum = { PruneImmediateDownTo = Maximum;};
                            Maximum = { PruneAmount = 1;};
                            Minimum = { PruneAmount = 0;};
                            Target = { PruneAmount = 1;};
                        };
                        Type = Regular;
                    };
                    Zone4 = {
                        MinimumNumberOfConnectionsPercentage = 66;
                        Name = "";
                        Type = Transition;
                    };
                    Zone5 = {
                        ColdConnectionPeriod = 60;
                        MinimumNumberOfConnectionsPercentage = 70;
                        Name = red;
                        PermitLimitOtherNode = Minimum;
                        PermitLimitUINode = Target;
                        PermitWaitTimeoutOtherNode = 300;
                        PermitWaitTimeoutUINode = 30;
                        PoolSizeRanges = {
                            AboveMaximum = { PruneImmediateDownTo = Target;};
                            Maximum = { PruneImmediateDownTo = Target;};
                            Minimum = { PruneAmount = 1; PruneDownToLimit = 1;};
                            Target = { PruneAmount = 1;};
                        };
                        Type = Regular;
                    };
                };
            };
            RealmSIDs = {
                Client = {
                    MaximumConnections = {
                        AODDatasyncRunner = 2;
                        AribaAdmin = 10;
                        AribaGlobalTaskRunner = 20;
                        AribaTaskRunner = 12;
                        AribaUI = 10;
                        CatalogFacadeSearch = 10;
                        CatalogSearch = 10;
                        CentralConnectionManager = 1;
                        QueueManager = 20;
                        TestServer = 20;
                    };
                    MinimumConnections = {
                        AODDatasyncRunner = 0;
                        AribaAdmin = 5;
                        AribaGlobalTaskRunner = 3;
                        AribaTaskRunner = 3;
                        AribaUI = 5;
                        CatalogFacadeSearch = 5;
                        CatalogSearch = 5;
                        CentralConnectionManager = 1;
                        QueueManager = 5;
                        TestServer = 5;
                    };
                    TargetConnections = {
                        AODDatasyncRunner = 1;
                        AribaAdmin = 5;
                        AribaGlobalTaskRunner = 5;
                        AribaTaskRunner = 6;
                        AribaUI = 5;
                        CatalogFacadeSearch = 5;
                        CatalogSearch = 5;
                        CentralConnectionManager = 1;
                        QueueManager = 10;
                        TestServer = 10;
                    };
                };
                ClientStartupDefaultZoneName = green;
                Zones = {
                    Zone1 = {
                        ColdConnectionPeriod = 60;
                        MinimumNumberOfConnectionsPercentage = 0;
                        Name = green;
                        PermitLimitOtherNode = Maximum;
                        PermitLimitUINode = Maximum;
                        PermitWaitTimeoutOtherNode = 300;
                        PermitWaitTimeoutUINode = 30;
                        PoolSizeRanges = {
                            AboveMaximum = { PruneImmediateDownTo = Maximum;};
                            Maximum = { PruneAmount = 1;};
                            Minimum = { PruneAmount = 0;};
                            Target = { PruneAmount = 1;};
                        };
                        Type = Regular;
                    };
                    Zone2 = {
                        MinimumNumberOfConnectionsPercentage = 55;
                        Name = "";
                        Type = Transition;
                    };
                    Zone3 = {
                        ColdConnectionPeriod = 60;
                        MinimumNumberOfConnectionsPercentage = 60;
                        Name = yellow;
                        PermitLimitOtherNode = Target;
                        PermitLimitUINode = Target;
                        PermitWaitTimeoutOtherNode = 300;
                        PermitWaitTimeoutUINode = 30;
                        PoolSizeRanges = {
                            AboveMaximum = { PruneImmediateDownTo = Maximum;};
                            Maximum = { PruneAmount = 1;};
                            Minimum = { PruneAmount = 0;};
                            Target = { PruneAmount = 1;};
                        };
                        Type = Regular;
                    };
                    Zone4 = {
                        MinimumNumberOfConnectionsPercentage = 66;
                        Name = "";
                        Type = Transition;
                    };
                    Zone5 = {
                        ColdConnectionPeriod = 60;
                        MinimumNumberOfConnectionsPercentage = 70;
                        Name = red;
                        PermitLimitOtherNode = Minimum;
                        PermitLimitUINode = Target;
                        PermitWaitTimeoutOtherNode = 300;
                        PermitWaitTimeoutUINode = 30;
                        PoolSizeRanges = {
                            AboveMaximum = { PruneImmediateDownTo = Target;};
                            Maximum = { PruneImmediateDownTo = Target;};
                            Minimum = { PruneAmount = 1; PruneDownToLimit = 1;};
                            Target = { PruneAmount = 1;};
                        };
                        Type = Regular;
                    };
                };
            };
            RealmsHana = {
                Client = {
                    MaximumConnections = {
                        AODDatasyncRunner = 4;
                        AribaAdmin = 20;
                        AribaGlobalTaskRunner = 40;
                        AribaTaskRunner = 24;
                        AribaUI = 20;
                        CatalogFacadeSearch = 20;
                        CatalogSearch = 20;
                        CentralConnectionManager = 1;
                        QueueManager = 40;
                        TestServer = 40;
                    };
                    MinimumConnections = {
                        AODDatasyncRunner = 0;
                        AribaAdmin = 10;
                        AribaGlobalTaskRunner = 6;
                        AribaTaskRunner = 6;
                        AribaUI = 10;
                        CatalogFacadeSearch = 10;
                        CatalogSearch = 10;
                        CentralConnectionManager = 1;
                        QueueManager = 10;
                        TestServer = 10;
                    };
                    TargetConnections = {
                        AODDatasyncRunner = 1;
                        AribaAdmin = 10;
                        AribaGlobalTaskRunner = 10;
                        AribaTaskRunner = 12;
                        AribaUI = 10;
                        CatalogFacadeSearch = 10;
                        CatalogSearch = 10;
                        CentralConnectionManager = 1;
                        QueueManager = 20;
                        TestServer = 20;
                    };
                };
                ClientStartupDefaultZoneName = green;
                Zones = {
                    Zone1 = {
                        ColdConnectionPeriod = 60;
                        MinimumNumberOfConnectionsPercentage = 0;
                        Name = green;
                        PermitLimitOtherNode = Maximum;
                        PermitLimitUINode = Maximum;
                        PermitWaitTimeoutOtherNode = 300;
                        PermitWaitTimeoutUINode = 30;
                        PoolSizeRanges = {
                            AboveMaximum = { PruneImmediateDownTo = Maximum;};
                            Maximum = { PruneAmount = 1;};
                            Minimum = { PruneAmount = 0;};
                            Target = { PruneAmount = 1;};
                        };
                        Type = Regular;
                    };
                    Zone2 = {
                        MinimumNumberOfConnectionsPercentage = 55;
                        Name = "";
                        Type = Transition;
                    };
                    Zone3 = {
                        ColdConnectionPeriod = 60;
                        MinimumNumberOfConnectionsPercentage = 60;
                        Name = yellow;
                        PermitLimitOtherNode = Target;
                        PermitLimitUINode = Target;
                        PermitWaitTimeoutOtherNode = 300;
                        PermitWaitTimeoutUINode = 30;
                        PoolSizeRanges = {
                            AboveMaximum = { PruneImmediateDownTo = Maximum;};
                            Maximum = { PruneAmount = 1;};
                            Minimum = { PruneAmount = 0;};
                            Target = { PruneAmount = 1;};
                        };
                        Type = Regular;
                    };
                    Zone4 = {
                        MinimumNumberOfConnectionsPercentage = 66;
                        Name = "";
                        Type = Transition;
                    };
                    Zone5 = {
                        ColdConnectionPeriod = 60;
                        MinimumNumberOfConnectionsPercentage = 70;
                        Name = red;
                        PermitLimitOtherNode = Minimum;
                        PermitLimitUINode = Target;
                        PermitWaitTimeoutOtherNode = 300;
                        PermitWaitTimeoutUINode = 30;
                        PoolSizeRanges = {
                            AboveMaximum = { PruneImmediateDownTo = Target;};
                            Maximum = { PruneImmediateDownTo = Target;};
                            Minimum = { PruneAmount = 1; PruneDownToLimit = 1;};
                            Target = { PruneAmount = 1;};
                        };
                        Type = Regular;
                    };
                };
            };
            ZoneMessage = { Count = 3; Period = 10;};
        };
        Charge = {
            PaymentRequestSendMethods = {
                MessagingQueue = {
                    ACSNSendMethod = false;
                    ContactName = UserSender;
                    ERPSendMethod = true;
                    Formatter = ariba.payment.DummyPaymentFormatter;
                    PaymentMethod = ariba.payment.AribaERPPaymentMethod;
                    SendRank = 1;
                    Sender = "ariba.payment.AribaChargePaymentQueueSender";
                    UsesAsynchronousPush = false;
                    UsesDirectIntegration = false;
                };
                PSoftMessagingQueue = {
                    ACSNSendMethod = false;
                    ContactName = UserSender;
                    ERPSendMethod = true;
                    Formatter = ariba.payment.DummyPaymentFormatter;
                    PaymentMethod = "ariba.peoplesoft.common.AribaPSoftERPPaymentMethod";
                    SendRank = 1;
                    Sender = "ariba.payment.AribaChargePaymentQueueSender";
                    UsesAsynchronousPush = false;
                    UsesDirectIntegration = false;
                };
                SAPMessagingQueue = {
                    ACSNSendMethod = false;
                    ContactName = UserSender;
                    ERPSendMethod = true;
                    Formatter = ariba.sap.server.SAPInvoiceFormatter;
                    PaymentMethod = ariba.payment.AribaERPPaymentMethod;
                    SendRank = 1;
                    Sender = "ariba.payment.AribaChargePaymentQueueSender";
                    UsesAsynchronousPush = false;
                    UsesDirectIntegration = false;
                };
            };
        };
        Checkpoint = {
            FirstNodeCheckPointClasses = (
                "ariba.base.server.BaseServer$SharedTempCleanup",
                "ariba.base.meta.server.MetadataServerSupport$InitCommunity",
                "ariba.base.meta.server.MetadataServerSupport$ResetRealmStates",
                "ariba.server.jdbcserver.GlobalLockingServiceDBImpl$GlobalLockCheckPoint",
                "ariba.base.server.PersistedAssignmentManager$PersistedAssignmentInitialization",
                "ariba.integration.base.ApplicationAdapter$EventLogInitCheckPoint",
                "ariba.app.util.NotificationQueueManager$DurableEmailCleanupCheckpoint",
                "ariba.base.server.SimpleBaseServer$DRCheckpoint"
            );
        };
        ClassificationCodes = {
            ASMSharedDomainList = ( unspsc );
            CommodityCodeUIDomainImpl = "ariba.basic.core.DefaultCommodityCodeUIDomainImpl";
            SystemAllNodeUniqueName = All;
            SystemCommodityCodeDomainName = unspsc;
            UnspscAuditFile = "config/standards/unspscaudit135.csv";
        };
        Common = {
            CCS = {
                OAuth2Scope = invoicing;
                OAuthClientId = ccs-2lo-client;
                OAuthClientPrivateSecret = ccs2loclientprivate;
                OAuthClientPublicSecret = ccs2loclient;
                OAuthEnabled = true;
                OAuthGrantType = openapi_2lo;
            };
            SM = {
                OAuth2Scope = suppliermgt;
                OAuthClientId = buyer-2lo-client;
                OAuthClientPrivateSecret = buyer2loclientprivate;
                OAuthClientPublicSecret = buyer2loclient;
                OAuthEnabled = true;
            };
        };
        Contract = {
            MasterAgreement = {
                AdditionalFormulaFunctions = ( "ariba.pricing.core.CurrencyAssignmentFunction" );
                SendMethods = {
                    Email = {
                        ACSNSendMethod = false;
                        RoutingSupported = true;
                        SizeLimit = 10240;
                    };
                    Fax = {
                        ACSNSendMethod = false;
                        RoutingSupported = true;
                        SizeLimit = 10240;
                    };
                    Manual = {
                        ACSNSendMethod = false;
                        ERPSendMethod = false;
                        Formatter = ariba.contract.DummyContractFormatter;
                        RoutingSupported = true;
                        Sender = ariba.contract.AribaContractSilentSender;
                    };
                    Oracle = { Sender = ariba.contract.AribaContractSilentSender;};
                    Print = { ACSNSendMethod = false; RoutingSupported = true;};
                    URL = {
                        ACSNSendMethod = true;
                        ContactName = UserSender;
                        ERPSendMethod = false;
                        Formatter = "ariba.contract.DummyAribaNetworkContractFormatter";
                        RoutingSupported = true;
                        Sender = "ariba.contract.cxml.AribaNetworkCXMLContractSender";
                        SizeLimit = 10240;
                    };
                };
            };
        };
        Customization = {
            Packager = {
                Application = { PackageKindClassNames = ( ); PackageKinds = ( );};
                Inherit = {
                    Application = { PackageKindClassNames = ( ); PackageKinds = ( );};
                    Platform = {
                        PackageKindClassNames = (
                            "ariba.app.core.packager.parameters.InheritedParametersPackageKind",
                            "ariba.app.core.packager.aml.AMLInheritedExtensionPackageKind",
                            "ariba.app.core.packager.aml.AMLStringResourcePackageKind",
                            "ariba.app.core.packager.aml.AMLEnumerationPackageKind",
                            "ariba.app.core.packager.rule.InheritedApprovalRulePackageKind",
                            "ariba.app.core.packager.rule.InheritedApprovalRuleCSVPackageKind",
                            "ariba.eform.packager.InheritedEFormTemplatePackageKind",
                            "ariba.eform.packager.InheritedFlexMasterDataPackageKind"
                        );
                        PackageKinds = (
                            InheritedParameters,
                            AMLInheritedExtension,
                            AMLStringResource,
                            AMLEnumeration,
                            InheritedApprovalRule,
                            InheritedApprovalRuleCSV,
                            InheritedEFormTemplate,
                            InheritedFlexMasterData
                        );
                    };
                };
                Platform = {
                    PackageKindClassNames = (
                        "ariba.app.core.packager.parameters.ParametersPackageKind",
                        "ariba.app.core.packager.aml.AMLExtensionPackageKind",
                        "ariba.app.core.packager.aml.AMLStringResourcePackageKind",
                        "ariba.app.core.packager.aml.AMLEnumerationPackageKind",
                        "ariba.app.core.packager.rule.ApprovalRulePackageKind",
                        "ariba.app.core.packager.rule.ApprovalRuleCSVPackageKind",
                        "ariba.app.core.packager.data.ImportExportPackageKind",
                        "ariba.eform.packager.EFormTemplatePackageKind",
                        "ariba.eform.packager.FlexMasterDataPackageKind"
                    );
                    PackageKinds = (
                        Parameters,
                        AMLExtension,
                        AMLStringResource,
                        AMLEnumeration,
                        ApprovalRule,
                        ApprovalRuleCSV,
                        ImportExport,
                        EFormTemplate,
                        FlexMasterData
                    );
                };
            };
        };
        Database = {
            ExitOnInvalidRowSize = false;
            OraclePerformanceMetrics = "12,13,50,54,62,244,245,266,341,342,343";
        };
        DatabaseSchemas = {
            Default = {
                AutoCommit = false;
                ConnectionPermits = {
                    AribaAdmin = 30;
                    AribaEmailSender = 5;
                    AribaGlobalTaskRunner = 30;
                    AribaTaskRunner = 11;
                    AribaUI = 20;
                    CatalogAdmin = 5;
                    CatalogSearch = 5;
                    CentralConnectionManager = 1;
                    QueueManager = 30;
                    SMTPServer = 5;
                };
                Database = Transaction1;
                DatabaseConnections = 10;
                DatabaseConnectionsPrunePercentage = 50;
                LargeIndexDataFile = "";
                LargeTableDataFile = "";
                LobDataFile = "";
                MediumIndexDataFile = "";
                MediumTableDataFile = "";
                MinimumDatabaseConnections = {
                    AribaAdmin = 10;
                    AribaEmailSender = 1;
                    AribaGlobalTaskRunner = 10;
                    AribaTaskRunner = 5;
                    AribaUI = 10;
                    CatalogAdmin = 1;
                    CatalogSearch = 1;
                    CentralConnectionManager = 1;
                    QueueManager = 10;
                    SMTPServer = 1;
                };
                OpenStatements = 5;
                ReadUncommitted = false;
                SQLStatementTimeoutInSeconds = 0;
                SmallIndexDataFile = "";
                SmallTableDataFile = "";
                SupportIndexDataFile = "";
                SupportTableDataFile = "";
            };
            DefaultDatabaseSchema = Transaction.Schema1;
            DynamicCreation = {
                RealmStore = {
                    AribaDBCharset = UTF8;
                    AribaDBJDBCDriverType = H2Type;
                    AribaDBPassword = "{DESede}SN1McWsuBWVkAAGwAtBvgg==";
                    AribaDBType = h2;
                    AribaDBUsername = USER1;
                };
            };
            Generic = {
                Schema1 = {
                    AribaDBCharset = UTF8;
                    AribaDBHostname = 192.168.108.128;
                    AribaDBJDBCDriverType = hana;
                    AribaDBPassword = Prataphena2;
                    AribaDBPort = 39015;
                    AribaDBSchemaType = Transaction;
                    AribaDBServer = HXE;
                    AribaDBType = hana;
                    AribaDBUsername = USER2;
                };
            };
            Transaction = {
                Schema1 = {
                    AribaDBCharset = UTF8;
                    AribaDBHostname = 192.168.108.128;
                    AribaDBJDBCDriverType = hana;
                    AribaDBPassword = "{DESede}SN1McWsuBWVkAAGwAtBvgg==";
                    AribaDBPort = 39015;
                    AribaDBServer = HXE;
                    AribaDBType = hana;
                    AribaDBUsername = USER1;
                };
            };
        };
        Databases = {
            Transaction1 = {
                AribaDBCharset = UTF8;
                AribaDBHostname = 192.168.108.128;
                AribaDBJDBCDriverType = hana;
                AribaDBPort = 39015;
                AribaDBSchemaType = Transaction;
                AribaDBServer = HXE;
                AribaDBType = hana;
            };
        };
        Debug = {
            AWLSearchPath = "/Users/i539920/ariba/devApril/ariba/ond/buyer/dev/admin;/Users/i539920/ariba/devApril/ariba/ond/buyer/dev/mainui;/Users/i539920/ariba/devApril/ariba/ond/buyer/dev/procureui;/Users/i539920/ariba/devApril/ariba/ond/buyer/dev/paymentui;/Users/i539920/ariba/devApril/ariba/ond/buyer/dev/collaborationui;/Users/i539920/ariba/devApril/ariba/ond/buyer/dev/expenseui;/Users/i539920/ariba/devApril/ariba/ond/buyer/dev/workforceui;/Users/i539920/ariba/devApril/ariba/ond/buyer/dev/budgetui;/Users/i539920/ariba/devApril/ariba/ond/buyer/dev/contentui;/Users/i539920/ariba/devApril/ariba/ond/platform/R2/app/admin;/Users/i539920/ariba/devApril/ariba/ond/platform/R2/app/commonui;/Users/i539920/ariba/devApril/ariba/ond/platform/R2/app/coreui;/Users/i539920/ariba/devApril/ariba/ond/platform/R2/app/approvableui;/Users/i539920/ariba/devApril/ariba/ond/platform/R2/ui/fieldsui;/Users/i539920/ariba/devApril/ariba/ond/platform/R2/ui/aribaweb;/Users/i539920/ariba/devApril/ariba/ond/platform/R2/ui/widgets;/Users/i539920/ariba/devApril/ariba/ond/platform/R2/ui/baseui;";
            AppendSemanticKeyMapping = false;
            AuditJGroupsIncomingMessages = true;
            Debug = true;
            EnabledFeatures = ( all );
            ExtrinsicsReadFromDatabase = true;
            FieldProperties = "FieldName, Type, Label, Rank, Group, Controller";
            Fields = false;
            GroupProperties = All;
            Groups = false;
            I18N = true;
            IgnoreConfigJava = false;
            IgnoreNameTables = false;
            IgnoreValidation = false;
            MetaLoadFromFile = false;
            NamePrefix = true;
            PagePerfLoggingEnabled = false;
            Performance = false;
            PerformanceThresholds = {
                Default = {
                    "AQL Queries" = { Error = 20; Warning = 5;};
                    "AQL Rows Fetched" = { Error = 30000; Warning = 1000;};
                    "ClusterRoot Reconstitutions" = { Error = 200; Stable = true; Warning = 50;};
                    Commits = { Error = 10; Warning = 3;};
                    "Page Generation" = { Error = 200000; Warning = 100000;};
                    "SQL Queries" = { Error = 400; Stable = true; Warning = 100;};
                    "Thread CPU TimeMillis" = { Error = 5000; Stable = true; Warning = 2000;};
                    "Working Set" = {};
                };
            };
            ProductionTesting = true;
            QueryExecutionThresholdMilliseconds = 5000;
            QueryGenerationThresholdSQLBytes = 15000;
            ReReadFile = true;
            SMTPAddressBCC = "";
            SMTPAddressRedirect = "nobody@phoenix.ariba.com";
            ShowMultiServerMode = true;
            ShowPortletDebugInfo = true;
            SingleUser = false;
            TesterRunOnly = false;
            Timing = false;
            TranslationLoadDisabled = true;
            UseBrowserLocale = false;
            WorkflowMonitor = true;
        };
        Encryption = { EncryptionThresholdCount = 1000; KeyVaultType = DBKeyVault;};
        Expense = {
            ExpenseSendMethods = {
                MessagingQueue = {
                    ACSNSendMethod = false;
                    ERPSendMethod = false;
                    PushEventName = ExpenseReportRealTimeExport;
                    Sender = "ariba.expense.core.AribaExpenseRequestReplySender";
                };
            };
        };
        FeatureLink = {
            Enabled = true;
            FeatureLinkItem = {
                AN = {
                    Name = "13s Ariba Network";
                    Url = "http://www.ariba.com/solutions/release-notes/13sAribaNetwork-Buyers";
                };
                Buyer = {
                    Name = "13s Procurement";
                    Url = "http://www.ariba.com/solutions/release-notes/13s-procurement";
                };
                BuyerMobile = {
                    CustomDescriptionKey = RequisitionMobileMarketDescription;
                    CustomLinkKey = RequisitionMobileMarketLinkText;
                    CustomResourceTable = ariba.htmlemail;
                    Url = "http://www.ariba.com/solutions/buy/ariba-mobile";
                };
            };
        };
        FeatureToggle = {
            AdminAccessAuditLogging = rollout;
            AsyncUserGroupChangeProcessing = rollout;
            NewFavorites = rollout;
            NewsAndHelpConfiguration = rollout;
            PromotedItems = rollout;
            SwimLaneConfiguration = rollout;
            TypeAttributeConfiguration = rollout;
        };
        GenericAsyncJobs = {
            AllJobDetails = {
                ConfigurationMigration = {
                    ExecutorClassName = "com.sap.ariba.platform.configurationapi.engine.executor.ConfigMigJobExecutor";
                    JobClassName = "com.sap.ariba.platform.configurationapi.engine.ConfigMigJob";
                    TaskName = ConfigMigrationJobProcessor;
                    ThreadPoolSize = 4;
                };
            };
            GlobalJobProcessorTask = { MaxRetries = 3; TotalNoOfJobsPerRealm = 5;};
        };
        GuidedBuy = {
            FrontDoorUrl = "http://c02c813emd6m:8080/gb/";
            HomePagePath = "index.html#/";
            TokenIdentifier = gbst;
            TokenServicePath = tokens;
        };
        Help = {
            HelpAreas = ( Documentation, Support, QuickTour );
            Url = "https://svcdevss.ariba.com/Help/Main";
        };
        Inspector = {
            AdminPassword = "";
            AdminUserName = admin;
            Authenticate = false;
            BaseVectorDisplaySize = 5000;
            DataFixModuleSecurity = Admin;
            DebugPassword = "";
            DebugUserName = debug;
            Enabled = true;
            OSGiModuleSecurity = Debug;
            ObjectStatsModuleSecurity = ReadOnly;
            ReadOnlyPassword = "";
            ReadOnlyUserName = readonly;
        };
        Invoicing = {
            "ANMaxInvoiceDownloadRequestsPerInvocation" = 50;
            ANMaxInvoicesDownloadPerRequest = 10;
            AllowDuplicateInvoices = false;
            CXMLInvoicePartitionResolver = "ariba.invoicing.AribaCXMLInvoicePartitionResolver";
            CreateInvoicesPage = DirectInvoicingWizard;
            InvoiceSpecialConditions = {
                GRBased = {
                    ConditionClass = "ariba.invoicing.core.condition.GRBasedInvoiceCondition";
                    DisplayCategories = ( 1, 2, 3 );
                    DisplayRank = 5;
                    IsRegular = false;
                    Label = "@aml.InvoicingAdmin/GRBasedInvoiceSpecialCondition";
                };
                LimitOrder = {
                    ConditionClass = "ariba.invoicing.core.condition.LimitOrderInvoiceCondition";
                    DisplayCategories = ( 1, 2, 3 );
                    DisplayRank = 4;
                    IsRegular = false;
                    Label = "@aml.InvoicingAdmin/LimitOrderInvoiceSpecialCondition";
                };
                RegularContract = {
                    ConditionClass = "ariba.invoicing.core.condition.RegularContractInvoiceCondition";
                    DisplayCategories = ( 4 );
                    DisplayRank = 1;
                    IsRegular = true;
                    Label = "@aml.InvoicingAdmin/RegularContractInvoiceSpecialCondition";
                };
                RegularNonAriba = {
                    ConditionClass = "ariba.invoicing.core.condition.RegularNonAribaInvoiceCondition";
                    DisplayCategories = ( 8 );
                    DisplayRank = 2;
                    IsRegular = true;
                    Label = "@aml.InvoicingAdmin/RegularNonAribaInvoiceSpecialCondition";
                };
                RegularOrder = {
                    ConditionClass = "ariba.invoicing.core.condition.RegularOrderInvoiceCondition";
                    DisplayCategories = ( 1, 2, 3 );
                    DisplayRank = 0;
                    IsRegular = true;
                    Label = "@aml.InvoicingAdmin/RegularOrderInvoiceSpecialCondition";
                };
                RetroactiveOrder = {
                    ConditionClass = "ariba.invoicing.core.condition.RetroactiveInvoiceCondition";
                    DisplayCategories = ( 1, 2, 3 );
                    DisplayRank = 6;
                    IsRegular = true;
                    Label = "@aml.InvoicingAdmin/RetroactiveInvoiceSpecialCondition";
                };
                ServiceOrder = {
                    ConditionClass = "ariba.invoicing.core.condition.ServiceOrderInvoiceCondition";
                    DisplayCategories = ( 1, 2, 3 );
                    DisplayRank = 3;
                    IsRegular = false;
                    Label = "@aml.InvoicingAdmin/ServiceOrderInvoiceSpecialCondition";
                };
            };
            PaymentSendMethods = {
                MessagingQueue = {
                    ACSNSendMethod = false;
                    ContactName = UserSender;
                    ERPSendMethod = true;
                    Formatter = ariba.payment.DummyPaymentFormatter;
                    PaymentMethod = ariba.payment.DummyPaymentMethod;
                    Sender = ariba.payment.AribaPaymentQueueSender;
                    UsesAsynchronousPush = false;
                    UsesDirectIntegration = false;
                };
                Silent = {
                    ACSNSendMethod = false;
                    ContactName = UserSender;
                    ERPSendMethod = false;
                    Formatter = ariba.payment.DummyPaymentFormatter;
                    PaymentMethod = ariba.payment.DummyPaymentMethod;
                    Sender = ariba.payment.AribaPaymentSilentSender;
                    UsesAsynchronousPush = false;
                    UsesDirectIntegration = false;
                };
            };
            PermanentWorkFailureRetryPeriodInMinutes = 600;
            ReconcileInvoicesPage = ARPManageToDos;
            SendInvoiceReconciliationToNetwork = true;
            TotalEmailAttachmentSize = 10240;
        };
        ItemMaster = { PublishToCatalog = true;};
        J2EEServer = {
            InUse = tomcat;
            JNDI = {
                Enabled = false;
                MulticastAddress = 228.5.6.7;
                MulticastPort = 7471;
            };
        };
        Kafka = {
            InitSharedQueueService = true;
            Server = "app155.lab1.ariba.com:19092";
            Tenants = { admin = { Password = pw;}; cgroup = { Password = cgrouppw;};};
        };
        Logging = {
            AribaAdminCommitNowAuditing = {
                Categories = ( aribaAdminAuditCommitNow );
                ClassName = "ariba.app.server.AdminAuditCommitNowAppender";
                Disable = false;
                SynchronousLogging = true;
            };
            AribaAuditing = {
                Categories = ( aribaAudit );
                ClassName = ariba.app.server.AuditAppender;
                Disable = false;
                SynchronousLogging = true;
            };
            AribaCommitNowAuditing = {
                Categories = ( aribaAuditCommitNow );
                ClassName = ariba.app.server.AuditCommitNowAppender;
                Disable = false;
                SynchronousLogging = true;
            };
            Categories = (
                "catalog:INFO",
                "catalogpublish:INFO",
                "catalogArches:WARN",
                "integration.s4hana:INFO",
                "integration.sm:INFO",
                "util:INFO",
                "aprof:INFO",
                "invoiceDiagnostics:INFO",
                "general:INFO",
                "startup:INFO",
                "shutdown:INFO",
                "internodes:INFO",
                "perfLog.trace:DEBUG",
                "integrationMaster.amfBaseMaster.integrationObjectAdapter:INFO",
                "integrationMaster.alert:INFO",
                "scheduler:INFO",
                "inspectorAudit:INFO",
                "inspectorAccess:INFO",
                "aribaAudit:INFO",
                "aribaAdminAuditCommitNow:INFO",
                "aribaAuditCommitNow:INFO",
                "orderingDiagnostics:INFO",
                "perfLog.exception:INFO",
                "requisitionDiagnostics:INFO",
                "receiptLinkageDiagnostics:INFO",
                "application.procurement.budget:INFO",
                "application.procurement.payment:INFO",
                "application.procurement.receiving:INFO",
                "cXML.document:INFO",
                "application.cxml:INFO",
                "application.procurement.contract:INFO",
                "application.autoGeneratePRFromContract:DEBUG",
                "cXML.reliableDeliveryService:INFO",
                "integrationMaster.httpChannelMaster:INFO",
                "integrationMaster.fileChannelMaster:INFO",
                "backplane.pq:INFO",
                "transaction:INFO",
                "integrationMaster.cds:INFO",
                "data.repairer:INFO",
                "ccm:INFO",
                "maf:DEBUG",
                "mds:INFO",
                "mdsSearch:INFO",
                "globalLock:INFO",
                "appIntegrate.dataLoad:INFO",
                "sqlCollector:INFO",
                "applicationReporting:INFO",
                "clusterTransition:INFO",
                "realmEncryption:INFO",
                "dualdb:DEBUG",
                "switchschema:DEBUG",
                "base.event:WARN",
                "security.tls:INFO",
                "suppressInvalidateBaseId:INFO",
                "lazyload:WARNING",
                "copyCRAF:ERROR",
                "rta:INFO",
                "rta.metrics:INFO",
                "rta.provisioning.util:INFO",
                "cgroupsPacketMultiMapDetails:INFO",
                "securityEncryption:INFO",
                "purgeArchiveMaster.purgeMaster.purge:INFO",
                "keyVault:INFO",
                "gbaasClient:DEBUG",
                "gbaas:DEBUG",
                "portablerealms:INFO",
                "fileFortification:INFO",
                "fieldValidationTimeSummary:INFO",
                "email.apputil:INFO",
                "email.client:INFO",
                "email.server:INFO",
                "realmreplicate.apputil:INFO",
                "asyncRequestProcessing:INFO",
                "securityLogs:INFO",
                "aribawebexec.elementId:INFO",
                "user:INFO",
                "reportingDataApi:INFO",
                "rulesDiagnostics:INFO",
                "rulesEngine:INFO",
                "approvablePrint:DEBUG",
                "svcMgt:INFO",
                "parameterapi:INFO",
                "configurationapi:INFO",
                "configMigration:INFO",
                "masterdata:INFO",
                "osgi:INFO",
                "parameters:INFO",
                "meta.dynamicField:INFO",
                "archesClientRecorder:INFO",
                "archesClientSimulator:INFO",
                "scheduler.upgradetask:INFO",
                "backplane.ims:INFO",
                "expression:INFO",
                "exprDependency:WARN",
                "log.settings:INFO",
                "dashboardMigration:INFO",
                "dashboardContentUpdate:INFO",
                "portlet:INFO",
                "noderedirect:INFO",
                "nodeselector:INFO",
                "nodeassignment:INFO",
                "realmPurge:INFO",
                "guidedbuying:INFO",
                "integrationMaster.wsChannelMaster:INFO",
                "catalog:ERROR",
                "email.apputil:ERROR",
                "email.client:ERROR",
                "email.server:ERROR",
                "testharness.parallelization:ERROR",
                "scheduler.upgradetask:ERROR",
                "application.invoicing.cxmlInvoiceLoading:INFO",
                "form.eform:INFO"
            );
            Console = {
                Categories = (
                    catalog,
                    integration.s4hana,
                    util,
                    aprof,
                    general,
                    internodes,
                    scheduler,
                    integrationMaster.alert,
                    perfLog.exception,
                    cXML.reliableDeliveryService,
                    integrationMaster.httpChannelMaster,
                    integrationMaster.fileChannelMaster,
                    backplane.pq,
                    integrationMaster.cds,
                    data.repairer,
                    maf,
                    mds,
                    mdsSearch,
                    globalLock,
                    appIntegrate.dataLoad,
                    gbaasClient,
                    gbaas,
                    rta.provisioning.util,
                    fileFortification,
                    email.apputil,
                    email.client,
                    email.server,
                    realmreplicate.apputil,
                    asyncRequestProcessing,
                    securityLogs,
                    aribawebexec.elementId,
                    reportingDataApi,
                    rulesEngine,
                    approvablePrint,
                    svcMgt,
                    parameterapi,
                    configurationapi,
                    configMigration,
                    masterdata,
                    parameters,
                    meta.dynamicField,
                    archesClientRecorder,
                    archesClientSimulator,
                    scheduler.upgradetask,
                    backplane.ims,
                    expression,
                    exprDependency,
                    log.settings,
                    dashboardMigration,
                    dashboardContentUpdate,
                    portlet,
                    realmPurge,
                    integrationMaster.wsChannelMaster,
                    application.invoicing.cxmlInvoiceLoading,
                    form.eform
                );
                Disable = false;
                WarningLogHandler = true;
            };
            DatabaseLog = {
                Categories = ( audit );
                ClassName = ariba.base.server.DatabaseAppender;
                Disable = true;
                EventsPerTransaction = 1;
            };
            Encoding = UTF-8;
            InspectorAuditFile = {
                Categories = ( inspectorAudit, inspector, inspectorAccess );
                ClassName = ariba.util.log.ArchivingAppender;
                Disable = false;
                File = InspectorAuditLog.txt;
            };
            J2EELogger = {
                Categories = ( util, general );
                ClassName = ariba.server.util.J2EELogAppender;
                Disable = false;
                LogName = Buyer;
            };
            LocaleForLogMessages = en_US;
            MainLogFile = {
                Categories = (
                    catalog,
                    catalogpublish,
                    integration.s4hana,
                    integration.sm,
                    util,
                    aprof,
                    startup,
                    shutdown,
                    general,
                    internodes,
                    "integrationMaster.amfBaseMaster.integrationObjectAdapter",
                    scheduler,
                    integrationMaster.alert,
                    perfLog.exception,
                    invoiceDiagnostics,
                    orderingDiagnostics,
                    requisitionDiagnostics,
                    receiptLinkageDiagnostics,
                    application.procurement.budget,
                    application.procurement.payment,
                    application.procurement.receiving,
                    cXML.document,
                    application.cxml,
                    application.procurement.contract,
                    application.autoGeneratePRFromContract,
                    cXML.reliableDeliveryService,
                    integrationMaster.httpChannelMaster,
                    integrationMaster.fileChannelMaster,
                    backplane.pq,
                    transaction,
                    integrationMaster.cds,
                    data.repairer,
                    maf,
                    mds,
                    mdsSearch,
                    globalLock,
                    appIntegrate.dataLoad,
                    realmEncryption,
                    dualdb,
                    switchschema,
                    base.event,
                    security.tls,
                    suppressInvalidateBaseId,
                    lazyload,
                    copyCRAF,
                    rta.provisioning.util,
                    securityEncryption,
                    keyVault,
                    gbaasClient,
                    gbaas,
                    purgeArchiveMaster.purgeMaster.purge,
                    portablerealms,
                    fileFortification,
                    fieldValidationTimeSummary,
                    email.apputil,
                    email.client,
                    email.server,
                    realmreplicate.apputil,
                    asyncRequestProcessing,
                    securityLogs,
                    aribawebexec.elementId,
                    user,
                    reportingDataApi,
                    rulesDiagnostics,
                    rulesEngine,
                    approvablePrint,
                    svcMgt,
                    parameterapi,
                    configurationapi,
                    configMigration,
                    masterdata,
                    osgi,
                    parameters,
                    meta.dynamicField,
                    archesClientRecorder,
                    archesClientSimulator,
                    scheduler.upgradetask,
                    backplane.ims,
                    expression,
                    exprDependency,
                    log.settings,
                    dashboardMigration,
                    dashboardContentUpdate,
                    portlet,
                    guidedbuying,
                    nodeassignment,
                    nodeselector,
                    noderedirect,
                    realmPurge,
                    integrationMaster.wsChannelMaster,
                    application.invoicing.cxmlInvoiceLoading,
                    form.eform
                );
                Disable = false;
                WarningLogHandler = true;
            };
            MappingLog = {
                Categories = ( aribaMappingException );
                ClassName = "ariba.server.ormsserver.NotificationAppender";
                Disable = true;
                PermissionGroup = CatalogManager;
                TitleStringKey = ImportMappingFailureTitle;
                TitleStringTable = ariba.common.core.validator;
            };
            NTServiceLogging = {
                Categories = ( startup, util );
                ClassName = "ariba.server.ntloggingserver.client.NTLogAppender";
                Disable = true;
                NTLogListenerHost = localhost;
                NTLogListenerPort = 8093;
            };
            SQLCollectorFile = {
                Categories = ( sqlCollector );
                ClassName = ariba.util.log.RollingLogFileAppender;
                Disable = false;
                File = SQLCollectorLog.1;
            };
            SQLLoggingInitialValue = true;
            SupplierDMLog = {
                Categories = ( supplierdm );
                ClassName = ariba.util.log.ArchivingAppender;
                Disable = true;
                File = SupplierDMLog.txt;
            };
            Suppression = { Suppressors = { 201 = ( jdbc, 300 );};};
        };
        Messaging = {
            ChangeNotificationsEnabled = true;
            Channels = {
                CXML = {
                    AttachmentService = { ClassName = ariba.cxml.service.FileAttachmentService;};
                    DecodeService = {
                        BaseDecodeTemplate = CXMLBaseDecodeTemplate;
                        PackageName = ariba.channel.cxml;
                        ResourceDirectory = (
                            "config/cXML",
                            "ariba/cXML/template",
                            "ariba/resource/global"
                        );
                        TextDeclarationReaders = ( ariba.cxml.UTF8DeclarationReader );
                        Validation = true;
                    };
                    Decoders = {
                        CXMLChannelDecoder = {
                            Parameters = {
                                ClassName = ariba.integration.util.DecoderImpl;
                            };
                            factoryClass = "ariba.integration.util.DecoderFactoryImpl";
                        };
                    };
                    DirectoryService = {
                        ClassName = "ariba.cxml.base.client.DirectoryServiceImpl";
                        ProfileEntryClassName = ariba.cxml.client.ProfileEntry;
                        ProfileFile = "ariba/cXML/SharedServicesProfileMap.xml";
                        ProfileRequestCallbackHandlerClasses = (
                            "ariba.server.ormsserver.ProfileRequestCallbackHandler"
                        );
                    };
                    DocumentService = {
                        DeploymentMode = test;
                        Encoding = UTF-8;
                        XMLLang = en-US;
                        XMLVersion = 1.0;
                    };
                    EncodeService = {
                        BaseEncodeTemplate = CXMLBaseEncodeTemplate;
                        PackageName = ariba.channel.cxml;
                        ResourceDirectory = (
                            "config/cXML",
                            "ariba/cXML/template",
                            "ariba/resource/global"
                        );
                    };
                    PersistenceService = {
                        ClassName = "ariba.cxml.base.client.PersistenceServiceImpl";
                    };
                    ProfileCacheService = {
                        ErrorResponseExpirationInSeconds = 20;
                        ExpirationInDays = 1;
                    };
                    PunchOutService = {
                        SessionStore = "ariba.cxml.base.core.BasePunchOutSessionStore";
                    };
                    ReliableDeliveryService = {
                        DaysAgoForQueueRebuild = 5;
                        LatestMinutesAgoForQueueRebuild = 20;
                        MaxDeliveryAttempts = 1;
                        ReQueueElapseTime = 20;
                        TimeBetweenDeliveryAttempts = 1;
                    };
                    StartupClass = ariba.cxml.base.Channel;
                    TransportService = {
                        ProtocolImplementation = ariba.channel.http.HTTPTransport;
                        TransportName = CXMLChannel;
                    };
                };
                File = {
                    Decoders = {
                        FileChannelDecoder = {
                            Parameters = {
                                ClassName = ariba.integration.util.DecoderImpl;
                            };
                            factoryClass = "ariba.integration.util.DecoderFactoryImpl";
                        };
                        SimpleDecoder = {
                            Parameters = {
                                ClassName = ariba.integration.util.SimpleDecoder;
                            };
                            factoryClass = "ariba.integration.util.DecoderFactoryImpl";
                        };
                    };
                    EnableFileUpload = true;
                    Encoders = {
                        FileChannelEncoder = {
                            Parameters = { ClassName = ariba.channel.file.FileEncoder;};
                            factoryClass = "ariba.integration.util.EncoderFactoryImpl";
                        };
                    };
                    FileReaders = {
                        CCSV = "ariba.server.ormsserver.CachingCSVFileReader";
                        CSV = ariba.channel.io.CSVFileReader;
                        SOAP = ariba.channel.ws.DocumentReader;
                        SUPPLIER = ariba.channel.io.SupplierFileReader;
                        XLS = ariba.channel.io.ExcelFileReader;
                    };
                    FileWriters = {
                        CSV = ariba.channel.io.CSVFileWriter;
                        SOAP = ariba.channel.ws.DocumentWriter;
                        XLS = ariba.channel.file.io.ExcelFileWriter;
                    };
                    Formatters = {
                        AbsoluteAmountFormatter = "ariba.integration.util.formatter.AbsoluteAmountFormatter";
                        AmountFormatter = "ariba.integration.util.formatter.AmountFormatter";
                        BigDecimalFormatter = ariba.util.formatter.BigDecimalFormatter;
                        BudgetStatusFormatter = "ariba.htmlui.procure.BooleanOpenCloseFormatter";
                        CommaSeparatedStringFormatter = "ariba.integration.util.CommaSeparatedStringFormatter";
                        ConcatFormatter = "ariba.integration.util.formatter.ConcatFormatter";
                        ContractHierarchicalTypeFormatter = "ariba.contract.core.ContractHierarchicalTypeFormatter";
                        ContractLimitTypeFormatter = "ariba.contract.core.ContractLimitTypeFormatter";
                        ContractReleaseTypeFormatter = "ariba.contract.core.ContractReleaseTypeFormatter";
                        ContractTermTypeFormatter = "ariba.contract.core.ContractTermTypeFormatter";
                        DataSourceExternalFormatter = "ariba.invoicing.core.DataSourceExternalFormatter";
                        EmptyStringFormatter = "ariba.invoicing.core.EmptyStringFormatter";
                        IntegrationBooleanFormatter = "ariba.integration.util.formatter.SimpleBooleanFormatter";
                        IntegrationDateFormatter = "ariba.integration.util.formatter.FormatterDateLenient";
                        InvoicePurposeFormatter = "ariba.invoicing.core.InvoicePurposeFormatter";
                        ListToStringFormatter = "ariba.integration.util.formatter.ListToStringFormatter";
                        LowerCaseStringFormatter = "ariba.util.formatter.LowerCaseStringFormatter";
                        POCloseStatusFormatter = ariba.sap.core.SAPPOCloseStatusFormatter;
                        ParameterizedDateFormatter = "ariba.integration.util.formatter.ParameterizedDateFormatter";
                        ParameterizedDateFormatterLenient = "ariba.contract.core.ParameterizedDateFormatterLenient";
                        PaymentLineTypeFormatter = "ariba.payment.core.PaymentLineTypeFormatter";
                        ReceivingTypeFormatter = "ariba.receiving.core.ReceivingTypeFormatter";
                        RegexpReplaceFormatter = "ariba.integration.util.formatter.RegexpReplaceFormatter";
                        RoundFormatter = "ariba.integration.util.formatter.RoundFormatter";
                        SimpleBigDecimalFormatter = "ariba.generic.server.SimpleBigDecimalFormatter";
                        SubstringFormatter = "ariba.integration.util.formatter.SubstringFormatter";
                        TranslateFormatter = "ariba.integration.util.formatter.TranslateFormatter";
                        UpperCaseStringFormatter = "ariba.integration.util.formatter.UpperCaseStringFormatter";
                        UserDelegationDateFormatter = "ariba.user.formatter.UserDelegationDateFormatter";
                    };
                    MarkedForDeleteMapMaxSize = 160000;
                    RowBatchSize = 10000;
                    StartupClass = ariba.channel.file.FileChannel;
                };
                HTTP = {
                    Authentication = { AuthType = Default; DisableCookies = true;};
                    Decoders = {
                        HTTPChannelDecoder = {
                            Parameters = {
                                ClassName = ariba.integration.util.DecoderImpl;
                            };
                            factoryClass = "ariba.integration.util.DecoderFactoryImpl";
                        };
                        SPCDecoder = {
                            Parameters = {
                                ClassName = ariba.integration.remote.SPCDecoder;
                            };
                            factoryClass = "ariba.integration.util.DecoderFactoryImpl";
                        };
                    };
                    Encoders = {
                        HTTPChannelEncoder = {
                            Parameters = {
                                ClassName = ariba.integration.util.EncoderImpl;
                            };
                            factoryClass = "ariba.integration.util.EncoderFactoryImpl";
                        };
                        SPCEncoder = {
                            Parameters = {
                                ClassName = ariba.integration.remote.SPCEncoder;
                            };
                            factoryClass = "ariba.integration.util.EncoderFactoryImpl";
                        };
                    };
                    Formatters = {
                        CommaSeparatedStringFormatter = "ariba.integration.util.CommaSeparatedStringFormatter";
                    };
                    Readers = { Default = ariba.channel.io.TableStreamReader;};
                    StartupClass = ariba.channel.http.HTTPChannel;
                    Writers = { Default = ariba.channel.io.TableStreamWriter;};
                };
                WS = {
                    CIG = {
                        DefaultDataCenter = Primary;
                        FallbackDataCenter = Secondary;
                    };
                    CIGAsyncOutboundURL = "https://acig.ariba.com/cxf/receiveP2PDoc";
                    CIGAsyncOutboundURLTest = "https://testacig.ariba.com/cxf/receiveP2PDoc";
                    CIGDataSyncURL = "https://acig.ariba.com/http/datasync";
                    CIGDataSyncURLTest = "https://testacig.ariba.com/http/datasync";
                    CIGHttpAuthUniqueName = P000263;
                    CIGInboundCertificateContent = "-----BEGIN CERTIFICATE-----MIIGxTCCBa2gAwIBAgIQCImQhPnsgKIEG4X2DCdZADANBgkqhkiG9w0BAQsFADBEMQswCQYDVQQGEwJVUzEVMBMGA1UEChMMRGlnaUNlcnQgSW5jMR4wHAYDVQQDExVEaWdpQ2VydCBHbG9iYWwgQ0EgRzIwHhcNMTgwMjE1MDAwMDAwWhcNMjAwMjE2MTIwMDAwWjCBgzELMAkGA1UEBhMCREUxETAPBgNVBAcTCFdhbGxkb3JmMQ8wDQYDVQQKEwZTQVAgU0UxHDAaBgNVBAsTE1NBUCBUcnVzdCBDb21tdW5pdHkxMjAwBgNVBAMTKWUwMzk3LWlmbG1hcC5oY2lzYnQuZXUxLmhhbmEub25kZW1hbmQuY29tMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAqOKk5SADsCWp7Vq9VqsCyQqZu7dka7vQlFIIG53ry3HOAQ1lQ/QTd0/xe4/mXKNMwIuL8tHYCmCvOgUL96T1xGIicx/+tznFBdl0AoGYQbAuwppq6rYa9+u/61Wonxf/uPXPkvtYzGfBLCKe1TtqYVsvxzSxwJxQNoLGVwfQN511yEjAx2v6fyBuHRIEHlrBB+ob2UDc4GEh8/zF/ZSnGcR/2r5WXXQO6VVJDB+ayxkQ0Iip8T4UQxkYero0zykF4DMFfp5HcZbwqS390FeVcAzHtcEvRaOjJHms3Q8rrKRLizNCYzyJOuk24r2PnjcsdgcxxUvbpsjfNFcS/ziTQwIDAQABo4IDcTCCA20wHwYDVR0jBBgwFoAUJG4rLdBqklFRJWkBqppHponnQCAwHQYDVR0OBBYEFMi1CS4DDdfl0RC8f9BShQcnoDu0MDQGA1UdEQQtMCuCKWUwMzk3LWlmbG1hcC5oY2lzYnQuZXUxLmhhbmEub25kZW1hbmQuY29tMA4GA1UdDwEB/wQEAwIFoDAdBgNVHSUEFjAUBggrBgEFBQcDAQYIKwYBBQUHAwIwdwYDVR0fBHAwbjA1oDOgMYYvaHR0cDovL2NybDMuZGlnaWNlcnQuY29tL0RpZ2lDZXJ0R2xvYmFsQ0FHMi5jcmwwNaAzoDGGL2h0dHA6Ly9jcmw0LmRpZ2ljZXJ0LmNvbS9EaWdpQ2VydEdsb2JhbENBRzIuY3JsMEwGA1UdIARFMEMwNwYJYIZIAYb9bAEBMCowKAYIKwYBBQUHAgEWHGh0dHBzOi8vd3d3LmRpZ2ljZXJ0LmNvbS9DUFMwCAYGZ4EMAQICMHQGCCsGAQUFBwEBBGgwZjAkBggrBgEFBQcwAYYYaHR0cDovL29jc3AuZGlnaWNlcnQuY29tMD4GCCsGAQUFBzAChjJodHRwOi8vY2FjZXJ0cy5kaWdpY2VydC5jb20vRGlnaUNlcnRHbG9iYWxDQUcyLmNydDAJBgNVHRMEAjAAMIIBfAYKKwYBBAHWeQIEAgSCAWwEggFoAWYAdQCkuQmQtBhYFIe7E6LMZ3AKPDWYBPkb37jjd80OyA3cEAAAAWGYYur7AAAEAwBGMEQCIB3DSGiSpF9/HPIMOxZORLGoa/Odn5VzScMqgBgbbAejAiAeq8kWlghbPewSk8+XaLyV3EVkaAEMsr5IG79IxXewDAB2AId1v+dZfPiMQ5lfvfNu/1aNR1Y2/0q1YMG06v9eoIMPAAABYZhi6zUAAAQDAEcwRQIhAPpKVu+phtr0O4u99CAvYdUHgnu5IX2ih0ehV6U9FbH5AiB09oeTdgtsklRldyoxmvP/Ni0nMUiDZ+Ch0ZiFtZActQB1ALvZ37wfinG1k5Qjl6qSe0c4V5UKq1LoGpCWZDaOHtGFAAABYZhi68cAAAQDAEYwRAIgUWe6P2tMDmH3a4oFyFjZK+QVy+8FlNqByx/3sARdUNYCIFyPA+//RTWD5DJusm7H3gIlTOSG8vxTlUQk7JDwWPkhMA0GCSqGSIb3DQEBCwUAA4IBAQCb3TEbBgnw7EtyAlUQdZ0PD2c7jJFw6TAlZWQiDs1aT+9odQ8Niu4nzShPaDN182GdWbQuQh4P8gEeg6zlobvWRDUC3wX1CkmQtRARxrQXsyoT72+dA1TM99b+EGloGTgreBI25hEBsVT+jYve8cTh0Zorno5gT8RhCovVMxOQqOhb25HP75NKzDgK+5pINheh0VnCYeGG24Xs78JDOzv4UbtLRB9lY/bimAOyzKwBtywXM1g/TlP4z0X6jJvMDK8mz/ofw/3sCsFFhNyvOlDFBNynbXLi7FWkeLGIrrfVzXm6lbOK5RONvNi0/CwNDdeFIFO8Q29pbaJ7alpqWEEt-----END CERTIFICATE-----";
                    CIGInboundCertificatePath = "lib/certs/CIG-Prod.txt";
                    CIGInboundCertificatePathTest = "lib/certs/CIG-Test.txt";
                    CIGOdataOutboundURL = "https://acig.ariba.com/http/syncOdata";
                    CIGOdataOutboundURLTest = "https://testacig.ariba.com/http/syncOdata";
                    CIGOutboundURL = "https://acig.ariba.com/cxf/receiveP2PSyncDoc";
                    CIGOutboundURLTest = "https://testacig.ariba.com/cxf/receiveP2PSyncDoc";
                    CIGPrivacyURL = "http://www.ariba.com/legal/ariba_privacy_statement.cfm";
                    CIGSamlACSURL = "https://integration.ariba.com/?saml2idp=https://s1.ariba.com";
                    CIGTermsURL = "http://www.ariba.com/legal/ariba_security_policy.cfm";
                    Decoders = {
                        WSChannelDecoder = {
                            Parameters = {
                                ClassName = ariba.channel.ws.WSChannelDecoder;
                            };
                            factoryClass = "ariba.integration.util.DecoderFactoryImpl";
                        };
                    };
                    EnableFileUpload = true;
                    Encoders = {
                        WSChannelEncoder = {
                            Parameters = {
                                ClassName = ariba.channel.ws.WSChannelEncoder;
                            };
                            factoryClass = "ariba.integration.util.EncoderFactoryImpl";
                        };
                    };
                    FileReaders = { SOAP = ariba.channel.ws.DocumentReader;};
                    FileWriters = { SOAP = ariba.channel.ws.DocumentWriter;};
                    Formatters = {
                        AbsoluteAmountFormatter = "ariba.integration.util.formatter.AbsoluteAmountFormatter";
                        AmountFormatter = "ariba.integration.util.formatter.AmountFormatter";
                        BigDecimalFormatter = ariba.util.formatter.BigDecimalFormatter;
                        CommaSeparatedStringFormatter = "ariba.integration.util.CommaSeparatedStringFormatter";
                        IntegrationBooleanFormatter = "ariba.integration.util.formatter.SimpleBooleanFormatter";
                        IntegrationDateFormatter = "ariba.integration.util.formatter.FormatterDateISO";
                        LowerCaseStringFormatter = "ariba.util.formatter.LowerCaseStringFormatter";
                        POCloseStatusFormatter = ariba.sap.core.SAPPOCloseStatusFormatter;
                        ParameterizedDateFormatter = "ariba.integration.util.formatter.ParameterizedDateFormatter";
                        PaymentLineTypeFormatter = "ariba.payment.core.PaymentLineTypeFormatter";
                        ReceivingTypeFormatter = "ariba.receiving.core.ReceivingTypeFormatter";
                        RegexpReplaceFormatter = "ariba.integration.util.formatter.RegexpReplaceFormatter";
                        RoundFormatter = "ariba.integration.util.formatter.RoundFormatter";
                        SubstringFormatter = "ariba.integration.util.formatter.SubstringFormatter";
                        TranslateFormatter = "ariba.integration.util.formatter.TranslateFormatter";
                    };
                    NamespaceIdentifier = Ariba;
                    OAuth = {
                        NativeIntegrationClientID = buyer-2lo-client;
                        NativeIntegrationPrivateSecret = buyer2loclientprivate;
                        NativeIntegrationScope = erpnativeintgsvc;
                        NativeIntegrationSecret = buyer2loclient;
                        OpenAPIClientID = amf-2lo-client;
                        OpenAPIPrivateSecret = privateamf2lo1;
                        OpenAPIScope = outboundsvc-tax;
                        OpenAPISecret = amf2lo1;
                    };
                    StartupClass = ariba.channel.ws.WSChannel;
                };
                WSEnum = {
                    Encoders = {
                        WSEnumChannelEncoder = {
                            Parameters = {
                                ClassName = "ariba.channel.convapi.WSEnumChannelEncoder";
                            };
                            factoryClass = "ariba.integration.util.EncoderFactoryImpl";
                        };
                    };
                    StartupClass = ariba.channel.convapi.WSEnumChannel;
                };
            };
            ClientEventMapFileName = "ariba/variants/Plain/messages/ClientEventNameMap.table";
            ConnectionReadTimeOut = 600;
            Integration = {
                ByPassServerObjectCacheForTopics = ( PaymentExport, PurchaseOrderSSExport );
                EnableNativeIntegrationForObjects = (
                    "ariba.core.PurchaseGroup:PurchaseGroupPull:Load And Delete",
                    "ariba.core.PurchaseOrg:PurchaseOrgPull:Load And Delete",
                    "ariba.tax.core.TaxCode:TaxCodePull:Load And Delete",
                    "ariba.core.ItemCategory:ItemCategoryPull:Load And Delete",
                    "ariba.basic.core.CurrencyConversionRate:CurrencyConversionRatePull:Load And Delete",
                    "ariba.core.AccountCategory:AccountCategoryPull:Load And Delete",
                    "ariba.core.Region:RegionPull:Load And Delete",
                    "ariba.core.CostCenter:CostCenterPull:Load And Delete",
                    "ariba.common.core.IncoTerms:IncoTermsPull:Load And Delete",
                    "ariba.core.WBSElement:WBSElementPull:Load And Delete",
                    "ariba.core.InternalOrder:InternalOrderPull:Load And Delete",
                    "ariba.base.core.SimpleMapEntry:CurrencyMapPull:Load And Delete",
                    "ariba.base.core.SimpleMapEntry:UnitOfMeasureMapPull:Load And Delete",
                    "ariba.common.core.PartitionedCommodityCode:PartitionedCommodityCodePull:Load And Delete",
                    "ariba.core.CompanyCode:CompanyCodePull:Load And Delete",
                    "ariba.core.GeneralLedger:GeneralLedgerPull:Load And Delete",
                    "ariba.core.PlantPurchaseOrgCombo:PlantPurchaseOrgComboPull:Load And Delete",
                    "ariba.common.core.Address:PlantPull:Load And Delete",
                    "ariba.payment.core.PaymentMethodType:PaymentMethodTypePull:Load And Delete",
                    "ariba.common.core.User:UserConsolidatedPull:Load And Delete"
                );
                IntegrationService = {
                    MigrationEvents = {
                        File = (
                            UserConsolidatedPull,
                            ConsolidatedGroupPull,
                            SupplierConsolidatedPull,
                            SupplierLocationConsolidatedPull,
                            PurchaseOrgSupplierComboPull,
                            AssetPull,
                            CostCenterPull,
                            CostCenterLanguagePull,
                            CompanyCodeIOComboPull,
                            InternalOrderPull,
                            GeneralLedgerPull,
                            GeneralLedgerLanguagePull,
                            CompanyCodeWBSComboPull,
                            WBSElementPull,
                            PlantPull,
                            PurchaseOrgPull,
                            PlantPurchaseOrgComboPull,
                            CompanyCodePull,
                            PurchaseGroupPull,
                            AccountCategoryPull,
                            AccountCategoryLanguagePull,
                            AccCategoryFieldStatusComboPull,
                            PartitionedCommodityCodePull,
                            PartitionedCommodityCodeLanguagePull,
                            PaymentTermsConsolidatedPull,
                            PaymentTermsLanguagePull,
                            TaxCodePull,
                            TaxCodeLanguagePull,
                            CurrencyConversionRatePull,
                            RemittanceLocationConsolidatedPull
                        );
                    };
                    TypeMap = { ariba.util.core.Date = java.util.Date;};
                };
                LazyLoadIntegrationEvents = false;
                MDNIQueryName = mdni;
                PreLoadIntegrationEvents = ( );
                UseCachedReaderForTopics = ( BudgetCSVLoad );
                UseDefaultNameSpaceForTopics = ( IRTaxServiceExport, TaxServiceExport );
            };
            MessageConfigurationSpecificationFactory = "ariba.integration.base.PersistentMessageConfigurationSpecificationFactory";
            MessageDefinitionSpecificationFactory = "ariba.integration.base.PersistentMessageDefinitionSpecificationFactory";
            SPCObjectCreateOrder = (
                ariba.basic.core.Country,
                ariba.basic.core.Address,
                ariba.basic.core.UnitOfMeasure,
                ariba.basic.core.Currency,
                ariba.basic.core.CurrencyConversionRate,
                "ariba.basic.core.ClassificationCodeDomainMeta",
                ariba.basic.core.CommodityCode,
                ariba.basic.core.ClassificationCodeMap,
                ariba.user.core.Permission,
                ariba.user.core.Role,
                ariba.user.core.Organization,
                ariba.user.core.User,
                ariba.user.core.Group
            );
        };
        Metrics = {
            Class = { Enabled = false; UpdateInterval = 900;};
            Config = SS;
            RPC = { Enabled = false; UpdateInterval = 900;};
            StatsD = {
                BuyerMetricsNamePrefix = buyer_8dx_;
                Enabled = false;
                PlatformMetricsNamePrefix = buyer_8dx_;
            };
            System = { Enabled = true; UpdateInterval = 120;};
        };
        Migration = { SchemeRuleMigrationSupport = false;};
        Mobile = {
            AuthServerURL = "http://c02c813emd6m:8050/Buyer/v1/oauth";
            Client = {
                Android = {
                    Buyer = {
                        CurrentVersion = 1.0.0;
                        GcmApiKey = developer-change-this;
                        MinimumVersion = 1.0.0;
                    };
                };
                IOS = {
                    Buyer = { CurrentVersion = 1.0.0; MinimumVersion = 1.0.0;};
                };
            };
            HostURL = "http://app1379.lab1.ariba.com:13130";
            LoginDirectActionName = mobileLoginPage;
            MobileAPIPassword = privateariba1;
            MobileAPIUser = mobile-client;
            MobileClientBootstrapData = "[{'clientId': 'mobile-client', 'secret':'ariba1', 'expireDuration':1440, 'useRefreshTokens':true, 'scopes':['read','write','query']}]";
            MobileLoginUserAgent = "AribaBuyerMobileNativeApp,SAPAribaProcurementApp";
            MobileResourceServerBootstrapData = "[{'key': 'aribamobile-buyer', 'secret':'mobile-secret'}]";
            ResourceServerKey = aribamobile-buyer;
            ResourceServerSecret = mobile-secret;
            SAPAribaProcurementAppClientId = procurement-mobile-client;
            SAPAribaProcurementAppSecret = PrivateSAPAribaProcurementBuild1;
            TermsOfUsePath = "ariba/resource/{locale}/templates/mobile-backend-tou.htm";
            TermsOfUseVersion = 3;
        };
        NodeManagers = {
            Cluster = {
                ClusterGroups = {
                    QueueBasedTransportReceiverThreads = 1;
                    QueueBasedTransportSenderThreads = 1;
                    Queues = (
                        {
                            TransportHandlerClass = "ariba.cluster.transport.handler.ClusterQueueHandler";
                            name = Cluster;
                        }
                    );
                };
                DisableMultiNode = true;
                JGroups = {
                    FD = { max_tries = 2; shun = true; timeout = 45000;};
                    FD_SOCK = {};
                    FRAG = { frag_size = 8192;};
                    MERGE2 = { max_interval = 10000; min_interval = 5000;};
                    PING = { timeout = 2000;};
                    Protocols = (
                        UDP,
                        ariba.util.nodemanager.UniqueID,
                        PING,
                        MERGE2,
                        FD_SOCK,
                        FD,
                        VERIFY_SUSPECT,
                        pbcast.NAKACK,
                        UNICAST,
                        pbcast.STABLE,
                        FRAG,
                        "ariba.util.nodemanager.AddressNodeMapping",
                        pbcast.GMS
                    );
                    UDP = {
                        discard_incompatible_packets = true;
                        enable_bundling = false;
                        enable_diagnostics = false;
                        ip_mcast = true;
                        ip_ttl = 1;
                        loopback = false;
                        mcast_port = 7489;
                        mcast_recv_buf_size = 1000000;
                        mcast_send_buf_size = 640000;
                        receive_on_all_interfaces = true;
                        tos = 16;
                        ucast_recv_buf_size = 1000000;
                        ucast_send_buf_size = 640000;
                        use_incoming_packet_handler = true;
                        use_outgoing_packet_handler = true;
                    };
                    UNICAST = { timeout = "300,600,1200,2400,3600";};
                    VERIFY_SUSPECT = { timeout = 1500;};
                    "ariba.util.nodemanager.AddressNodeMapping" = {};
                    ariba.util.nodemanager.UniqueID = {};
                    pbcast.GMS = {
                        join_timeout = 15000;
                        leave_timeout = 15000;
                        print_local_addr = false;
                        shun = true;
                        view_ack_collection_timeout = 5000;
                    };
                    pbcast.NAKACK = {
                        discard_delivered_msgs = true;
                        gc_lag = 10;
                        retransmit_timeout = "100,200,300,600,1200,2400,4800";
                        use_mcast_xmit = false;
                    };
                    pbcast.STABLE = {
                        desired_avg_gossip = 50000;
                        max_bytes = 512000;
                        stability_delay = 1000;
                    };
                };
                SharedQueuingService = {
                    Kafka = {
                        KafkaClusterPartition = 10;
                        KafkaClusterReplication = 1;
                        KafkaCommunityReplication = 1;
                        KafkaConsumerPollTimeout = 500;
                        KafkaLogRetentionInMilliseconds = 120000;
                        KafkaMaxPollRecords = 25;
                        ProducerAcks = 0;
                        SeekToLatestOffset = true;
                    };
                };
            };
            Community = {
                ClusterGroups = {
                    QueueBasedTransportReceiverThreads = 1;
                    QueueBasedTransportSenderThreads = 1;
                    Queues = (
                        {
                            TransportHandlerClass = "ariba.cluster.transport.handler.CommunityQueueHandler";
                            name = Community;
                        }
                    );
                };
                JGroups = {
                    FD = { max_tries = 2; shun = true; timeout = 45000;};
                    FD_SOCK = {};
                    FRAG = { frag_size = 8192;};
                    MERGE2 = { max_interval = 10000; min_interval = 5000;};
                    PING = { timeout = 2000;};
                    Protocols = (
                        UDP,
                        ariba.util.nodemanager.UniqueID,
                        PING,
                        MERGE2,
                        FD_SOCK,
                        FD,
                        VERIFY_SUSPECT,
                        pbcast.NAKACK,
                        UNICAST,
                        pbcast.STABLE,
                        FRAG,
                        "ariba.util.nodemanager.AddressNodeMapping",
                        pbcast.GMS
                    );
                    UDP = {
                        discard_incompatible_packets = true;
                        enable_bundling = false;
                        enable_diagnostics = false;
                        ip_mcast = true;
                        ip_ttl = 1;
                        loopback = false;
                        mcast_recv_buf_size = 1000000;
                        mcast_send_buf_size = 640000;
                        receive_on_all_interfaces = true;
                        tos = 16;
                        ucast_recv_buf_size = 1000000;
                        ucast_send_buf_size = 640000;
                        use_incoming_packet_handler = true;
                        use_outgoing_packet_handler = true;
                    };
                    UNICAST = { timeout = "300,600,1200,2400,3600";};
                    VERIFY_SUSPECT = { timeout = 1500;};
                    "ariba.util.nodemanager.AddressNodeMapping" = {};
                    ariba.util.nodemanager.UniqueID = {};
                    pbcast.GMS = {
                        join_timeout = 15000;
                        leave_timeout = 15000;
                        print_local_addr = false;
                        shun = true;
                        view_ack_collection_timeout = 5000;
                    };
                    pbcast.NAKACK = {
                        discard_delivered_msgs = true;
                        gc_lag = 10;
                        retransmit_timeout = "100,200,300,600,1200,2400,4800";
                        use_mcast_xmit = false;
                    };
                    pbcast.STABLE = {
                        desired_avg_gossip = 50000;
                        max_bytes = 512000;
                        stability_delay = 1000;
                    };
                };
            };
            EnabledQueueBasedTransport = false;
            EnabledTopicNodeManagerFeature = false;
            Topic = {
                ClusterGroups = {
                    QueueBasedTransportReceiverThreads = 2;
                    QueueBasedTransportSenderThreads = 1;
                    Queues = (
                        {
                            TransportHandlerClass = "ariba.cluster.transport.handler.CCMQueueHandler";
                            name = CCMServerTopic;
                        }
                    );
                };
                DisableMultiNode = false;
            };
            TransportQueueClass = "ariba.cluster.transport.client.SharedKafkaQueueTransport";
        };
        Nodes = {
            NodeAuth = {
                Host = localhost;
                InterNodePort = 8091;
                Port = 8090;
                SSLKeyStoreFile = "etc/ntauthkeystore.p12";
                SSLKeyStorePassword = ntauthkeystore;
                ServerRole = ( );
            };
            NodeLog = {
                Host = localhost;
                InterNodePort = 8093;
                Port = 8092;
                ServerRole = ( );
            };
            NodesDefault = {
                AdditionalCaches = {
                    CommodityCodeCache = {
                        CacheableClasses = ( ariba.basic.core.CommodityCode );
                        ObjectCacheMaxLoad = 0.75;
                        ObjectCachePurgeBy = 0.25;
                        ObjectCacheSegments = 5;
                        ObjectCacheSize = 4096;
                    };
                    RealmProfileCache = {
                        CacheableClasses = ( ariba.base.core.RealmProfile );
                        ObjectCacheMaxLoad = 0.80;
                        ObjectCachePurgeBy = 0.25;
                        ObjectCacheSegments = 5;
                        ObjectCacheSize = 5120;
                    };
                };
                Host = localhost;
                InterNodePort = 8095;
                LocalSMTPServerPort = 25;
                ObjectCacheMaxLoad = 0.65;
                ObjectCacheMinSize = 1000;
                ObjectCachePrunePercentage = 10;
                ObjectCachePurgeBy = 0.25;
                ObjectCacheSegments = 2;
                ObjectCacheSize = 1024;
                Port = 8094;
                ServerRole = ( AribaTaskRunner, AribaUI, AribaGlobalTaskRunner );
                WorkerQueues = {
                    BackgroundQueue = 4;
                    CXMLObjectCreateQueue = 4;
                    ForegroundQueue = 3;
                    PriorityWorkflowQueue = 4;
                    WorkflowQueue = 4;
                };
            };
            buyerserver1 = {
                ClassName = ariba.server.ormsserver.ORMSNode;
                Host = c02c813emd6m;
                InterNodePort = 7012;
                Port = 7010;
                ServerRole = (
                    AribaTaskRunner,
                    AribaGlobalTaskRunner,
                    CatalogAdmin,
                    CatalogSearch,
                    AribaEmailSender,
                    AribaAdmin,
                    AribaUI,
                    QueueManager,
                    TestServer
                );
            };
            buyerserver2 = {
                ClassName = ariba.server.ormsserver.ORMSNode;
                Host = localhost;
                InterNodePort = 7016;
                Port = 7014;
                ServerRole = ( );
            };
            buyerserver3 = {
                ClassName = ariba.server.ormsserver.ORMSNode;
                Host = localhost;
                InterNodePort = 7020;
                Port = 7018;
                ServerRole = ( );
            };
        };
        OAuth = {
            GlobalAccess = { ANId = AN01491921242; RealmName = AribaGlobalRealm;};
        };
        OpenApi = { DisableOauthValidation = false;};
        OrganicGrowth = {
            ApprovablesForOrganicGrowth = (
                ariba.purchasing.core.CopyPOLineItem,
                "ariba.contract.core.ContractRequestLineItem",
                ariba.receiving.core.ReceiptItem,
                ariba.purchasing.core.CopyOrder,
                ariba.receiving.core.CopyReceipt,
                ariba.contract.core.ContractRequest
            );
            BaseObjectFields = {
                ariba.base.core.MultiLingualString = PrimaryString;
                ariba.core.CompanyCode = UniqueName;
            };
            GrowableClasses = (
                ariba.core.CostCenter,
                ariba.common.core.ProcurementUnit,
                ariba.core.Company,
                ariba.core.CompanyCode,
                ariba.core.Account,
                ariba.core.Region,
                ariba.core.SubAccount,
                ariba.core.BusinessUnit,
                ariba.core.GeneralLedger,
                ariba.core.Product,
                ariba.core.Asset,
                ariba.core.WBSElement,
                ariba.core.InternalOrder,
                ariba.core.PurchaseGroup,
                ariba.core.PurchaseOrg,
                ariba.core.AccountCategory,
                ariba.core.ItemCategory,
                "ariba.common.core.PartitionedCommodityCode",
                ariba.core.Project,
                ariba.user.core.User,
                ariba.common.core.Supplier,
                ariba.core.GLBusinessUnit,
                ariba.core.Department,
                ariba.core.StatisticsCode
            );
        };
        Parameters = { CanEditSystemParameters = false;};
        Password = {
            NewPasswordTokenLifeSpan = 720;
            ObscureSecretAnswer = false;
            PasswordExpireLimit = -1;
            PasswordExpireWarning = 14;
            PasswordResetTokenLifeSpan = 48;
            RestrictLastXPasswordsUsed = 4;
            SenderEmailAddress = "nobody@phoenix.ariba.com";
        };
        PasswordAdapters = {
            PasswordAdapter1 = {
                AllowCorporateAuthenticator = true;
                AllowNoPasswordExpirationPermission = true;
                ClassName = "ariba.auth.password.CryptDBPasswordAdapter";
                DisplayName = EnterpriseUsers;
                Enabled = true;
                LockoutPeriodInMinutes = 120;
                MatchPasswordPatternEnabled = true;
                MaxAnswerAttemptAllowed = 5;
                MaxChangePasswordAttemptAllowed = 6;
                MaxLoginAttemptAllowed = 3;
                MaxPasswordLength = 32;
                MinAnswerLength = 5;
                MinPasswordLength = 12;
                MinQuestionLength = 5;
                OrganicPasswordGrowth = false;
                PasswordExpireLimit = 0;
                PasswordFile = passwd.txt;
                PasswordTokenExpirationPeriodInHours = 24;
                ShowLoginHelp = true;
            };
            PasswordAdapter2 = {
                ClassName = ariba.sap.server.SAPPasswordAdapter;
                Enabled = false;
                ShowLoginHelp = false;
            };
            PasswordAdapter3 = {
                ClassName = "ariba.auth.external.client.ExternalAuthPasswordAdapter";
                Enabled = false;
                ExternalPasswordAdapterHost = localhost;
                ExternalPasswordAdapterPort = 8090;
                ShowLoginHelp = false;
            };
            PasswordAdapter4 = {
                ClassName = ariba.auth.password.NTDomainLoginAdapter;
                Enabled = false;
                ShowLoginHelp = false;
            };
            PasswordAdapter5 = {
                ClassName = "ariba.auth.core.NoAuthenticationPasswordAdapter";
                Enabled = false;
                ShowLoginHelp = false;
            };
            ThirdPartyUser = {
                AllowCorporateAuthenticator = false;
                AllowNoPasswordExpirationPermission = true;
                ClassName = "ariba.auth.password.CryptDBPasswordAdapter";
                DisplayName = ThirdPartyUsers;
                Enabled = true;
                LegacyPasswordCheck = true;
                LockoutPeriodInMinutes = 5;
                MatchPasswordPatternEnabled = true;
                MaxAnswerAttemptAllowed = 5;
                MaxChangePasswordAttemptAllowed = 6;
                MaxLoginAttemptAllowed = 3;
                MaxPasswordLength = 32;
                MinAnswerLength = 5;
                MinPasswordLength = 12;
                MinQuestionLength = 5;
                OrganicPasswordGrowth = false;
                PasswordExpireLimit = 0;
                PasswordFile = passwd.txt;
                PasswordTokenExpirationPeriodInHours = 24;
            };
        };
        Perf = { Backplane = { NoTestQueuePairs = 20;};};
        Performance = {
            AccessThresholdToCompile = 50;
            BlockedConnectionTimeout = 0;
            CatalogSearchLimit = 500;
            CheckForBlockedConnections = 0;
            "ClassesToIgnorePassThroughObjectRetriever" = ( ariba.base.core.RealmProfile );
            ClusterIntegrity = true;
            ClusterSanityChecks = false;
            CollectObjectStats = true;
            ConcurrentUserLimit = 0;
            CurrencyRateCacheSize = 2048;
            DeferredObjectCallbacks = true;
            EditLockTimeout = 1800;
            EnableMemoryMonitor = true;
            EnhancedLazyLoading = false;
            ForcedPagingSize = 50;
            HTTPSocketTimeout = 120;
            HexEngineForVectors = true;
            HibernationDepth = 5;
            LazyLoadingMode = disabled;
            LazySessionUpdate = true;
            LazyloadIntoGlobalCache = false;
            MaxCompiledAccessorCount = 1000;
            MaxSubordinates = 25;
            MinFreeMemoryPercentage = 10;
            MoneyUpdateHours = 6;
            NamedObjectChooserLimit = 500;
            NonDeferredClasses = (
                ariba.base.core.MultiLocaleString,
                ariba.base.core.ShortMultiLocaleString,
                ariba.base.core.LongMultiLocaleString,
                ariba.base.core.MultiLingualString,
                ariba.base.core.LongString,
                ariba.base.core.RealmProfile
            );
            PageCacheSize = 10;
            PagingVectorsMode = disabled;
            QueryCacheSize = 70;
            QueryFolderLimit = 2000;
            RPCIdleConnectionTimeout = 10800;
            ReaderThreadPool = 4;
            RefreshRegion = true;
            SSLKeyStoreFile = "etc/aribakeystore.p12";
            SSLKeyStorePassword = aribakeystore;
            SSLRPC = false;
            SessionRecentObjectCacheSize = 50;
            UseSoftReferenceForSessionCache = true;
            VectorSanityChecks = false;
            WorkerThreadRunningTimeWarningThreshold = 1200;
        };
        PrivacyAgreement = { Version = 1;};
        Procure = {
            AddPurchaseOrderToOutBoxOnCreate = false;
            AddRequisitionToOutBoxOnCreate = true;
            AllowNegativePricing = false;
            AribaNetwork = {
                CXMLDTDValidationSourceDebug = "https://svcdev6.ariba.com/schemas";
                EmailAddress = "aribaadmin@mycompany.com";
                EnableCertificateAuthentication = false;
                Id = "ab-buyer-test1@ariba.com";
                KeyStoreFileName = "";
                KeyStorePassword = "";
                OrderRequestURL = "https://svcdev6.ariba.com/service/transaction/cxml.asp";
                PermanentOrderFailureRetryPeriodInDays = 1;
                ProfileRequestURL = "https://svcdev6.ariba.com/service/transaction/cxml.asp";
                PunchOutURL = "https://svcdev6.ariba.com/service/transaction/cxml.asp";
                PunchOutUseUNUOMMap = false;
                RequestTimeoutSeconds = 90;
            };
            CustomCatalogImplementation = "";
            ExcludeSupplierDirectCatalogItems = true;
            LinguisticAPIImplementation = (
                "ariba.altavista.base.LinguisticMapInitializerEnglish",
                "ariba.altavista.base.LinguisticMapInitializerSpanish",
                "ariba.altavista.base.LinguisticMapInitializerItalian",
                "ariba.altavista.base.LinguisticMapInitializerPortuguese",
                "ariba.altavista.base.LinguisticMapInitializerGerman",
                "ariba.altavista.base.LinguisticMapInitializerDutch",
                "ariba.altavista.base.LinguisticMapInitializerSwedish",
                "ariba.altavista.base.LinguisticMapInitializerFinnish",
                "ariba.altavista.base.LinguisticMapInitializerFrench",
                "ariba.altavista.base.LinguisticMapInitializerNorwegian",
                "ariba.altavista.base.LinguisticMapInitializerRussian",
                "ariba.altavista.base.LinguisticMapInitializerDanish",
                "ariba.altavista.base.LinguisticMapInitializerChinese",
                "ariba.altavista.base.LinguisticMapInitializerTurkish",
                "ariba.altavista.base.LinguisticMapInitializerPolish",
                "ariba.altavista.base.LinguisticMapInitializerJapanese",
                "ariba.altavista.base.LinguisticMapInitializerHungarian",
                "ariba.altavista.base.LinguisticMapInitializerRomanian",
                "ariba.altavista.base.LinguisticMapInitializerGreek"
            );
            OrderProcessor = {
                CJKFont = "";
                CJKFontDir = "";
                FaxCountryCode = 1;
                FaxDigitCount = 10;
                FaxDomesticPrefix = 1;
                FaxIsoCode = US;
                FaxNumberOverride = "";
                FaxOrders = false;
                FaxPassword = "";
                FaxServer = faxServerName;
                FaxUser = "";
                ISOFaxHome = "";
                OrdersDirectory = transactionData;
                PrintOrders = false;
            };
            PendingUnknownSupplierOverdueLimitInDays = 14;
            "PermanentAppCxmlWorkFailureRetryPeriodInMinutes" = 600;
            ReceiptSendMethods = {
                GenericReceipt = {
                    ERPSendMethod = true;
                    Formatter = ariba.generic.server.SGReceiptFormatter;
                    ReceiptMethod = "ariba.purchasing.receiving.AribaERPReceiptMethod";
                    Sender = "ariba.receiving.AribaReceiptAdapterSender";
                };
                OracleReceipt = {
                    ERPSendMethod = true;
                    Formatter = "ariba.oracle.server.OracleReceiptFormatter";
                    ReceiptMethod = "ariba.purchasing.receiving.AribaERPReceiptMethod";
                    Sender = "ariba.receiving.AribaReceiptAdapterSender";
                };
                PSReceipt = {
                    ERPSendMethod = true;
                    Formatter = "ariba.peoplesoft.server.PSReceiptFormatter";
                    ReceiptMethod = "ariba.purchasing.receiving.AribaERPReceiptMethod";
                    Sender = "ariba.receiving.AribaReceiptAdapterSender";
                };
                S4HanaReceipt = {
                    ERPSendMethod = true;
                    Formatter = ariba.sap.server.SAPReceiptFormatter;
                    ReceiptMethod = "ariba.purchasing.receiving.AribaERPReceiptMethod";
                    Sender = "ariba.purchasing.s4hana.AribaReceiptS4HanaSender";
                };
                SAPReceipt = {
                    ERPSendMethod = true;
                    Formatter = ariba.sap.server.SAPReceiptFormatter;
                    ReceiptMethod = "ariba.purchasing.receiving.AribaERPReceiptMethod";
                    Sender = "ariba.receiving.AribaReceiptAdapterSender";
                };
                Silent = {
                    ERPSendMethod = false;
                    Formatter = ariba.receiving.DummyReceiptFormatter;
                    ReceiptMethod = ariba.receiving.DummyReceiptMethod;
                    Sender = ariba.receiving.AribaReceiptSilentSender;
                };
            };
            SendMethods = {
                AribaEmail = {
                    ACSNSendMethod = false;
                    Contact = "PurchaseOrder.SupplierLocation.EmailAddress";
                    ContactName = PurchaseOrder.SupplierLocation.Name;
                    ERPSendMethod = false;
                    Formatter = "ariba.purchasing.ordering.TextOrderFormatter";
                    Sender = "ariba.purchasing.ordering.AribaEmailSender";
                    SizeLimit = 102400;
                };
                AribaFax = {
                    ACSNSendMethod = false;
                    Contact = PurchaseOrder.SupplierLocation.Fax;
                    ContactName = PurchaseOrder.SupplierLocation.Name;
                    ERPSendMethod = false;
                    Formatter = "ariba.purchasing.ordering.HTMLOrderFormatter";
                    Sender = ariba.purchasing.ordering.AribaFaxSender;
                    SizeLimit = 102400;
                };
                ERP = {
                    ACSNSendMethod = false;
                    Contact = "";
                    ContactName = "";
                    ERPSendMethod = false;
                    Formatter = "ariba.purchasing.ordering.DummyOrderFormatter";
                    Sender = ariba.purchasing.ordering.AribaERPSender;
                    SizeLimit = 102400;
                };
                Email = {
                    ACSNSendMethod = false;
                    Contact = "PurchaseOrder.SupplierLocation.EmailAddress";
                    ContactName = PurchaseOrder.SupplierLocation.Name;
                    ERPSendMethod = false;
                    Formatter = "ariba.purchasing.ordering.TextOrderFormatter";
                    Sender = "ariba.purchasing.ordering.AribaEmailSender";
                    SizeLimit = 102400;
                };
                Fax = {
                    ACSNSendMethod = false;
                    Contact = PurchaseOrder.SupplierLocation.Fax;
                    ContactName = PurchaseOrder.SupplierLocation.Name;
                    ERPSendMethod = false;
                    Formatter = "ariba.purchasing.ordering.HTMLOrderFormatter";
                    Sender = ariba.purchasing.ordering.AribaFaxSender;
                    SizeLimit = 102400;
                };
                GenericPOERP = {
                    ACSNSendMethod = false;
                    Contact = "";
                    ContactName = "";
                    ERPSendMethod = true;
                    Formatter = "ariba.purchasing.ordering.DummyOrderFormatter";
                    Sender = "ariba.purchasing.ordering.AribaPOERPSender";
                    SizeLimit = 102400;
                };
                Manual = {
                    ACSNSendMethod = false;
                    Contact = "";
                    ContactName = "";
                    ERPSendMethod = false;
                    Formatter = "ariba.purchasing.ordering.DummyOrderFormatter";
                    Sender = "ariba.purchasing.ordering.AribaDummySender";
                    SizeLimit = 102400;
                };
                OraclePOERP = {
                    ACSNSendMethod = false;
                    Contact = "";
                    ContactName = "";
                    ERPSendMethod = true;
                    Formatter = ariba.oracle.server.OraclePOERPFormatter;
                    Sender = "ariba.purchasing.ordering.AribaPOERPSender";
                    SizeLimit = 102400;
                };
                PSPOERP = {
                    ACSNSendMethod = false;
                    Contact = "";
                    ContactName = "";
                    ERPSendMethod = true;
                    Formatter = ariba.peoplesoft.server.PSPOERPFormatter;
                    Sender = "ariba.purchasing.ordering.AribaPOERPSender";
                    SizeLimit = 102400;
                };
                Print = {
                    ACSNSendMethod = false;
                    Contact = "";
                    ContactName = PurchaseOrder.SupplierLocation.Name;
                    ERPSendMethod = false;
                    Formatter = "ariba.purchasing.ordering.HTMLOrderFormatter";
                    Sender = "ariba.purchasing.ordering.AribaPrinterSender";
                    SizeLimit = 102400;
                };
                SAPPOERP = {
                    ACSNSendMethod = false;
                    Contact = "";
                    ContactName = "";
                    ERPSendMethod = true;
                    Formatter = ariba.sap.server.SAPPOERPFormatter;
                    Sender = "ariba.purchasing.ordering.AribaPOERPSender";
                    SizeLimit = 102400;
                };
                Silent = {
                    ACSNSendMethod = false;
                    Contact = "";
                    ContactName = PurchaseOrder.SupplierLocation.Name;
                    ERPSendMethod = false;
                    Formatter = "ariba.purchasing.ordering.DummyOrderFormatter";
                    Sender = "ariba.purchasing.ordering.AribaSilentSender";
                    SizeLimit = 102400;
                };
                URL = {
                    ACSNSendMethod = true;
                    Contact = "PurchaseOrder.SupplierLocation.ElectronicOrderAddress";
                    ContactName = PurchaseOrder.SupplierLocation.Name;
                    ERPSendMethod = false;
                    Formatter = "ariba.purchasing.ordering.DummyOrderFormatter";
                    Sender = "ariba.purchasing.ordering.SupplierNetworkOrderSender";
                    SizeLimit = 102400;
                };
            };
            SupplierDirectPartition = supplierdirect;
            SupplierLocationProblems = 100;
        };
        RealmAffinity = { Enabled = false; ExpectedNumberOfNodes = 2; ServerRole = AribaUI;};
        Redis = {
            CacheableClasses = {
                AdminUserNames = {
                    TableName = "AdminUserConfigTab, SystemGroupRealmSharedUserPTab";
                };
                BrowserInfo = { TableName = BrowserInfoTab;};
                DenormalizedField = { TableName = DENORMALIZEDFIELDSHISTORYTAB;};
                MetaLayout = { TableName = MetaLayoutTab;};
                StringFileName = { TableName = StringFileNameTab;};
                TypeMap = {
                    ScheduleHandler = "ariba.base.server.TypeMapDistributedCacheScheduleHandler";
                    TypeName = TypeMap;
                    UpdateHandler = "ariba.base.server.TypeMapDistributedCacheUpdateHandler";
                    UpdateIntervalInSeconds = 15;
                };
                ariba.auth.core.AuthCookieData = {
                    TypeName = ariba.auth.core.AuthCookieData;
                    UpdateHandler = "ariba.auth.core.DistributedCacheAuthCookieUpdateHandler";
                };
                ariba.base.core.RealmProfile = {
                    BatchSize = 200;
                    ExpiryTime = 21600;
                    RetrieverStrategy = "ariba.base.server.distributedcache.DistributedSmallTabObjectRetrieverStrategy";
                    ScheduleHandler = "ariba.base.server.distributedcache.RealmProfileDistributedCacheScheduleHandler";
                    TypeName = ariba.base.core.RealmProfile;
                    UpdateHandler = "ariba.base.server.distributedcache.RealmProfileDistributedCacheUpdateHandler";
                    UpdateIntervalInSeconds = 30;
                };
                ariba.cluster.status.NodeStatus = {
                    ScheduleHandler = "ariba.base.server.distributedcache.DistributedNodeStatusScheduleHandler";
                    TypeName = ariba.cluster.status.NodeStatus;
                    UpdateIntervalInSeconds = 60;
                };
                ariba.util.nodemanager.NodeSingleton = {
                    ScheduleHandler = "ariba.base.server.distributedcache.DistributedNodeSingletonScheduleHandler";
                    TypeName = ariba.util.nodemanager.NodeSingleton;
                    UpdateIntervalInSeconds = 10;
                };
            };
            Connection = { Host = localhost; Password = ""; PoolSize = 10; Port = 7000;};
            HealthCheckIntervalInSecs = 300;
            Namespace = devApril;
            UpdateQueue = {
                MaxWorkItems = 15000;
                ProcessorThreadSleepTimeInSeconds = 15;
                SchedulerThreadSleepTimeInSeconds = 15;
            };
            UseMockCacheService = false;
            UseRedisPool = false;
        };
        ReportingDataAPI = {
            ASyncThreadPool = { ThreadPoolSize = 10;};
            AsyncJobProcessorScheduledTask = { NoOfJobsToProcessPerRealm = 5;};
            BatchSizeForAsync = 40;
            BatchSizeForSync = 40;
            FileExpireDurationInHours = 60;
            FilePurgeDurationInHours = 72;
            HardDeleteJobsDurationInDays = 90;
            JobExpireDurationInHours = 48;
            JobResetScheduleTask = { MaxResetsPerJob = 1;};
            "MaxJobProcessingUpdateDelayInMilliseconds" = 900000;
            MaxLookupKeysForDetailsEndpointInRequest = 50;
            MaxLookupKeysForListEndpointInResponse = 10000;
            MaxLookupKeysInAsynchronousRequest = 1000;
            MaxLookupKeysInSynchronousRequest = 40;
            MaxRecordsPerFile = 1000;
            MaxRecordsPerRequest = 10000;
            MaxReportableDurationInDays = 365;
            MaxRetriesOnNFSError = 3;
            NFSMaxSize = 1024;
            NFSPath = "/tmp";
            SleepIntervalOnNFSError = 300;
            SoftDeleteJobsDurationInDays = 3;
            V2 = { MaxReportableDurationInDays = 365;};
            ViewListPageSize = 20;
        };
        Reports = {
            AnalysisFolderPath = "/ad/viewFolder/ariba.analytics.folderui.FolderPortletController";
            AnalysisReportEnabled = true;
            AnalysisWorkspaceID = "&folderId=SYS0300";
            ReportsMaxCategories = 9;
            ReportsMaxRows = 1000;
        };
        Security = {
            CXML = {
                DigestMethod = "http://www.w3.org/2000/09/xmldsig#sha1";
                DigestMethodAdvanced = "http://www.w3.org/2001/04/xmlenc#sha256";
                SignatureMethod = "http://www.w3.org/2000/09/xmldsig#dsa-sha1";
                SignatureMethodAdvanced = "http://www.w3.org/2001/04/xmldsig-more#rsa-sha256";
            };
            CurrentVersion = 1;
            Encryption = {
                CachedKeyManagers = "ariba.base.security.encryption.PlatformCachedKeyManager,com.sap.ariba.security.encryption.keyimpl.KeyVaultImpl";
            };
            EncryptionAlgorithms = { 1 = "AES/CBC/PKCS5Padding"; 2 = "AES/CBC/PKCS5Padding";};
            EncryptionKeys = {
                1 = "{DESede}0lpz4SKt+qdsMvFyLRmjZA==";
                2 = "{DESede}0lpz4SKt+qeTNb69hRBzxQ==";
            };
            EncryptionManagerOauthClient = {
                ClientId = d376d262-2d5a-451d-8b94-32b7ced4030c;
                GrantType = openapi_2lo;
                PrivateSecret = "{DESede}4sNRBUVNGbJ7KlUeQbEobFSP9PX1Cr6S0TxVxahAt4vFa8cXa0Wz9A==";
                PublicSecret = "{DESede}W7do200oYKbLoKJW0NrVk8dsp8o1E3dIPaWwnAesjqDFa8cXa0Wz9A==";
            };
            EncryptionUpdaterTasks = {
                "AttachmentUpdaterMaxRealmCountPerCommunity" = 1;
                AttachmentUpdaterMaxRealmCountPerSid = 5;
                BlobUpdaterMaxRealmCountPerCommunity = 1;
                BlobUpdaterMaxRealmCountPerSid = 5;
            };
            FrontDoors = {
                Advanced = {
                    ACM = ( );
                    AribaNetwork = ( );
                    Buyer = ( );
                    CollabService = ( );
                    ContentAux = ( );
                    ContentManagement = ( );
                    DMS = ( );
                    SM = ( );
                    SR = ( );
                };
                Legacy = {
                    ACM = ( );
                    AribaNetwork = ( );
                    Buyer = ( );
                    CollabService = ( );
                    ContentAux = ( );
                    ContentManagement = ( );
                    DMS = ( );
                    SM = ( );
                    SR = ( );
                };
            };
            GBaasAribaAccessEventURL = "";
            GBaasAribaClientID = "";
            GBaasAribaClientSecret = "";
            GBaasAribaPolicyURL = "";
            GBaasAribaUserSuspensionURL = "";
            GBaasAuthURL = "https://gbaas-cp-staging.authentication.eu10.hana.ondemand.com/oauth/token";
            GBaasBaseURL = "https://eu1.staging.gbaas.net.sap;https://eu2.staging.gbaas.net.sap";
            GBaasClientEncryptionKey = "";
            GBaasClientID = "";
            GBaasClientSecret = "";
            GBaasDataDir = "";
            GBaasHTTPProxyHost = "";
            GBaasHTTPProxyPort = "";
            GBaasImplClassName = "com.sap.ariba.security.gbaas.client.impl.GbaasDefaultImpl";
            GBaasUserSuspensionIntervalInMinutes = 5;
            InvoicingMultiFrontDoorHostName = ( c02c813emd6m );
            MultiFrontDoorHostName = ( c02c813emd6m );
            ProcurementMultiFrontDoorHostName = ( c02c813emd6m );
            ReplayMitigation = { CacheTokenTimeoutInMinutes = 5; TokenLength = 64;};
            SAML = {
                DigestMethod = "http://www.w3.org/2000/09/xmldsig#sha1";
                DigestMethodAdvanced = "http://www.w3.org/2001/04/xmlenc#sha256";
                SignatureMethod = "http://www.w3.org/2000/09/xmldsig#rsa-sha1";
                SignatureMethodAdvanced = "http://www.w3.org/2001/04/xmldsig-more#rsa-sha256";
                UseLegacyVanityURL = false;
            };
            SSL = {
                CipherSuitesEnabled = "<Default>";
                CipherSuitesEnabledAdvanced = "<Default>";
                HttpsProtocolForSSLContext = TLS;
                HttpsProtocolForSSLContextAdvanced = TLSv1.2;
                HttpsProtocolsEnabled = "TLSv1,TLSv1.1,TLSv1.2";
                HttpsProtocolsEnabledAdvanced = "TLSv1.1,TLSv1.2";
            };
            SecretsManager = {
                Vault = {
                    ConsulUrl = "https://consul.service.lab1.ariba.com:8443";
                    MaxRetries = 3;
                    Namespace = core_stack;
                    OpenTimeout = 5;
                    ReadTimeout = 15;
                    RetryWait = 7000;
                    ServiceName = labvault;
                    TelemetryPeriod = 15;
                    UseAgent = false;
                    UseClusterDNS = false;
                    VaultUrl = "https://active.vault.service.lab1.ariba.com:8200";
                };
            };
            SourcingMultiFrontDoorHostName = ( );
            SupplierMultiFrontDoorHostName = ( );
            VisibilityMultiFrontDoorHostName = ( );
        };
        ServiceDiscoveryAppInfo = { ARCHES = { ENCRYPTED = ArchesEncrypted; UNENCRYPTED = Arches;};};
        ServiceSheet = {
            ServiceSheetSendMethods = {
                SAPServiceSheet = { Formatter = "ariba.sap.server.SAPServiceSheetFormatter";};
            };
            TotalEmailAttachmentSize = 10240;
        };
        Sessions = {
            CatalogServer = {
                EditableClasses = (
                    "ariba.base.server.core.ScheduledTaskStatus",
                    "ariba.catalog.admin.core.BuyerImportTracker",
                    ariba.catalog.base.CatalogItemInternal,
                    ariba.catalog.admin.core.CatalogData,
                    ariba.catalog.admin.core.URLContainer,
                    ariba.procure.core.CatalogEntry,
                    ariba.approvable.core.Folder,
                    "ariba.integration.core.IntegrationEventLog",
                    ariba.app.util.replication.Subscription,
                    "ariba.app.util.replication.ReplicationItem"
                );
            };
            DefaultSession = { EditableClasses = ( ariba.base.core.ClusterRoot );};
            EnterpriseManager = { EditableClasses = ( ariba.base.core.ClusterRoot );};
            GuestUser = {
                EditableClasses = (
                    ariba.user.core.User,
                    ariba.user.core.Organization,
                    ariba.auth.password.Password,
                    ariba.common.core.User,
                    ariba.dashboard.core.PortletInstance,
                    ariba.app.integrate.user.NonceData
                );
            };
            Instance = { EditableClasses = ( ariba.base.core.ClusterRoot );};
            ORMSUser = {
                EditableClasses = (
                    ariba.payment.core.PaymentTerms,
                    ariba.purchasing.core.AggregatableDemand,
                    ariba.purchasing.core.AmendmentsBridge,
                    ariba.purchasing.core.Reservation,
                    "ariba.base.server.core.ScheduledTaskStatus",
                    ariba.cxml.base.core.CXMLDocument,
                    "ariba.catalog.admin.core.BuyerImportTracker",
                    ariba.catalog.base.CatalogMenuPreference,
                    ariba.approvable.core.Approvable,
                    "ariba.common.core.ApprovableNotificationPreferences",
                    ariba.pricing.core.DoubleCell,
                    ariba.pricing.core.Grid,
                    "ariba.pricing.core.TermBasedGridPricingTerm",
                    ariba.common.core.CommonSupplier,
                    ariba.approvable.core.Folder,
                    ariba.approvable.core.FolderItem,
                    ariba.common.core.PCard,
                    ariba.pricing.core.PricingTerms,
                    ariba.user.core.RecentUserChoice,
                    ariba.reporting.core.SavedReport,
                    ariba.search.core.SavedSearch,
                    ariba.search.core.DashboardSavedSearch,
                    ariba.search.core.SearchExpression,
                    ariba.common.core.Supplier,
                    ariba.common.core.SupplierLocation,
                    ariba.common.core.User,
                    ariba.user.core.UserPIISnapshot,
                    ariba.expense.core.ExpenseDetails,
                    ariba.expense.core.LocationType,
                    "ariba.integration.core.IntegrationEventLog",
                    ariba.portlet.core.PortletConfig,
                    ariba.dashboard.core.Dashboard,
                    ariba.dashboard.core.PortletInstance,
                    "ariba.contract.core.ContractSubscriptionTracker",
                    ariba.purchasing.core.OrderRecipient,
                    "ariba.approvable.core.AttachmentReference",
                    ariba.server.workflowserver.Workflow,
                    "ariba.server.workflowserver.WorkflowEventListener",
                    ariba.user.core.User,
                    "ariba.procure.core.SharedGlobalItemProperties",
                    ariba.kitting.core.Kit,
                    "ariba.collaboration.core.CollaborationRequest",
                    ariba.collaboration.core.Proposal,
                    ariba.collaboration.core.CounterProposal,
                    ariba.collaboration.core.RequiredViewing,
                    "ariba.payment.core.PaymentRequestRecipient",
                    "ariba.payment.core.PaymentTransactionRecipient",
                    "ariba.collaboration.core.CollaborationThread",
                    "ariba.common.core.PartitionedCommodityCode",
                    ariba.approvable.core.MessageBoard,
                    "ariba.contract.core.ServiceLevelAgreement",
                    ariba.auth.password.Password,
                    "ariba.expense.core.audit.RealTimeAuditPolicyType",
                    "ariba.expense.core.audit.BatchAuditPolicyType",
                    ariba.expense.core.audit.AuditPolicies,
                    ariba.workforce.core.Contractor,
                    "ariba.catalog.base.favorites.FavoriteGroup",
                    ariba.app.util.PersistedToken,
                    ariba.procure.core.BiddingType,
                    "ariba.receiving.core.StagedReceiptLineItem",
                    ariba.approvable.core.ApproverList,
                    ariba.base.core.DBFile,
                    "ariba.catalog.base.recentlyviewed.RecentlyViewed",
                    "ariba.procure.core.RealTimeBudgetResponse",
                    ariba.approvable.core.ApprovableType,
                    ariba.user.core.Group,
                    ariba.content.core.ShoppingCart,
                    ariba.content.core.ShoppingCartLineItem,
                    ariba.app.util.Customizations,
                    "ariba.integration.core.MessageConfigurationSpec",
                    "ariba.integration.core.MessageDefinitionSpec",
                    ariba.basic.core.Address,
                    ariba.basic.core.Condition,
                    ariba.basic.core.SearchExpression,
                    ariba.basic.core.FlexMasterDataType,
                    ariba.base.core.PrintPreviewLayout,
                    ariba.base.core.PrintPreviewTemplate,
                    ariba.user.core.SessionEdit,
                    "ariba.approvable.rules.JavaScriptTemplate",
                    ariba.approvable.rules.RuleSet,
                    "ariba.approvable.core.notification.NotificationConfig",
                    ariba.app.integrate.user.NonceData,
                    ariba.masterdata.core.MasterDataSyncJob,
                    test.ariba.testautomation.AutoTestObj,
                    ariba.common.core.Address,
                    ariba.common.core.AddressSnapshot,
                    ariba.common.core.OneTimeVendorDetail,
                    ariba.base.core.ClusterRootPushDataEntry,
                    ariba.app.core.LookupChooserConfig,
                    ariba.budget.core.Budget,
                    ariba.budget.core.Accumulator,
                    ariba.budget.core.BudgetCode,
                    ariba.budget.core.BudgetPeriod,
                    ariba.budget.procure.BudgetTransaction,
                    ariba.servicesheet.core.ServiceSheet,
                    ariba.basic.core.CommodityCode,
                    ariba.statement.core.RelatedDocuments,
                    "ariba.payment.core.AdvancePaymentConsumptionLog",
                    ariba.payment.core.PaymentBankLocation,
                    ariba.l2charge.core.Level2Charge,
                    ariba.expense.core.ExpensePolicyType,
                    "ariba.expense.core.ExpenseReportPrintConfig",
                    ariba.expense.core.TravelAuthPrintConfig,
                    "ariba.expense.core.ExpenseHeaderCategoryMap",
                    "ariba.collaboration.core.CollaborationRoutingInfo",
                    "ariba.workforce.core.TimeSheetRoutingInfo"
                );
            };
            PurgeAdministration = { EditableClasses = ( ariba.base.core.ClusterRoot );};
        };
        Settlement = {
            PaymentRequestSendMethods = {
                AribaNetwork = {
                    ACSNSendMethod = true;
                    ContactName = UserSender;
                    ERPSendMethod = false;
                    Formatter = ariba.payment.DummyPaymentFormatter;
                    PaymentMethod = "ariba.payment.AribaNetworkPaymentRequestMethod";
                    Sender = "ariba.payment.cxml.AribaNetworkCXMLPaymentProposalSender";
                    UsesAsynchronousPush = false;
                    UsesDirectIntegration = false;
                };
                MessagingQueue = {
                    ACSNSendMethod = false;
                    ContactName = UserSender;
                    ERPSendMethod = true;
                    Formatter = ariba.payment.DummyPaymentFormatter;
                    PaymentMethod = ariba.payment.AribaERPPaymentMethod;
                    Sender = ariba.payment.AribaPaymentQueueSender;
                    UsesAsynchronousPush = false;
                    UsesDirectIntegration = false;
                };
                OraclePaymentERP = { Sender = ariba.payment.AribaPaymentSilentSender;};
                PSPaymentERP = { Sender = ariba.payment.AribaPaymentSilentSender;};
                PSoftMessagingQueue = {
                    ACSNSendMethod = false;
                    ContactName = UserSender;
                    ERPSendMethod = true;
                    Formatter = "ariba.peoplesoft.server.PsoftInvoiceFormatter";
                    PaymentMethod = "ariba.peoplesoft.common.AribaPSoftERPPaymentMethod";
                    Sender = ariba.payment.AribaPaymentQueueSender;
                    UsesAsynchronousPush = false;
                    UsesDirectIntegration = false;
                };
                S4HanaMessagingQueue = {
                    ACSNSendMethod = false;
                    ContactName = UserSender;
                    ERPSendMethod = true;
                    Formatter = ariba.sap.server.SAPInvoiceFormatter;
                    PaymentMethod = ariba.payment.AribaERPPaymentMethod;
                    SendRank = 1;
                    Sender = "ariba.payment.s4hana.AribaS4HanaPaymentAdapterSender";
                    UsesAsynchronousPush = false;
                    UsesDirectIntegration = false;
                };
                SAPMessagingQueue = {
                    ACSNSendMethod = false;
                    ContactName = UserSender;
                    ERPSendMethod = true;
                    Formatter = ariba.sap.server.SAPInvoiceFormatter;
                    PaymentMethod = ariba.payment.AribaERPPaymentMethod;
                    Sender = ariba.payment.AribaPaymentQueueSender;
                    UsesAsynchronousPush = false;
                    UsesDirectIntegration = false;
                };
                SAPPaymentERP = { Sender = ariba.payment.AribaPaymentSilentSender;};
                Silent = {
                    ACSNSendMethod = false;
                    ContactName = UserSender;
                    ERPSendMethod = false;
                    Formatter = ariba.payment.DummyPaymentFormatter;
                    PaymentMethod = ariba.payment.DummyPaymentMethod;
                    Sender = ariba.payment.AribaPaymentSilentSender;
                    UsesAsynchronousPush = false;
                    UsesDirectIntegration = false;
                };
            };
            PaymentTransactionSendMethods = {
                AribaNetwork = {
                    ACSNSendMethod = true;
                    ContactName = UserSender;
                    ERPSendMethod = false;
                    Formatter = "ariba.payment.DummyPaymentTransactionFormatter";
                    PaymentMethod = "ariba.payment.AribaNetworkPaymentTransactionMethod";
                    Sender = "ariba.payment.cxml.AribaNetworkCXMLPaymentRemittanceSender";
                };
                Silent = {
                    ACSNSendMethod = false;
                    ContactName = UserSender;
                    ERPSendMethod = false;
                    Formatter = "ariba.payment.DummyPaymentTransactionFormatter";
                    PaymentMethod = "ariba.payment.DummyPaymentTransactionMethod";
                    Sender = "ariba.payment.AribaPaymentTransactionSilentSender";
                };
            };
        };
        Shutdown = {
            CatalogSearch = { RecycleInterval = -1; RecycleMaxTaskCount = -1;};
            RecycleInterval = -1;
            RecycleMaxTaskCount = -1;
            Signals = { GracefulShutdown = ( );};
        };
        SupplierPunchIn = { OrganicGrowth = true;};
        SwitchConfig = {
            EnableSwitchSchema = false;
            SwitchStateCacheRefreshInterval = 2000;
            SwitchStateCacheThreadLifetime = 900000;
        };
        Tax = { ExternalTaxProviders = ( ThomsonReuters, Vertex, Custom );};
        ThreadPools = {
            Default = {
                Max = 3;
                Min = 1;
                QueueSize = 100;
                ThreadManager = "ariba.base.server.ObjectServerThreadManager";
                Timeout = 1800000;
            };
            NodeManager = {
                Max = 30;
                Min = 3;
                QueueSize = 300;
                RejectedExecutionHandler = "ariba.util.core.ThreadPoolRejectedExecutionHandler";
                ThreadManager = "ariba.base.server.ObjectServerThreadManager";
                Timeout = 1800000;
            };
            PurgeDurableEmail = {
                Max = 3;
                Min = 0;
                QueueSize = 100;
                RejectedExecutionHandler = "ariba.util.core.DefaultRejectedExecutionHandler";
                ThreadManager = "ariba.base.server.ObjectServerThreadManager";
                Timeout = 1800000;
            };
            Scheduler = {
                Max = 30;
                Min = 2;
                QueueSize = 500;
                RejectedExecutionHandler = "ariba.util.scheduler.ScheduledTaskRejectedExecutionHandler";
                ThreadManager = "ariba.base.server.ObjectServerThreadManager";
                Timeout = 1800000;
            };
        };
        TrustedSubnet = ( 0, 10, 127 );
        UI = {
            AllowParentFrame = true;
            CookiePolicyURL = "http://www.ariba.com/legal/ariba-privacy-statement";
            DataPolicyURL = "http://www.ariba.com/legal/ariba_privacy_statement.cfm";
            ElementIdCacheMaxSize = 100000;
            EnableDirectActionForBranding = true;
            EnableFooter = true;
            EnableLoginAutoComplete = false;
            FallbackDashboardHome = ACM;
            FileUploadDirectory = temp;
            FileUploadMaxSize = 104857600;
            HomePage = DashboardMain;
            LoginHintsFile = "news/loginhints.html";
            LoginPageMessage = {
                Default = {
                    da_DK = "";
                    de_DE = "";
                    en_US = "http://devweb/ASM_Suite/rss/ssploginRss.xml";
                    es_ES = "";
                    fr_FR = "http://devweb/ASM_Suite/rss/fr_loginRss.xml";
                    it_IT = "";
                    ja_JP = "";
                    ko_KR = "";
                    nl_NL = "";
                    no_NO = "";
                    pl_PL = "";
                    pt_BR = "";
                    ru_RU = "";
                    sv_SE = "";
                    tr_TR = "";
                    zh_CN = "";
                    zh_TW = "";
                };
                ServiceManager = { en_US = "http://devweb/ASM_Suite/rss/sm/loginRss.xml";};
                Suite = { en_US = "http://devweb/ASM_Suite/rss/suiteloginRss.xml";};
                Supplier = {
                    en_US = "http://devweb/ASM_Suite/rss/supplier/loginRss.xml";
                };
            };
            LogoutDestinationURL = "";
            MultiTab = { Enabled = false;};
            NumberLinePerPage = 14;
            NumberOfTOCFlashSet = 6;
            PreferredTimezones = ( CST, "Asia/Baku" );
            SecurityPolicyURL = "http://www.ariba.com/legal/security-disclosure";
            ServiceAdminLoginImage = "sso/logingraphic_serviceManager.gif";
            ServiceAdminMainPage = ARPAdminHomePage;
            SessionExpirationWarningInterval = 60000;
            SiteNotAvailableUrl = "";
        };
        UserCommunity = {
            ClassToDomainObjectMappings = {
                ariba.catalog.admin.core.CatalogFilter = CatalogFilter;
                ariba.catalog.admin.core.Subscription = CatalogItems;
                ariba.charge.core.Charge = PCardCharges;
                ariba.charge.core.ChargeReconciliation = ChargeReconciliations;
                ariba.common.core.UserProfile = UserProfileRequests;
                ariba.contract.core.Contract = Contracts;
                ariba.contract.core.ContractRequest = ContractRequests;
                ariba.expense.core.ExpenseReport = TravelAndExpense;
                ariba.expense.core.TravelAuthorization = TravelAndExpense;
                ariba.invoicing.core.Invoice = Invoices;
                "ariba.invoicing.core.InvoiceReconciliation" = InvoiceReconciliations;
                ariba.kitting.core.Kit = CatalogKit;
                ariba.payment.core.Payment = PaymentRequests;
                ariba.purchasing.core.Catalog = Catalogs;
                ariba.purchasing.core.PurchaseOrder = PurchaseOrder;
                ariba.purchasing.core.Requisition = Requisitions;
                ariba.receiving.core.Receipt = Receipts;
                ariba.workforce.core.ExpenseSheet = ContractorExpenseSheets;
            };
            CommunityActivities = (
                Create,
                Search,
                Change,
                Manage,
                Add,
                Run,
                View,
                Compare,
                Groups,
                Import,
                Validate,
                Deactivate,
                Export,
                Activate,
                Edit,
                Browse,
                Withdraw,
                Upload,
                Configure,
                MarkOrdered,
                MarkCancelled,
                ForceCancel,
                Reopen,
                Accept,
                Reject,
                Close,
                Reconcile,
                ForcePay,
                Match,
                Submit,
                Dispute,
                Copy,
                Cancel,
                ForceSend,
                Aggregate,
                AddToExisting,
                Assign,
                Cancel,
                Reassign,
                Login,
                Approve,
                ImportExport
            );
            CommunityDomainObjects = (
                Cart,
                Catalog,
                Catalogs,
                Requisitions,
                RelevanceRanking,
                IndexBuilder,
                CatalogHierarchy,
                GeneratedSubscriptions,
                CatalogVersions,
                CatalogFilters,
                CatalogItems,
                SupplierLogos,
                CatalogValidationRules,
                CatalogViews,
                Dashboard,
                Favorites,
                CatalogImportStatus,
                PurchaseOrder,
                ContractRequests,
                ChargeReconciliations,
                InvoiceReconciliations,
                PaymentRequests,
                PaymentTransactions,
                KitApprovables,
                ApprovalProcess,
                ShoppingCarts,
                Receipts,
                Invoices,
                MilestoneTrackers,
                Approvables,
                ItemsHeldForConsolidation,
                PurchasingWorkbench,
                UserAccount,
                Integration,
                MyToDo,
                eForms,
                SiteManager,
                AdvancePayment,
                Attachments,
                Comments,
                Customizations,
                Invoicing,
                ProcureToPay,
                Payments,
                PCards,
                CreditMemo,
                Users,
                Groups,
                DashboardTemplates,
                Suppliers,
                Budgets,
                Taxes,
                Charges,
                ServicesProcurement,
                ItemMaster,
                TravelAndExpenseManager,
                TravelAndExpense,
                PCardCharges
            );
            Enable = true;
            InSituURL = "https://svcqaauc.lab1.ariba.com/insitu/insitu.php";
            PhaseRollOut = {
                FailFast = false;
                RollOutDirectiveBuyer = 2;
                RollOutDirectiveSupplier = 2;
            };
            RegisterCommunityActivities = true;
            RegisterCommunityDomainObjects = true;
            URL = "https://svcmigauc.lab1.ariba.com";
        };
        Users = {
            IncludeSupplierUsersAsApprovers = false;
            InternalSystemUserList = (
                aribasystem,
                aribaguestsystem,
                customersupportadmin,
                SourcingSupportDeskAdmin,
                GSOCatalogManagementAdmin,
                GSOSupplierManagementAdmin,
                GSOTSCSub-contractAdmin,
                GSOOnDemandDeliveryAdmin,
                GSOCategoryProcurementAdmin
            );
        };
    };
    Test = {
        System = {
            Catalog = { Publishing = { LegacyPublishMode = false;};};
            Framework = { DefaultRealm = p2pTeSg;};
            Procure = {
                AribaNetwork = {
                    SupplierId = "ab-supplier-test1@ariba.com";
                    SupplierPostURL = "https://svcdev6.ariba.com/service/transaction/cxml.asp";
                };
                MaxTryTimes = 30;
            };
        };
    };
    VendedUrls = {
        AdminFrontDoor = "http://localhost:8050/Buyer/Main";
        AdminFrontDoorTopURL = "http://localhost:8050";
        FrontDoor = "http://localhost:8050/Buyer/Main";
        FrontDoorTopLevel = "http://localhost:8050";
    };
}
